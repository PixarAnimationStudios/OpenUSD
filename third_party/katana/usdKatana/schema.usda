#usda 1.0
(
    "This file describes the USD katana blind object schemata for code generation."
    subLayers = [
        @usd/schema.usda@
    ]

)

def "GLOBAL" (
    customData = {
        string libraryName      = "usdKatana"
        string libraryPath      = "usdKatana"
        # string libraryPrefix  = "UsdKatana"
        # string tokensPrefix   = "UsdKatana"
        dictionary libraryTokens = {
            dictionary katanaLooksScopeName = {
                string value = "Looks"
            }
            dictionary katanaLooksScopePathSubstring = {
                string value = "/Looks/"
            }
            dictionary katanaLooksChildNameExclusionAttrName = {
                string value = "__UsdIn.skipChild.Looks"
            }
        }
    }
)
{
}

##### Katana Blind Data Object #####

class BlindDataObject "BlindDataObject" (
    inherits = </Typed>
    doc = """Container namespace schema for katana blind data from the klf file""" 
) {
    string katana:type (
        customData = { 
            string apiName = "type"
        }
    )
    bool katana:visible (
        customData = { 
            string apiName = "visible"
        }
    )
    bool katana:suppressGroupToAssemblyPromotion (
        doc = """If true don't promote a group to an assembly."""
        customData = { 
            string apiName = "suppressGroupToAssemblyPromotion"
        }
    )
}

class "LookAPI"(
    inherits = </APISchemaBase>
    doc = """Katana-specific extensions of UsdShadeMaterial."""
) {
    uniform string katana:primName (
        doc = """When a Material derives from another, "base" Material (see
        \\ref UsdShadeMaterial::SetBaseMaterial() "SetBaseMaterial()"), it seems 
        natural to think about a "child" that inherits from its base Material 
        "parent".
        However, in USD, the derived Material cannot be a child of the base Material
        because the \\em derives relationship would cause an infinite
        recursion in the composition graph (because the derived Material must
        inherit not just the base Material prim itself, but all of the shader and
        other prims scoped underneath it, which would include the derived Material
        itself).

        For UI's that want to present the hierarchy that derivation implies,
        we provide \\em primName, which specifies the derived Material's 
        "relative name" with respect to the base Material.

        For example, a structure that looks like:
        - Metal
          - .. Brass
          - .. Aluminum

        will be encoded as
        - Metal
        - Metal_Brass
        - Metal_Aluminum

        We set derivedName on Metal_Brass and Metal_Aluminum to Brass and
        Aluminum, to be able to have proper child names if the hierarchy
        is reconstructed.
        """
        customData = {
            string apiName = "primName"
        }
    )
}
