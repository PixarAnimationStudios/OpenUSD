#usda 1.0
(
    defaultPrim = "World"
    endFrame = 1
    startFrame = 1
)

def Xform "World" (
    customData = {
        bool zUp = 1
    }
    kind = "group"
)
{
    def Xform "anim" (
        kind = "group"
    )
    {
        def Xform "Model" (
            kind = "component"
            assetInfo = {
                string name = "Model"
            }
        )
        {
            Matrix4d constraintTargets:RootXf = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
                constraintTargetIdentifier = "RootXf"
            )
            bool important = 1
        }

        def Xform "TestCollections" (
            kind = "component"
            prepend apiSchemas = ["CollectionAPI:ancestor", "CollectionAPI:geomExpandPrims", "CollectionAPI:geomExplicit"]
        )
        {
            uniform token collection:ancestor:expansionRule = "expandPrims"
            add rel collection:ancestor:includes = [
                </World/anim/TestCollections/Geom/LampShade>,            
            ]

            uniform token collection:geomExpandPrims:expansionRule = "expandPrims"
            add rel collection:geomExpandPrims:includes = [
                </World/anim/TestCollections/Geom>,
                # although this path is included in the collection, it won't be 
                # a part of the collection imported in katana.
                </World/anim/Model>
            ]
            add rel collection:geomExpandPrims:excludes = [
                </World/anim/TestCollections/Geom/LampStem>
            ]

            uniform token collection:geomExplicit:expansionRule = "explicitOnly"
            add rel collection:geomExplicit:includes = [
                </World/anim/TestCollections/Geom/LampBase>,
                </World/anim/TestCollections/Geom/LampShade>,
                # although this path is included in the collection, it won't be 
                # a part of the collection imported in katana.
                </World/anim/Model>
            ]
            def Xform "Geom" (
                prepend apiSchemas = ["CollectionAPI:atGeom", "CollectionAPI:ancestorAtGeom", "CollectionAPI:atGeomAtGeom", "CollectionAPI:descendantAtGeom", "CollectionAPI:union"]
            )
            {
                uniform token collection:atGeom:expansionRule = "expandPrims"
                add rel collection:atGeom:includes = [
                    </World/anim/TestCollections/Geom/LampStem>,            
                ]

                uniform token collection:ancestorAtGeom:expansionRule = "expandPrims"
                add rel collection:ancestorAtGeom:includes = [
                    </World/anim/TestCollections.collection:ancestor>,
                ]

                uniform token collection:atGeomAtGeom:expansionRule = "expandPrims"
                add rel collection:atGeomAtGeom:includes = [
                    </World/anim/TestCollections/Geom.collection:atGeom>,
                ]

                uniform token collection:descendantAtGeom:expansionRule = "expandPrims"
                add rel collection:descendantAtGeom:includes = [
                    </World/anim/TestCollections/Geom/LampBase.collection:descendant>,
                ]

                uniform token collection:union:expansionRule = "expandPrims"
                add rel collection:union:includes = [
                    </World/anim/TestCollections.collection:ancestor>,
                    </World/anim/TestCollections/Geom.collection:atGeom>,
                    </World/anim/TestCollections/Geom/LampBase.collection:descendant>,
                ]

                def Xform "LampBase" (
                    prepend apiSchemas = ["CollectionAPI:descendant"]
                )
                {
                    uniform token collection:descendant:expansionRule = "expandPrims"
                    add rel collection:descendant:includes = [
                        </World/anim/TestCollections/Geom/LampBase>,            
                    ]
                }
                def Xform "LampShade" 
                {
                    
                }
                def Xform "LampStem"
                {
                    
                }
            }
        }
    }

    def Camera "main_cam" (
        kind = "camera"
    )
    {
        Vec2f clippingRange = (20, 5000)
        float horizontalAperture = 25.6
        float verticalAperture = 13.45
        float horizontalApertureOffset = 1.3
        float focalLength = 22.0
    }

    def Xform "Xform"
    {
        Vec3f xformOp:scale = (0.134601, 0.134601, 0.134601)
        Vec3d xformOp:translate = (0.43237221689847, 2.33329824789336, 1.30950511533509)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        
        rel material:binding = </World/NotLooks/anotherLambert>
    }

    def Mesh "Mesh"
    {
        Vec3f[] extent = [(-10.413, -10.413, -10.413), (10.413, 10.413, 10.413)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 9, 8, 1, 2, 10, 9, 2, 3, 11, 10, 3, 4, 12, 11, 4, 5, 13, 12, 5, 6, 14, 13, 6, 7, 15, 14, 7, 0, 8, 15, 8, 9, 17, 16, 9, 10, 18, 17, 10, 11, 19, 18, 11, 12, 20, 19, 12, 13, 21, 20, 13, 14, 22, 21, 14, 15, 23, 22, 15, 8, 16, 23, 16, 17, 25, 24, 17, 18, 26, 25, 18, 19, 27, 26, 19, 20, 28, 27, 20, 21, 29, 28, 21, 22, 30, 29, 22, 23, 31, 30, 23, 16, 24, 31, 24, 25, 33, 32, 25, 26, 34, 33, 26, 27, 35, 34, 27, 28, 36, 35, 28, 29, 37, 36, 29, 30, 38, 37, 30, 31, 39, 38, 31, 24, 32, 39, 32, 33, 41, 40, 33, 34, 42, 41, 34, 35, 43, 42, 35, 36, 44, 43, 36, 37, 45, 44, 37, 38, 46, 45, 38, 39, 47, 46, 39, 32, 40, 47, 40, 41, 49, 48, 41, 42, 50, 49, 42, 43, 51, 50, 43, 44, 52, 51, 44, 45, 53, 52, 45, 46, 54, 53, 46, 47, 55, 54, 47, 40, 48, 55, 1, 0, 56, 2, 1, 56, 3, 2, 56, 4, 3, 56, 5, 4, 56, 6, 5, 56, 7, 6, 56, 0, 7, 56, 48, 49, 57, 49, 50, 57, 50, 51, 57, 51, 52, 57, 52, 53, 57, 53, 54, 57, 54, 55, 57, 55, 48, 57]
        rel material:binding = </World/Looks/PxrDisney5SG>
        PointFloat[] points = [(2.81774, 2.81774, -9.62037), (0, 3.98489, -9.62037), (-2.81774, 2.81774, -9.62037), (-3.98489, -2.13615e-15, -9.62037), (-2.81774, -2.81774, -9.62037), (0, -3.98489, -9.62037), (2.81774, -2.81774, -9.62037), (3.98489, -2.13615e-15, -9.62037), (5.20651, 5.20651, -7.36311), (0, 7.36311, -7.36311), (-5.20651, 5.20651, -7.36311), (-7.36311, -1.63494e-15, -7.36311), (-5.20651, -5.20651, -7.36311), (0, -7.36311, -7.36311), (5.20651, -5.20651, -7.36311), (7.36311, -1.63494e-15, -7.36311), (6.80263, 6.80263, -3.98489), (0, 9.62037, -3.98489), (-6.80263, 6.80263, -3.98489), (-9.62037, -8.84823e-16, -3.98489), (-6.80263, -6.80263, -3.98489), (0, -9.62037, -3.98489), (6.80263, -6.80263, -3.98489), (9.62037, -8.84823e-16, -3.98489), (7.36311, 7.36311, -1.63494e-15), (0, 10.413, -2.31215e-15), (-7.36311, 7.36311, -1.63494e-15), (-10.413, 0, 0), (-7.36311, -7.36311, 1.63494e-15), (0, -10.413, 2.31215e-15), (7.36311, -7.36311, 1.63494e-15), (10.413, 0, 0), (6.80263, 6.80263, 3.98489), (0, 9.62037, 3.98489), (-6.80263, 6.80263, 3.98489), (-9.62037, 8.84823e-16, 3.98489), (-6.80263, -6.80263, 3.98489), (0, -9.62037, 3.98489), (6.80263, -6.80263, 3.98489), (9.62037, 8.84823e-16, 3.98489), (5.20651, 5.20651, 7.36311), (0, 7.36311, 7.36311), (-5.20651, 5.20651, 7.36311), (-7.36311, 1.63494e-15, 7.36311), (-5.20651, -5.20651, 7.36311), (0, -7.36311, 7.36311), (5.20651, -5.20651, 7.36311), (7.36311, 1.63494e-15, 7.36311), (2.81774, 2.81774, 9.62037), (0, 3.98489, 9.62037), (-2.81774, 2.81774, 9.62037), (-3.98489, 2.13615e-15, 9.62037), (-2.81774, -2.81774, 9.62037), (0, -3.98489, 9.62037), (2.81774, -2.81774, 9.62037), (3.98489, 2.13615e-15, 9.62037), (0, -2.31215e-15, -10.413), (0, 2.31215e-15, 10.413)]
        ColorFloat[] primvars:displayColor = [(1, 0, 0)]
        Vec2f[] primvars:st = [(0, 0.125), (0.125, 0.125), (0.125, 0.25), (0, 0.25), (0.125, 0.125), (0.25, 0.125), (0.25, 0.25), (0.125, 0.25), (0.25, 0.125), (0.375, 0.125), (0.375, 0.25), (0.25, 0.25), (0.375, 0.125), (0.5, 0.125), (0.5, 0.25), (0.375, 0.25), (0.5, 0.125), (0.625, 0.125), (0.625, 0.25), (0.5, 0.25), (0.625, 0.125), (0.75, 0.125), (0.75, 0.25), (0.625, 0.25), (0.75, 0.125), (0.875, 0.125), (0.875, 0.25), (0.75, 0.25), (0.875, 0.125), (1, 0.125), (1, 0.25), (0.875, 0.25), (0, 0.25), (0.125, 0.25), (0.125, 0.375), (0, 0.375), (0.125, 0.25), (0.25, 0.25), (0.25, 0.375), (0.125, 0.375), (0.25, 0.25), (0.375, 0.25), (0.375, 0.375), (0.25, 0.375), (0.375, 0.25), (0.5, 0.25), (0.5, 0.375), (0.375, 0.375), (0.5, 0.25), (0.625, 0.25), (0.625, 0.375), (0.5, 0.375), (0.625, 0.25), (0.75, 0.25), (0.75, 0.375), (0.625, 0.375), (0.75, 0.25), (0.875, 0.25), (0.875, 0.375), (0.75, 0.375), (0.875, 0.25), (1, 0.25), (1, 0.375), (0.875, 0.375), (0, 0.375), (0.125, 0.375), (0.125, 0.5), (0, 0.5), (0.125, 0.375), (0.25, 0.375), (0.25, 0.5), (0.125, 0.5), (0.25, 0.375), (0.375, 0.375), (0.375, 0.5), (0.25, 0.5), (0.375, 0.375), (0.5, 0.375), (0.5, 0.5), (0.375, 0.5), (0.5, 0.375), (0.625, 0.375), (0.625, 0.5), (0.5, 0.5), (0.625, 0.375), (0.75, 0.375), (0.75, 0.5), (0.625, 0.5), (0.75, 0.375), (0.875, 0.375), (0.875, 0.5), (0.75, 0.5), (0.875, 0.375), (1, 0.375), (1, 0.5), (0.875, 0.5), (0, 0.5), (0.125, 0.5), (0.125, 0.625), (0, 0.625), (0.125, 0.5), (0.25, 0.5), (0.25, 0.625), (0.125, 0.625), (0.25, 0.5), (0.375, 0.5), (0.375, 0.625), (0.25, 0.625), (0.375, 0.5), (0.5, 0.5), (0.5, 0.625), (0.375, 0.625), (0.5, 0.5), (0.625, 0.5), (0.625, 0.625), (0.5, 0.625), (0.625, 0.5), (0.75, 0.5), (0.75, 0.625), (0.625, 0.625), (0.75, 0.5), (0.875, 0.5), (0.875, 0.625), (0.75, 0.625), (0.875, 0.5), (1, 0.5), (1, 0.625), (0.875, 0.625), (0, 0.625), (0.125, 0.625), (0.125, 0.75), (0, 0.75), (0.125, 0.625), (0.25, 0.625), (0.25, 0.75), (0.125, 0.75), (0.25, 0.625), (0.375, 0.625), (0.375, 0.75), (0.25, 0.75), (0.375, 0.625), (0.5, 0.625), (0.5, 0.75), (0.375, 0.75), (0.5, 0.625), (0.625, 0.625), (0.625, 0.75), (0.5, 0.75), (0.625, 0.625), (0.75, 0.625), (0.75, 0.75), (0.625, 0.75), (0.75, 0.625), (0.875, 0.625), (0.875, 0.75), (0.75, 0.75), (0.875, 0.625), (1, 0.625), (1, 0.75), (0.875, 0.75), (0, 0.75), (0.125, 0.75), (0.125, 0.875), (0, 0.875), (0.125, 0.75), (0.25, 0.75), (0.25, 0.875), (0.125, 0.875), (0.25, 0.75), (0.375, 0.75), (0.375, 0.875), (0.25, 0.875), (0.375, 0.75), (0.5, 0.75), (0.5, 0.875), (0.375, 0.875), (0.5, 0.75), (0.625, 0.75), (0.625, 0.875), (0.5, 0.875), (0.625, 0.75), (0.75, 0.75), (0.75, 0.875), (0.625, 0.875), (0.75, 0.75), (0.875, 0.75), (0.875, 0.875), (0.75, 0.875), (0.875, 0.75), (1, 0.75), (1, 0.875), (0.875, 0.875), (0.125, 0.125), (0, 0.125), (0.0625, 0), (0.25, 0.125), (0.125, 0.125), (0.1875, 0), (0.375, 0.125), (0.25, 0.125), (0.3125, 0), (0.5, 0.125), (0.375, 0.125), (0.4375, 0), (0.625, 0.125), (0.5, 0.125), (0.5625, 0), (0.75, 0.125), (0.625, 0.125), (0.6875, 0), (0.875, 0.125), (0.75, 0.125), (0.8125, 0), (1, 0.125), (0.875, 0.125), (0.9375, 0), (0, 0.875), (0.125, 0.875), (0.0625, 1), (0.125, 0.875), (0.25, 0.875), (0.1875, 1), (0.25, 0.875), (0.375, 0.875), (0.3125, 1), (0.375, 0.875), (0.5, 0.875), (0.4375, 1), (0.5, 0.875), (0.625, 0.875), (0.5625, 1), (0.625, 0.875), (0.75, 0.875), (0.6875, 1), (0.75, 0.875), (0.875, 0.875), (0.8125, 1), (0.875, 0.875), (1, 0.875), (0.9375, 1)] (
            interpolation = "faceVarying"
        )
        Vec3f xformOp:scale = (0.134601, 0.134601, 0.134601)
        Vec3d xformOp:translate = (0.43237221689847, 2.33329824789336, 1.30950511533509)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
    }

    def Scope "Looks"
    {
        def Material "PxrDisney5SG"
        {
            rel riLook:bxdf = </World/Looks/PxrDisney5SG/PxrDisney5>
            int katana:fromKlf:material:pbsNetworkMaterialVersion = 1

            def Shader "PxrDisney5"
            {
                float anisotropic = 0
                ColorFloat baseColor
                string binMembership = ""
                Vec3f bumpNormal = (0, 0, 0)
                bool caching = 0
                float clearcoat = 0
                float clearcoatGloss = 1
                Vec3f color = (0, 0, 0)
                rel connectedSourceFor:baseColor = </World/Looks/PxrDisney5SG/PxrMix1.outputs:resultRGB>
                ColorFloat emitColor = (0, 0, 0)
                uniform token info:id = "PxrDisney"
                int inputAOV = 0
                int isHistoricallyInteresting = 2
                float metallic = 0
                token nodeState = "Normal"
                Vec3f outColor = (0, 0, 0)
                float presence = 1
                float roughness = 0.25
                float sheen = 0
                float sheenTint = 0.5
                float shininess = 100
                float specular = 0.5
                Vec3f specularColor = (1, 1, 1)
                float specularTint = 0
                float subsurface = 0
                ColorFloat subsurfaceColor = (0, 0, 0)
            }

            def Shader "PxrMix1"
            {
                string binMembership = ""
                bool caching = 0
                ColorFloat color1 = (0.523443, 0.177094, 0.00889227)
                ColorFloat color2 = (0.101631, 0.415395, 0.796917)
                rel connectedSourceFor:mix = </World/Looks/PxrDisney5SG/PxrFractal1.outputs:resultF>
                uniform token info:id = "PxrMix"
                int isHistoricallyInteresting = 2
                float mix
                token nodeState = "Normal"
                ColorFloat outputs:resultRGB
                float resultB = 0
                float resultG = 0
                float resultR = 0
                ColorFloat resultRGB = (1, 1, 1)
            }

            def Shader "PxrFractal1"
            {
                string binMembership = ""
                bool caching = 0
                float dimension = 1
                float erosion = 0
                float frequency = 1.1011236
                uniform token info:id= "PxrFractal"
                int isHistoricallyInteresting = 2
                float lacunarity = 2
                int layers = 6
                string manifold = ""
                token nodeState = "Normal"
                float outputs:resultF
                float resultF = 0
                float variation = 0
            }
        }
    }

    def Xform "FaceSet"
    {
        def Mesh "Plane"
        {
            Vec3f[] extent = [(-10, -10, 0), (10, 10, 0)]
            uniform bool subsetFamily:materialBind:isPartition = 1

            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 6, 5, 1, 2, 7, 6, 2, 3, 8, 7, 3, 4, 9, 8, 5, 6, 11, 10, 6, 7, 12, 11, 7, 8, 13, 12, 8, 9, 14, 13, 10, 11, 16, 15, 11, 12, 17, 16, 12, 13, 18, 17, 13, 14, 19, 18, 15, 16, 21, 20, 16, 17, 22, 21, 17, 18, 23, 22, 18, 19, 24, 23]
            PointFloat[] points = [(-10, -10, 0), (-5, -10, 0), (0, -10, 0), (5, -10, 0), (10, -10, 0), (-10, -5, 0), (-5, -5, 0), (0, -5, 0), (5, -5, 0), (10, -5, 0), (-10, 0, 0), (-5, 0, 0), (0, 0, 0), (5, 0, 0), (10, 0, 0), (-10, 5, 0), (-5, 5, 0), (0, 5, 0), (5, 5, 0), (10, 5, 0), (-10, 10, 0), (-5, 10, 0), (0, 10, 0), (5, 10, 0), (10, 10, 0)]
            ColorFloat[] primvars:displayColor = [(1, 0, 0), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (1, 0, 0), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (1, 0, 0), (0, 1, 1.16524e-05), (0, 1, 1.16524e-05), (1, 0, 0)] (
                interpolation = "uniform"
            )
            Vec2f[] primvars:st = [(0, 0), (0.25, 0), (0.5, 0), (0.75, 0), (1, 0), (0, 0.25), (0.25, 0.25), (0.5, 0.25), (0.75, 0.25), (1, 0.25), (0, 0.5), (0.25, 0.5), (0.5, 0.5), (0.75, 0.5), (1, 0.5), (0, 0.75), (0.25, 0.75), (0.5, 0.75), (0.75, 0.75), (1, 0.75), (0, 1), (0.25, 1), (0.5, 1), (0.75, 1), (1, 1)] (
                interpolation = "vertex"
            )
            def GeomSubset "faceset_0"
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14]
                rel material:binding =  </World/FaceSet/Looks/initialShadingGroup>
            }
            def GeomSubset "faceset_1"
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 3, 12, 15]
                rel material:binding =  </World/FaceSet/Looks/lambert2SG>
            }
        }

        def Scope "Looks"
        {
            def Material "initialShadingGroup"
            {
                def Shader "initialShadingGroup_lambert"
                {
                    uniform token info:id = "PxrDiffuse"
                }
            }

            def Material "lambert2SG"
            {
                def Shader "lambert2SG_lambert"
                {
                    uniform token info:id = "PxrDiffuse"
                }
            }
        }
        
        def Scope "NotLooks"
        {
            def Material "anotherLambert"
            {
                def Shader "anotherLambertBxdf"
                {
                    uniform token info:id = "PxrDiffuse"
                }
            }
        }
    }
}

