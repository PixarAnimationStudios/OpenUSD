//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.h files to make changes.           ** */
/* ************************************************************************** */

#ifndef EXT_RMANPKG_25_0_PLUGIN_RENDERMAN_PLUGIN_HD_PRMAN_RILEY_RENDER_OUTPUT_SCHEMA_H
#define EXT_RMANPKG_25_0_PLUGIN_RENDERMAN_PLUGIN_HD_PRMAN_RILEY_RENDER_OUTPUT_SCHEMA_H

#include "hdPrman/api.h"

#include "pxr/imaging/hd/schema.h" 

PXR_NAMESPACE_OPEN_SCOPE

//-----------------------------------------------------------------------------

#define HDPRMANRILEYRENDEROUTPUT_SCHEMA_TOKENS \
    (rileyRenderOutput) \
    (name) \
    (type) \
    (source) \
    (accumulationRule) \
    (filter) \
    (filterSize) \
    (relativePixelVariance) \
    (params) \
    ((typeFloat, "float")) \
    ((typeInteger, "integer")) \
    ((typeColor, "color")) \
    ((typeVector, "vector")) \

TF_DECLARE_PUBLIC_TOKENS(HdPrmanRileyRenderOutputSchemaTokens, HDPRMAN_API,
    HDPRMANRILEYRENDEROUTPUT_SCHEMA_TOKENS);

//-----------------------------------------------------------------------------

class HdPrmanRileyRenderOutputSchema : public HdSchema
{
public:
    HdPrmanRileyRenderOutputSchema(HdContainerDataSourceHandle container)
    : HdSchema(container) {}

    //ACCESSORS

    HDPRMAN_API
    HdTokenDataSourceHandle GetName();
    HDPRMAN_API
    HdTokenDataSourceHandle GetType();
    HDPRMAN_API
    HdTokenDataSourceHandle GetSource();
    HDPRMAN_API
    HdTokenDataSourceHandle GetAccumulationRule();
    HDPRMAN_API
    HdTokenDataSourceHandle GetFilter();
    HDPRMAN_API
    HdVec2fDataSourceHandle GetFilterSize();
    HDPRMAN_API
    HdFloatDataSourceHandle GetRelativePixelVariance();
    HDPRMAN_API
    HdContainerDataSourceHandle GetParams();

    // RETRIEVING AND CONSTRUCTING

    /// Builds a container data source which includes the provided child data
    /// sources. Parameters with nullptr values are excluded. This is a
    /// low-level interface. For cases in which it's desired to define
    /// the container with a sparse set of child fields, the Builder class
    /// is often more convenient and readable.
    HDPRMAN_API
    static HdContainerDataSourceHandle
    BuildRetained(
        const HdTokenDataSourceHandle &name,
        const HdTokenDataSourceHandle &type,
        const HdTokenDataSourceHandle &source,
        const HdTokenDataSourceHandle &accumulationRule,
        const HdTokenDataSourceHandle &filter,
        const HdVec2fDataSourceHandle &filterSize,
        const HdFloatDataSourceHandle &relativePixelVariance,
        const HdContainerDataSourceHandle &params
    );

    /// \class HdPrmanRileyRenderOutputSchema::Builder
    /// 
    /// Utility class for setting sparse sets of child data source fields to be
    /// filled as arguments into BuildRetained. Because all setter methods
    /// return a reference to the instance, this can be used in the "builder
    /// pattern" form.
    class Builder
    {
    public:
        HDPRMAN_API
        Builder &SetName(
            const HdTokenDataSourceHandle &name);
        HDPRMAN_API
        Builder &SetType(
            const HdTokenDataSourceHandle &type);
        HDPRMAN_API
        Builder &SetSource(
            const HdTokenDataSourceHandle &source);
        HDPRMAN_API
        Builder &SetAccumulationRule(
            const HdTokenDataSourceHandle &accumulationRule);
        HDPRMAN_API
        Builder &SetFilter(
            const HdTokenDataSourceHandle &filter);
        HDPRMAN_API
        Builder &SetFilterSize(
            const HdVec2fDataSourceHandle &filterSize);
        HDPRMAN_API
        Builder &SetRelativePixelVariance(
            const HdFloatDataSourceHandle &relativePixelVariance);
        HDPRMAN_API
        Builder &SetParams(
            const HdContainerDataSourceHandle &params);

        /// Returns a container data source containing the members set thus far.
        HDPRMAN_API
        HdContainerDataSourceHandle Build();

    private:
        HdTokenDataSourceHandle _name;
        HdTokenDataSourceHandle _type;
        HdTokenDataSourceHandle _source;
        HdTokenDataSourceHandle _accumulationRule;
        HdTokenDataSourceHandle _filter;
        HdVec2fDataSourceHandle _filterSize;
        HdFloatDataSourceHandle _relativePixelVariance;
        HdContainerDataSourceHandle _params;
    };

    /// Retrieves a container data source with the schema's default name token
    /// "rileyRenderOutput" from the parent container and constructs a
    /// HdPrmanRileyRenderOutputSchema instance.
    /// Because the requested container data source may not exist, the result
    /// should be checked with IsDefined() or a bool comparison before use.
    HDPRMAN_API
    static HdPrmanRileyRenderOutputSchema GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer);

    /// Returns a token where the container representing this schema is found in
    /// a container by default.
    HDPRMAN_API
    static const TfToken &GetSchemaToken();

    /// Returns an HdDataSourceLocator (relative to the prim-level data source)
    /// where the container representing this schema is found by default.
    HDPRMAN_API
    static const HdDataSourceLocator &GetDefaultLocator();

    // DATA SOURCE LOCATORS
    //
    // Data source locators (relative to the prim-level data source)
    // where schema member is found by default.

    /// Data source locator for name
    HDPRMAN_API
    static const HdDataSourceLocator &GetNameLocator();

    /// Data source locator for type
    HDPRMAN_API
    static const HdDataSourceLocator &GetTypeLocator();

    /// Data source locator for source
    HDPRMAN_API
    static const HdDataSourceLocator &GetSourceLocator();

    /// Data source locator for accumulationRule
    HDPRMAN_API
    static const HdDataSourceLocator &GetAccumulationRuleLocator();

    /// Data source locator for filter
    HDPRMAN_API
    static const HdDataSourceLocator &GetFilterLocator();

    /// Data source locator for filterSize
    HDPRMAN_API
    static const HdDataSourceLocator &GetFilterSizeLocator();

    /// Data source locator for relativePixelVariance
    HDPRMAN_API
    static const HdDataSourceLocator &GetRelativePixelVarianceLocator();

    /// Data source locator for params
    HDPRMAN_API
    static const HdDataSourceLocator &GetParamsLocator();


};

PXR_NAMESPACE_CLOSE_SCOPE

#endif