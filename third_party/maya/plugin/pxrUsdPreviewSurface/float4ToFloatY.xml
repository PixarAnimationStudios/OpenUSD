<fragment uiName="float4ToFloatY" name="float4ToFloatY" type="plumbing" class="ShadeFragment" version="1.0" feature_level="0">
    <!-- WARNING: Do not edit this file. It was automatically generated by pxrUsdPreviewSurfaceGenFragments. -->
    <description>
        Extracts the Y component of a 4D float vector.
    </description>
    <properties>
        <float4 name="vectorInput"/>
    </properties>
    <values/>
    <outputs>
        <float name="floatOutput"/>
    </outputs>
    <implementation>
        <implementation render="OGSRenderer" language="Cg" lang_version="2.1">
            <function_name val="float4ToFloatY"/>
            <source>
                <![CDATA[
// Check whether we're in a GLSL context. If so, we don't expect "floatN"
// types to exist, so we use "vecN" types instead.
#if defined(__VERSION__) && (__VERSION__ >= 110)
#define float4 vec4
#endif

float
float4ToFloatY(float4 vectorInput)
{
    return vectorInput.y;
}

]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="GLSL" lang_version="3.0">
            <function_name val="float4ToFloatY"/>
            <source>
                <![CDATA[
// Check whether we're in a GLSL context. If so, we don't expect "floatN"
// types to exist, so we use "vecN" types instead.
#if defined(__VERSION__) && (__VERSION__ >= 110)
#define float4 vec4
#endif

float
float4ToFloatY(float4 vectorInput)
{
    return vectorInput.y;
}

]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="11.0">
            <function_name val="float4ToFloatY"/>
            <source>
                <![CDATA[
// Check whether we're in a GLSL context. If so, we don't expect "floatN"
// types to exist, so we use "vecN" types instead.
#if defined(__VERSION__) && (__VERSION__ >= 110)
#define float4 vec4
#endif

float
float4ToFloatY(float4 vectorInput)
{
    return vectorInput.y;
}

]]>
            </source>
        </implementation>
        <implementation render="OGSRenderer" language="HLSL" lang_version="10.0">
            <function_name val="float4ToFloatY"/>
            <source>
                <![CDATA[
// Check whether we're in a GLSL context. If so, we don't expect "floatN"
// types to exist, so we use "vecN" types instead.
#if defined(__VERSION__) && (__VERSION__ >= 110)
#define float4 vec4
#endif

float
float4ToFloatY(float4 vectorInput)
{
    return vectorInput.y;
}

]]>
            </source>
        </implementation>
    </implementation>
</fragment>