#usda 1.0
(
    endTimeCode = 30
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def SkelRoot "Root" (
    kind = "component"
)
{
    float3[] extent.timeSamples = {
        1: [(-8.881784e-16, -1, 0), (0, 1, 4.440892e-16)],
        2: [(-8.8548644e-16, -1, 0), (0, 0.99992824, 0.011980047)],
        3: [(-8.77966e-16, -1, 0), (0, 0.9990293, 0.04405114)],
        4: [(-8.6628537e-16, -1, 0), (0, 0.99590486, 0.0904073)],
        5: [(-8.512596e-16, -1, 0), (0, 0.98941684, 0.14510126)],
        6: [(-8.341171e-16, -1, 0), (0, 0.97935027, 0.20217088)],
        7: [(-8.1660954e-16, -1, 0), (0, 0.9667337, 0.25578493)],
        8: [(-8.0096155e-16, -1, 0), (0, 0.95381016, 0.3004101)],
        9: [(-7.8970147e-16, -1, 0), (0, 0.94367975, 0.3308602)],
        10: [(-7.8540797e-16, -1, 0), (0, 0.93965006, 0.34213713)],
        11: [(-0.008673679, -1, 0), (0, 0.9396149, 0.34212375)],
        12: [(-0.032211367, -1, 0), (0, 0.9391626, 0.34195903)],
        13: [(-0.06686227, -1, 0), (0, 0.93754745, 0.34137106)],
        14: [(-0.10882605, -1, 0), (0, 0.9340696, 0.34010422)],
        15: [(-0.15427072, -1, 0), (0, 0.9284015, 0.33804023)],
        16: [(-0.19939104, -1, 0), (0, 0.9207824, 0.33526555)],
        17: [(-0.24048574, -1, 0), (0, 0.91207445, 0.33209455)],
        18: [(-0.2740113, -1, 0), (0, 0.903687, 0.3290404)],
        19: [(-0.2965753, -1, 0), (0, 0.8973754, 0.32674214)],
        20: [(-0.30484772, -1, 0), (0, 0.89492446, 0.3258497)],
        21: [(-0.30484772, -1, 0), (0, 0.89492446, 0.3258497)],
        22: [(-0.30484763, -1, 0), (0, 0.8949245, 0.32584968)],
        23: [(-0.30484766, -1, 0), (0, 0.8949245, 0.3258497)],
        24: [(-0.30484772, -1, 0), (0, 0.89492446, 0.32584974)],
        25: [(-0.3048477, -1, 0), (0, 0.8949245, 0.3258497)],
        26: [(-0.3048477, -1, 0), (0, 0.8949245, 0.3258497)],
        27: [(-0.30484763, -1, 0), (0, 0.8949245, 0.32584968)],
        28: [(-0.30484766, -1, 0), (0, 0.8949245, 0.32584968)],
        29: [(-0.30484766, -1, 0), (0, 0.8949245, 0.32584968)],
        30: [(-0.30484766, -1, 0), (0, 0.8949245, 0.3258497)],
    }
    float3[] extentsHint.timeSamples = {
        1: [(-8.881784e-16, -1, 0), (0, 1, 4.440892e-16)],
        2: [(-8.8548644e-16, -1, 0), (0, 0.99992824, 0.011980047)],
        3: [(-8.77966e-16, -1, 0), (0, 0.9990293, 0.04405114)],
        4: [(-8.6628537e-16, -1, 0), (0, 0.99590486, 0.0904073)],
        5: [(-8.512596e-16, -1, 0), (0, 0.98941684, 0.14510126)],
        6: [(-8.341171e-16, -1, 0), (0, 0.97935027, 0.20217088)],
        7: [(-8.1660954e-16, -1, 0), (0, 0.9667337, 0.25578493)],
        8: [(-8.0096155e-16, -1, 0), (0, 0.95381016, 0.3004101)],
        9: [(-7.8970147e-16, -1, 0), (0, 0.94367975, 0.3308602)],
        10: [(-7.8540797e-16, -1, 0), (0, 0.93965006, 0.34213713)],
        11: [(-0.008673679, -1, 0), (0, 0.9396149, 0.34212375)],
        12: [(-0.032211367, -1, 0), (0, 0.9391626, 0.34195903)],
        13: [(-0.06686227, -1, 0), (0, 0.93754745, 0.34137106)],
        14: [(-0.10882605, -1, 0), (0, 0.9340696, 0.34010422)],
        15: [(-0.15427072, -1, 0), (0, 0.9284015, 0.33804023)],
        16: [(-0.19939104, -1, 0), (0, 0.9207824, 0.33526555)],
        17: [(-0.24048574, -1, 0), (0, 0.91207445, 0.33209455)],
        18: [(-0.2740113, -1, 0), (0, 0.903687, 0.3290404)],
        19: [(-0.2965753, -1, 0), (0, 0.8973754, 0.32674214)],
        20: [(-0.30484772, -1, 0), (0, 0.89492446, 0.3258497)],
        21: [(-0.30484772, -1, 0), (0, 0.89492446, 0.3258497)],
        22: [(-0.30484763, -1, 0), (0, 0.8949245, 0.32584968)],
        23: [(-0.30484766, -1, 0), (0, 0.8949245, 0.3258497)],
        24: [(-0.30484772, -1, 0), (0, 0.89492446, 0.32584974)],
        25: [(-0.3048477, -1, 0), (0, 0.8949245, 0.3258497)],
        26: [(-0.3048477, -1, 0), (0, 0.8949245, 0.3258497)],
        27: [(-0.30484763, -1, 0), (0, 0.8949245, 0.32584968)],
        28: [(-0.30484766, -1, 0), (0, 0.8949245, 0.32584968)],
        29: [(-0.30484766, -1, 0), (0, 0.8949245, 0.32584968)],
        30: [(-0.30484766, -1, 0), (0, 0.8949245, 0.3258497)],
    }
    rel skel:animationSource = </Root/Animation>
    rel skel:skeleton = </Root/Skeleton>

    def Skeleton "Skeleton"
    {
        uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 1) ), ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (2, 0, 0, 1) )]
        uniform token[] joints = ["joint1", "joint1/joint2", "joint1/joint2/joint3"]
        uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 1) ), ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (1, 0, 0, 1) )]
    }

    def SkelAnimation "Animation"
    {
        uniform token[] joints = ["joint1", "joint1/joint2", "joint1/joint2/joint3"]
        quatf[] rotations.timeSamples = {
            1: [(0.5, 0.5, 0.5, 0.5), (1, 0, 0, 0), (0.5, -0.5, -0.5, -0.5)],
            2: [(0.5, 0.5, 0.5, 0.5), (0.99998206, 0, 0, 0.0059874505), (0.5, -0.5, -0.5, -0.5)],
            3: [(0.5, 0.5, 0.5, 0.5), (0.9997573, 0, 0, 0.022032166), (0.5, -0.5, -0.5, -0.5)],
            4: [(0.5, 0.5, 0.5, 0.5), (0.9989757, 0, 0, 0.04524994), (0.5, -0.5, -0.5, -0.5)],
            5: [(0.5, 0.5, 0.5, 0.5), (0.9973507, 0, 0, 0.07274352), (0.5, -0.5, -0.5, -0.5)],
            6: [(0.5, 0.5, 0.5, 0.5), (0.9948242, 0, 0, 0.10161159), (0.5, -0.5, -0.5, -0.5)],
            7: [(0.5, 0.5, 0.5, 0.5), (0.99164855, 0, 0, 0.12896946), (0.5, -0.5, -0.5, -0.5)],
            8: [(0.5, 0.5, 0.5, 0.5), (0.9883851, 0, 0, 0.15197003), (0.5, -0.5, -0.5, -0.5)],
            9: [(0.5, 0.5, 0.5, 0.5), (0.9858194, 0, 0, 0.16780986), (0.5, -0.5, -0.5, -0.5)],
            10: [(0.5, 0.5, 0.5, 0.5), (0.98479694, 0, 0, 0.1737094), (0.5, -0.5, -0.5, -0.5)],
            11: [(0.5, 0.5, 0.5, 0.5), (0.9847693, -0.0060739038, 0.0033323904, 0.17372827), (0.5, -0.5, -0.5, -0.5)],
            12: [(0.5, 0.5, 0.5, 0.5), (0.98440933, -0.022794377, 0.012332357, 0.17397308), (0.5, -0.5, -0.5, -0.5)],
            13: [(0.5, 0.5, 0.5, 0.5), (0.98309743, -0.047886964, 0.025488343, 0.17486162), (0.5, -0.5, -0.5, -0.5)],
            14: [(0.5, 0.5, 0.5, 0.5), (0.98019844, -0.07903047, 0.041256294, 0.17681383), (0.5, -0.5, -0.5, -0.5)],
            15: [(0.5, 0.5, 0.5, 0.5), (0.9753132, -0.11386365, 0.058064535, 0.18007703), (0.5, -0.5, -0.5, -0.5)],
            16: [(0.5, 0.5, 0.5, 0.5), (0.9684434, -0.15002865, 0.07434445, 0.18461232), (0.5, -0.5, -0.5, -0.5)],
            17: [(0.5, 0.5, 0.5, 0.5), (0.9600648, -0.18523708, 0.08857696, 0.1900445), (0.5, -0.5, -0.5, -0.5)],
            18: [(0.5, 0.5, 0.5, 0.5), (0.9511102, -0.21733138, 0.09933574, 0.19567554), (0.5, -0.5, -0.5, -0.5)],
            19: [(0.5, 0.5, 0.5, 0.5), (0.9428679, -0.24431108, 0.10530581, 0.2005567), (0.5, -0.5, -0.5, -0.5)],
            20: [(0.5, 0.5, 0.5, 0.5), (0.93680716, -0.26430017, 0.10526084, 0.20361213), (0.5, -0.5, -0.5, -0.5)],
            21: [(0.5, 0.5, 0.5, 0.5), (0.9323757, -0.27953127, 0.10192881, 0.20530044), (0.5, -0.5, -0.5, -0.5)],
            22: [(0.5, 0.5, 0.5, 0.5), (0.9280986, -0.2934199, 0.09885244, 0.20679928), (0.5, -0.5, -0.5, -0.5)],
            23: [(0.5, 0.5, 0.5, 0.5), (0.9240588, -0.30590457, 0.09605568, 0.20811309), (0.5, -0.5, -0.5, -0.5)],
            24: [(0.5, 0.5, 0.5, 0.5), (0.9203373, -0.31692496, 0.093561925, 0.20924607), (0.5, -0.5, -0.5, -0.5)],
            25: [(0.5, 0.5, 0.5, 0.5), (0.9170122, -0.32642126, 0.09139402, 0.21020201), (0.5, -0.5, -0.5, -0.5)],
            26: [(0.5, 0.5, 0.5, 0.5), (0.9141572, -0.33433342, 0.08957415, 0.21098393), (0.5, -0.5, -0.5, -0.5)],
            27: [(0.5, 0.5, 0.5, 0.5), (0.9118408, -0.34060043, 0.08812382, 0.2115938), (0.5, -0.5, -0.5, -0.5)],
            28: [(0.5, 0.5, 0.5, 0.5), (0.9101248, -0.34515962, 0.08706377, 0.21203218), (0.5, -0.5, -0.5, -0.5)],
            29: [(0.5, 0.5, 0.5, 0.5), (0.9090633, -0.34794572, 0.0864139, 0.21229787), (0.5, -0.5, -0.5, -0.5)],
            30: [(0.5, 0.5, 0.5, 0.5), (0.9087012, -0.34889027, 0.08619322, 0.21238756), (0.5, -0.5, -0.5, -0.5)],
        }
        half3[] scales.timeSamples = {
            1: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            2: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            3: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            4: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            5: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            6: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            7: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            8: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            9: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            10: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            11: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            12: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            13: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            14: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            15: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            16: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            17: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            18: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            19: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            20: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            21: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            22: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            23: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            24: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            25: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            26: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            27: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            28: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            29: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            30: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
        }
        float3[] translations.timeSamples = {
            1: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            2: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            3: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            4: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            5: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            6: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            7: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            8: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            9: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            10: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            11: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            12: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            13: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            14: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            15: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            16: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            17: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            18: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            19: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            20: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            21: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            22: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            23: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            24: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            25: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            26: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            27: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            28: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            29: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            30: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
        }
    }

    def Mesh "Cube"
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
        point3f[] points = [(-0.5, -1, 0.5), (0.5, -1, 0.5), (0.5, 0, 0.5), (-0.5, 0, 0.5), (-0.5, 0, 0.5), (0.5, 0, 0.5), (0.5, 1, 0.5), (-0.5, 1, 0.5), (-0.5, 1, 0.5), (0.5, 1, 0.5), (0.5, 1, -0.5), (-0.5, 1, -0.5), (-0.5, 1, -0.5), (0.5, 1, -0.5), (0.5, 0, -0.5), (-0.5, 0, -0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5), (0.5, -1, -0.5), (-0.5, -1, -0.5), (-0.5, -1, -0.5), (0.5, -1, -0.5), (0.5, -1, 0.5), (-0.5, -1, 0.5), (0.5, -1, 0.5), (0.5, -1, -0.5), (0.5, 0, -0.5), (0.5, 0, 0.5), (0.5, 0, 0.5), (0.5, 0, -0.5), (0.5, 1, -0.5), (0.5, 1, 0.5), (-0.5, -1, -0.5), (-0.5, -1, 0.5), (-0.5, 0, 0.5), (-0.5, 0, -0.5), (-0.5, 0, -0.5), (-0.5, 0, 0.5), (-0.5, 1, 0.5), (-0.5, 1, -0.5)]
        matrix4d primvars:skel:geomBindTransform = ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (1, 0, 0, 1) )
        int[] primvars:skel:jointIndices = [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 0] (
            elementSize = 3
            interpolation = "vertex"
        )
        float[] primvars:skel:jointWeights = [1, 0, 0, 1, 0, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 1, 0, 0, 1, 0, 0] (
            elementSize = 3
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

