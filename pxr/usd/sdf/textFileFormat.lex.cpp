//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
#line 2 "pxr/usd/sdf/textFileFormat.lex.cpp"

#line 4 "pxr/usd/sdf/textFileFormat.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE textFileFormatYyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via textFileFormatYyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void textFileFormatYyrestart (FILE *input_file ,yyscan_t yyscanner );
void textFileFormatYy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE textFileFormatYy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void textFileFormatYy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void textFileFormatYy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void textFileFormatYypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void textFileFormatYypop_buffer_state (yyscan_t yyscanner );

static void textFileFormatYyensure_buffer_stack (yyscan_t yyscanner );
static void textFileFormatYy_load_buffer_state (yyscan_t yyscanner );
static void textFileFormatYy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER textFileFormatYy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE textFileFormatYy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE textFileFormatYy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE textFileFormatYy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *textFileFormatYyalloc (yy_size_t ,yyscan_t yyscanner );
void *textFileFormatYyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void textFileFormatYyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer textFileFormatYy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        textFileFormatYyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            textFileFormatYy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        textFileFormatYyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            textFileFormatYy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define textFileFormatYywrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yyconst flex_int16_t yy_nxt[][55] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0
    },

    {
        5,    6,    7,    8,    9,   10,   11,   12,   13,    6,
        6,   14,   15,   16,   17,   17,   12,   18,    6,   19,
       20,   20,   20,   20,   20,   20,   20,   21,   20,   20,
       20,   22,   23,   20,   24,   25,   20,   20,   20,   20,

       26,   27,   20,   20,   28,   29,   30,   31,   32,   33,
       34,   35,   20,   20,   20
    },

    {
        5,    6,    7,    8,    9,   10,   11,   12,   13,    6,
        6,   14,   15,   16,   17,   17,   12,   18,    6,   19,
       20,   20,   20,   20,   20,   20,   20,   21,   20,   20,
       20,   22,   23,   20,   24,   25,   20,   20,   20,   20,
       26,   27,   20,   20,   28,   29,   30,   31,   32,   33,
       34,   35,   20,   20,   20
    },

    {
        5,   36,   36,   37,   38,   36,   36,   36,   36,   39,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,

       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   40,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36
    },

    {
        5,   36,   36,   37,   38,   36,   36,   36,   36,   39,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   40,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36

    },

    {
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
       -5,   -5,   -5,   -5,   -5
    },

    {
        5,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,

       -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,   -6,
       -6,   -6,   -6,   -6,   -6
    },

    {
        5,   -7,   41,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
       -7,   -7,   -7,   -7,   -7
    },

    {
        5,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,

       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,   -8,
       -8,   -8,   -8,   -8,   -8
    },

    {
        5,   -9,   -9,   42,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9

    },

    {
        5,   43,   43,  -10,  -10,   44,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   45,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43
    },

    {
        5,   46,   46,  -11,  -11,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46
    },

    {
        5,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12
    },

    {
        5,   47,   47,  -13,  -13,   47,   47,   47,   48,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   49,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47
    },

    {
        5,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,   50,  -14,   51,   52,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
       53,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,  -14,
      -14,  -14,  -14,  -14,  -14

    },

    {
        5,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,   54,   54,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15
    },

    {
        5,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,   55,
      -16,  -16,  -16,   56,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,

      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16
    },

    {
        5,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,   57,  -17,   58,   58,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,   59,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,   59,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,  -17,
      -17,  -17,  -17,  -17,  -17
    },

    {
        5,   60,   60,  -18,  -18,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,  -18,   61,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60
    },

    {
        5,   62,   62,  -19,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   63,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62

    },

    {
        5,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,   64,   64,   65,  -20,  -20,  -20,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -20,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,   64,   64,   65,  -21,  -21,  -21,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -21,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   66,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,   67,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22
    },

    {
        5,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23,   64,   64,   65,  -23,  -23,  -23,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -23,   64,   64,   64,   68,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   69,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,  -24,   64,   64,   65,  -24,  -24,  -24,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -24,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   70,   64,   64,   71,   64,   64,   64,   64,
       72,   64,   64,   64,   64

    },

    {
        5,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,   64,   64,   65,  -25,  -25,  -25,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -25,   64,   64,   64,   64,   73,   64,   64,   64,
       74,   64,   64,   64,   64,   75,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,   64,   64,   65,  -26,  -26,  -26,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -26,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   76,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,   64,   64,   65,  -27,  -27,  -27,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -27,   64,   64,   64,   64,   64,   64,   64,   64,
       77,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,   64,   64,   65,  -28,  -28,  -28,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -28,   78,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,   64,   64,   65,  -29,  -29,  -29,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -29,   64,   64,   64,   64,   64,   79,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   80,   64,   64,   64

    },

    {
        5,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,   64,   64,   65,  -30,  -30,  -30,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -30,   81,   64,   64,   64,   82,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   83,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,   64,   64,   65,  -31,  -31,  -31,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -31,   64,   64,   64,   64,   84,   64,   64,   64,

       64,   64,   64,   64,   64,   85,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,   64,   64,   65,  -32,  -32,  -32,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -32,   64,   64,   86,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   87,   64,   64,   64,
       88,   64,   64,   89,   64
    },

    {
        5,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,   64,   64,   65,  -33,  -33,  -33,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -33,   64,   64,   64,   64,   64,   64,   64,   64,
       90,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,   64,   64,   65,  -34,  -34,  -34,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -34,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   91,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,   64,   64,   65,  -35,  -35,  -35,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -35,   92,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,

      -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36
    },

    {
        5,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,
      -37,  -37,  -37,  -37,  -37
    },

    {
        5,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,

      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38
    },

    {
        5,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,   93,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39

    },

    {
        5,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,   67,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40
    },

    {
        5,  -41,   41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,

      -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41
    },

    {
        5,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42
    },

    {
        5,   43,   43,  -43,  -43,   94,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   45,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43
    },

    {
        5,   95,   95,   95,   95,   96,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95

    },

    {
        5,   43,   43,  -45,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43
    },

    {
        5,   46,   46,  -46,  -46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46
    },

    {
        5,   47,   47,  -47,  -47,   47,   47,   47,   97,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   49,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47
    },

    {
        5,   98,   98,   98,   98,   98,   98,   98,   99,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98
    },

    {
        5,   47,   47,  -49,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47

    },

    {
        5,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,   54,   54,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50
    },

    {
        5,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,   57,  -51,   52,   52,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,   59,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,   59,  -51,  -51,  -51,

      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51
    },

    {
        5,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,   57,  -52,   52,   52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,   59,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,   59,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52
    },

    {
        5,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,

      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  100,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53
    },

    {
        5,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,   54,   54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  101,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  101,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54

    },

    {
        5,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55
    },

    {
        5,  102,  102,  -56,  -56,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    },

    {
        5,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  103,  103,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,   59,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,   59,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57
    },

    {
        5,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,   57,  -58,   58,   58,  -58,  -58,  -58,  -58,

      -58,  -58,  -58,  -58,   59,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,   59,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58
    },

    {
        5,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      104,  104,  -59,  -59,  105,  105,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,  -59,
      -59,  -59,  -59,  -59,  -59

    },

    {
        5,   60,   60,  -60,  -60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,  -60,   61,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60
    },

    {
        5,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,

      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61
    },

    {
        5,   62,   62,  -62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,  106,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62
    },

    {
        5,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  107,

      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,  -63,
      -63,  -63,  -63,  -63,  -63
    },

    {
        5,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,   64,   64,   65,  -64,  -64,  -64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  108,  -65,  -65,  -65,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  -65,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109
    },

    {
        5,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,   64,   64,   65,  -66,  -66,  -66,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -66,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,  110,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,
      -67,  -67,  -67,  -67,  -67
    },

    {
        5,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,   64,   64,   65,  -68,  -68,  -68,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -68,   64,   64,   64,  111,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,   64,   64,   65,  -69,  -69,  -69,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -69,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,  112,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,   64,   64,   65,  -70,  -70,  -70,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -70,  113,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,   64,   64,   65,  -71,  -71,  -71,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -71,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,  114,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,   64,   64,   65,  -72,  -72,  -72,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -72,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  115,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,   64,   64,   65,  -73,  -73,  -73,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -73,   64,   64,   64,   64,   64,  116,   64,   64,
       64,   64,  117,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,   64,   64,   65,  -74,  -74,  -74,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -74,   64,   64,  118,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  119,   64,
       64,   64,   64,   64,   64

    },

    {
        5,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,   64,   64,   65,  -75,  -75,  -75,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -75,   64,   64,  120,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,   64,   64,   65,  -76,  -76,  -76,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -76,   64,   64,   64,   64,   64,   64,   64,  121,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,   64,   64,   65,  -77,  -77,  -77,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -77,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  122,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,  -78,
      -78,  -78,  -78,  -78,   64,   64,   65,  -78,  -78,  -78,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -78,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  123,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,   64,   64,   65,  -79,  -79,  -79,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -79,   64,   64,   64,   64,   64,  124,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,   64,   64,   65,  -80,  -80,  -80,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -80,   64,   64,   64,   64,  125,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,   64,   64,   65,  -81,  -81,  -81,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -81,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  126,   64
    },

    {
        5,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
      -82,  -82,  -82,  -82,   64,   64,   65,  -82,  -82,  -82,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -82,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  127,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,   64,   64,   65,  -83,  -83,  -83,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -83,   64,   64,   64,   64,  128,   64,   64,   64,
       64,   64,   64,   64,   64,  129,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,   64,   64,   65,  -84,  -84,  -84,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -84,   64,   64,   64,   64,   64,  130,   64,   64,
       64,   64,  131,   64,   64,  132,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,   64,   64,   65,  -85,  -85,  -85,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -85,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  133,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,  -86,   64,   64,   65,  -86,  -86,  -86,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -86,  134,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,   64,   64,   65,  -87,  -87,  -87,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -87,   64,   64,   64,   64,  135,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,   64,   64,   65,  -88,  -88,  -88,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -88,   64,  136,   64,   64,   64,  137,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,   64,   64,   65,  -89,  -89,  -89,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -89,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  138,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,   64,   64,   65,  -90,  -90,  -90,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -90,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  139,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,   64,   64,   65,  -91,  -91,  -91,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -91,   64,   64,   64,   64,   64,   64,   64,   64,

      140,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,   64,   64,   65,  -92,  -92,  -92,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  -92,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  141,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,

      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93
    },

    {
        5,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94

    },

    {
        5,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95
    },

    {
        5,  142,  142,  142,  142,  143,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  144,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142
    },

    {
        5,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97
    },

    {
        5,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,

      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98
    },

    {
        5,  145,  145,  145,  145,  145,  145,  145,  146,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  147,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145

    },

    {
        5, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100,  148, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100
    },

    {
        5, -101, -101, -101, -101, -101, -101, -101, -101, -101,
      149,  149, -101, -101,  150,  150, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,

     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101
    },

    {
        5,  102,  102, -102, -102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    },

    {
        5, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103,  103,  103, -103, -103, -103, -103,

     -103, -103, -103, -103,   59, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103,   59, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103
    },

    {
        5, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104,  105,  105, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104

    },

    {
        5, -105, -105, -105, -105, -105, -105, -105, -105, -105,
     -105, -105, -105, -105,  105,  105, -105, -105, -105, -105,
     -105, -105, -105, -105, -105, -105, -105, -105, -105, -105,
     -105, -105, -105, -105, -105, -105, -105, -105, -105, -105,
     -105, -105, -105, -105, -105, -105, -105, -105, -105, -105,
     -105, -105, -105, -105, -105
    },

    {
        5, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,

     -106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106
    },

    {
        5,  151,  151, -107,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  152,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  153,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108, -108, -108, -108, -108,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154, -108,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154
    },

    {
        5, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109,  155,  155,  156, -109, -109, -109,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155, -109,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155

    },

    {
        5, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110,   64,   64,   65, -110, -110, -110,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -110,   64,   64,   64,   64,  157,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111,   64,   64,   65, -111, -111, -111,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -111,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -112, -112, -112, -112, -112, -112, -112, -112, -112,
     -112, -112, -112, -112,   64,   64,   65, -112, -112, -112,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -112,   64,   64,   64,   64,  158,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -113, -113, -113, -113, -113, -113, -113, -113, -113,
     -113, -113, -113, -113,   64,   64,   65, -113, -113, -113,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -113,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  159,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114,   64,   64,   65, -114, -114, -114,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -114,   64,   64,   64,   64,   64,  160,   64,   64,
       64,   64,   64,   64,  161,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115,   64,   64,   65, -115, -115, -115,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -115,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  162,
       64,   64,   64,   64,   64
    },

    {
        5, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116,   64,   64,   65, -116, -116, -116,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -116,  163,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -117, -117, -117, -117, -117, -117, -117, -117, -117,
     -117, -117, -117, -117,   64,   64,   65, -117, -117, -117,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -117,   64,   64,   64,   64,  164,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118,   64,   64,   65, -118, -118, -118,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -118,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  165,
       64,   64,   64,   64,   64
    },

    {
        5, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119,   64,   64,   65, -119, -119, -119,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -119,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,  166,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -120, -120, -120, -120, -120, -120, -120, -120, -120,
     -120, -120, -120, -120,   64,   64,   65, -120, -120, -120,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -120,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -121, -121, -121, -121, -121, -121, -121, -121, -121,
     -121, -121, -121, -121,   64,   64,   65, -121, -121, -121,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -121,   64,   64,   64,   64,  167,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122,   64,   64,   65, -122, -122, -122,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -122,   64,   64,   64,  168,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123,   64,   64,   65, -123, -123, -123,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -123,   64,   64,   64,   64,  169,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124,   64,   64,   65, -124, -124, -124,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -124,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  170,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125,   64,   64,   65, -125, -125, -125,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -125,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  171,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126,   64,   64,   65, -126, -126, -126,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -126,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,  172,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -127, -127, -127, -127, -127, -127, -127, -127, -127,
     -127, -127, -127, -127,   64,   64,   65, -127, -127, -127,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -127,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  173,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128,   64,   64,   65, -128, -128, -128,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -128,   64,   64,   64,   64,   64,  174,   64,   64,
       64,   64,   64,   64,   64,   64,  175,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -129, -129, -129, -129, -129, -129, -129, -129, -129,
     -129, -129, -129, -129,   64,   64,   65, -129, -129, -129,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -129,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,  176,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130,   64,   64,   65, -130, -130, -130,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -130,   64,   64,   64,   64,  177,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131,   64,   64,   65, -131, -131, -131,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -131,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,  178,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132,   64,   64,   65, -132, -132, -132,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -132,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  179,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133,   64,   64,   65, -133, -133, -133,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -133,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  180,
       64,   64,   64,   64,   64
    },

    {
        5, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134,   64,   64,   65, -134, -134, -134,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -134,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  181,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135,   64,   64,   65, -135, -135, -135,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -135,   64,   64,  182,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -136, -136, -136, -136, -136, -136, -136, -136, -136,
     -136, -136, -136, -136,   64,   64,   65, -136, -136, -136,
       64,   64,   64,   64,   64,   64,  183,   64,   64,   64,
       64, -136,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137,   64,   64,   65, -137, -137, -137,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -137,   64,   64,   64,   64,   64,  184,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -138, -138, -138, -138, -138, -138, -138, -138, -138,
     -138, -138, -138, -138,   64,   64,   65, -138, -138, -138,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -138,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  185,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -139, -139, -139, -139, -139, -139, -139, -139, -139,
     -139, -139, -139, -139,   64,   64,   65, -139, -139, -139,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -139,   64,   64,   64,   64,  186,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140,   64,   64,   65, -140, -140, -140,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -140,   64,   64,   64,   64,   64,  187,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -141, -141, -141, -141, -141, -141, -141, -141, -141,
     -141, -141, -141, -141,   64,   64,   65, -141, -141, -141,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -141,   64,   64,   64,   64,   64,   64,   64,   64,

      188,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  189,   64
    },

    {
        5,  142,  142,  142,  142,  143,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  144,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142
    },

    {
        5,  142,  142,  142,  142,  190,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142
    },

    {
        5,  142,  142,  142,  191,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142

    },

    {
        5,  145,  145,  145,  145,  145,  145,  145,  146,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  147,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145
    },

    {
        5,  145,  145,  145,  145,  145,  145,  145,  192,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145
    },

    {
        5,  145,  145,  145,  193,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145
    },

    {
        5, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,

     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148
    },

    {
        5, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149,  150,  150, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149

    },

    {
        5, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150,  150,  150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150
    },

    {
        5,  151,  151, -151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  152,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  153,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5,  151,  151, -152,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  194,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5,  151,  151, -153,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  195,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  153,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154,  196,  196,  197, -154, -154, -154,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196, -154,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196

    },

    {
        5, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155,  155,  155,  156, -155, -155, -155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155, -155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155
    },

    {
        5, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109, -156,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109
    },

    {
        5, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157,   64,   64,   65, -157, -157, -157,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -157,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158,   64,   64,   65, -158, -158, -158,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -158,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  198,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159,   64,   64,   65, -159, -159, -159,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -159,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  199,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160,   64,   64,   65, -160, -160, -160,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -160,   64,   64,   64,   64,   64,   64,   64,   64,
      200,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161,   64,   64,   65, -161, -161, -161,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -161,   64,   64,   64,   64,  201,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162,   64,   64,   65, -162, -162, -162,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -162,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  202,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163,   64,   64,   65, -163, -163, -163,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -163,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      203,   64,   64,   64,   64
    },

    {
        5, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164,   64,   64,   65, -164, -164, -164,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -164,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  204,
       64,   64,   64,   64,   64

    },

    {
        5, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165,   64,   64,   65, -165, -165, -165,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -165,   64,   64,   64,   64,   64,   64,   64,   64,
      205,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166,   64,   64,   65, -166, -166, -166,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -166,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,  206,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167,   64,   64,   65, -167, -167, -167,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -167,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  207,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168,   64,   64,   65, -168, -168, -168,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -168,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169,   64,   64,   65, -169, -169, -169,
       64,   64,  208,   64,   64,   64,   64,   64,   64,   64,
       64, -169,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170,   64,   64,   65, -170, -170, -170,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -170,   64,   64,   64,   64,  209,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171,   64,   64,   65, -171, -171, -171,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -171,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172,   64,   64,   65, -172, -172, -172,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -172,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  210,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173,   64,   64,   65, -173, -173, -173,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -173,   64,   64,   64,   64,   64,   64,   64,   64,
      211,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174,   64,   64,   65, -174, -174, -174,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -174,   64,   64,   64,   64,   64,   64,   64,   64,
      212,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175,   64,   64,   65, -175, -175, -175,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -175,   64,   64,   64,   64,  213,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176,   64,   64,   65, -176, -176, -176,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -176,   64,   64,   64,   64,  214,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -177, -177, -177, -177, -177, -177, -177, -177, -177,
     -177, -177, -177, -177,   64,   64,   65, -177, -177, -177,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -177,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  215,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178,   64,   64,   65, -178, -178, -178,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -178,   64,   64,  216,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179,   64,   64,   65, -179, -179, -179,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -179,   64,   64,   64,  217,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -180, -180, -180, -180, -180, -180, -180, -180, -180,
     -180, -180, -180, -180,   64,   64,   65, -180, -180, -180,
       64,   64,   64,   64,   64,   64,   64,   64,  218,   64,
       64, -180,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181,   64,   64,   65, -181, -181, -181,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -181,   64,   64,   64,   64,  219,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182,   64,   64,   65, -182, -182, -182,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -182,   64,   64,   64,   64,   64,   64,   64,   64,
      220,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183,   64,   64,   65, -183, -183, -183,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -183,  221,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -184, -184, -184, -184, -184, -184, -184, -184, -184,
     -184, -184, -184, -184,   64,   64,   65, -184, -184, -184,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -184,   64,   64,   64,   64,   64,   64,   64,   64,
      222,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185,   64,   64,   65, -185, -185, -185,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -185,   64,   64,   64,   64,  223,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186,   64,   64,   65, -186, -186, -186,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  224,
       64, -186,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -187, -187, -187, -187, -187, -187, -187, -187, -187,
     -187, -187, -187, -187,   64,   64,   65, -187, -187, -187,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -187,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  225,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188,   64,   64,   65, -188, -188, -188,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -188,  226,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189,   64,   64,   65, -189, -189, -189,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -189,   64,   64,   64,   64,   64,   64,   64,   64,
      227,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5,  142,  142,  142,  142,  228,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142
    },

    {
        5,  142,  142,  142,  142,  143,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  144,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142
    },

    {
        5,  145,  145,  145,  145,  145,  145,  145,  229,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145
    },

    {
        5,  145,  145,  145,  145,  145,  145,  145,  146,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  147,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145
    },

    {
        5,  151,  151, -194,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  230,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151

    },

    {
        5,  151,  151, -195,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  231,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5, -196, -196, -196, -196, -196, -196, -196, -196, -196,
     -196, -196, -196, -196,  196,  196,  197, -196, -196, -196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196, -196,  196,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196
    },

    {
        5, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197,  108, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197, -197, -197, -197, -197, -197,
     -197, -197, -197, -197, -197
    },

    {
        5, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198,   64,   64,   65, -198, -198, -198,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -198,   64,   64,   64,  232,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199,   64,   64,   65, -199, -199, -199,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -199,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200,   64,   64,   65, -200, -200, -200,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -200,   64,   64,   64,   64,   64,   64,  233,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201,   64,   64,   65, -201, -201, -201,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -201,   64,   64,  234,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202,   64,   64,   65, -202, -202, -202,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -202,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  235,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203,   64,   64,   65, -203, -203, -203,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -203,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  236,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204,   64,   64,   65, -204, -204, -204,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -204,   64,   64,   64,   64,  237,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205,   64,   64,   65, -205, -205, -205,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -205,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  238,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206,   64,   64,   65, -206, -206, -206,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -206,  239,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207,   64,   64,   65, -207, -207, -207,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -207,   64,   64,   64,   64,   64,   64,   64,   64,
      240,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208,   64,   64,   65, -208, -208, -208,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -208,   64,   64,   64,   64,   64,   64,   64,  241,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209,   64,   64,   65, -209, -209, -209,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -209,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  242,
       64,   64,   64,   64,   64

    },

    {
        5, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210,   64,   64,   65, -210, -210, -210,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -210,  243,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211,   64,   64,   65, -211, -211, -211,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -211,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,  244,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212,   64,   64,   65, -212, -212, -212,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -212,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  245,   64,   64
    },

    {
        5, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213,   64,   64,   65, -213, -213, -213,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -213,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  246,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214,   64,   64,   65, -214, -214, -214,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -214,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  247,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -215, -215, -215, -215, -215, -215, -215, -215, -215,
     -215, -215, -215, -215,   64,   64,   65, -215, -215, -215,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -215,   64,   64,   64,   64,  248,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216,   64,   64,   65, -216, -216, -216,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -216,  249,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -217, -217, -217, -217, -217, -217, -217, -217, -217,
     -217, -217, -217, -217,   64,   64,   65, -217, -217, -217,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -217,   64,   64,   64,   64,  250,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -218, -218, -218, -218, -218, -218, -218, -218, -218,
     -218, -218, -218, -218,   64,   64,   65, -218, -218, -218,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -218,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  251,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219,   64,   64,   65, -219, -219, -219,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -219,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220,   64,   64,   65, -220, -220, -220,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -220,  252,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -221, -221, -221, -221, -221, -221, -221, -221, -221,
     -221, -221, -221, -221,   64,   64,   65, -221, -221, -221,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -221,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  253,   64
    },

    {
        5, -222, -222, -222, -222, -222, -222, -222, -222, -222,
     -222, -222, -222, -222,   64,   64,   65, -222, -222, -222,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -222,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  254,   64,   64
    },

    {
        5, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223,   64,   64,   65, -223, -223, -223,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -223,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  255,
       64,   64,   64,   64,   64
    },

    {
        5, -224, -224, -224, -224, -224, -224, -224, -224, -224,
     -224, -224, -224, -224,   64,   64,   65, -224, -224, -224,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -224,  256,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -225, -225, -225, -225, -225, -225, -225, -225, -225,
     -225, -225, -225, -225,   64,   64,   65, -225, -225, -225,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -225,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  257,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226,   64,   64,   65, -226, -226, -226,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -226,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,  258,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -227, -227, -227, -227, -227, -227, -227, -227, -227,
     -227, -227, -227, -227,   64,   64,   65, -227, -227, -227,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -227,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  259,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,

     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228
    },

    {
        5, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229

    },

    {
        5, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230, -230, -230, -230, -230,  260,
     -230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230
    },

    {
        5,  151,  151, -231,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  261,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232,   64,   64,   65, -232, -232, -232,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -232,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -233, -233, -233, -233, -233, -233, -233, -233, -233,
     -233, -233, -233, -233,   64,   64,   65, -233, -233, -233,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -233,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234,   64,   64,   65, -234, -234, -234,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -234,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  262,
       64,   64,   64,   64,   64

    },

    {
        5, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235,   64,   64,   65, -235, -235, -235,
       64,   64,   64,  263,   64,   64,   64,   64,   64,   64,
       64, -235,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -236, -236, -236, -236, -236, -236, -236, -236, -236,
     -236, -236, -236, -236,   64,   64,   65, -236, -236, -236,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -236,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,  264,
       64,   64,   64,   64,   64
    },

    {
        5, -237, -237, -237, -237, -237, -237, -237, -237, -237,
     -237, -237, -237, -237,   64,   64,   65, -237, -237, -237,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -237,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238,   64,   64,   65, -238, -238, -238,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -238,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  265,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239,   64,   64,   65, -239, -239, -239,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -239,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  266,   64

    },

    {
        5, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240,   64,   64,   65, -240, -240, -240,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -240,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  267,
       64,   64,   64,   64,   64
    },

    {
        5, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241,   64,   64,   65, -241, -241, -241,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -241,   64,   64,   64,   64,   64,   64,   64,   64,

      268,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -242, -242, -242, -242, -242, -242, -242, -242, -242,
     -242, -242, -242, -242,   64,   64,   65, -242, -242, -242,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -242,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243,   64,   64,   65, -243, -243, -243,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -243,   64,   64,   64,  269,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244,   64,   64,   65, -244, -244, -244,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -244,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  270,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -245, -245, -245, -245, -245, -245, -245, -245, -245,
     -245, -245, -245, -245,   64,   64,   65, -245, -245, -245,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  271,
       64, -245,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246,   64,   64,   65, -246, -246, -246,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -246,   64,   64,   64,  272,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -247, -247, -247, -247, -247, -247, -247, -247, -247,
     -247, -247, -247, -247,   64,   64,   65, -247, -247, -247,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -247,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  273,
       64,   64,   64,   64,   64
    },

    {
        5, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248,   64,   64,   65, -248, -248, -248,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -248,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  274,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249,   64,   64,   65, -249, -249, -249,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -249,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  275,
       64,   64,   64,   64,   64

    },

    {
        5, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250,   64,   64,   65, -250, -250, -250,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -250,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  276,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251,   64,   64,   65, -251, -251, -251,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -251,   64,   64,   64,   64,   64,   64,   64,   64,

      277,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252,   64,   64,   65, -252, -252, -252,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -252,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  278,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -253, -253, -253, -253, -253, -253, -253, -253, -253,
     -253, -253, -253, -253,   64,   64,   65, -253, -253, -253,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -253,   64,   64,   64,   64,  279,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -254, -254, -254, -254, -254, -254, -254, -254, -254,
     -254, -254, -254, -254,   64,   64,   65, -254, -254, -254,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  280,
       64, -254,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -255, -255, -255, -255, -255, -255, -255, -255, -255,
     -255, -255, -255, -255,   64,   64,   65, -255, -255, -255,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -255,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  281,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256,   64,   64,   65, -256, -256, -256,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -256,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,  282,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -257, -257, -257, -257, -257, -257, -257, -257, -257,
     -257, -257, -257, -257,   64,   64,   65, -257, -257, -257,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -257,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  283,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258,   64,   64,   65, -258, -258, -258,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -258,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  284,
       64,   64,   64,   64,   64
    },

    {
        5, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259,   64,   64,   65, -259, -259, -259,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -259,   64,   64,   64,   64,   64,   64,  285,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260,  286,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260
    },

    {
        5,  151,  151, -261,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  287,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  153,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262,   64,   64,   65, -262, -262, -262,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -262,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263,   64,   64,   65, -263, -263, -263,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -263,  288,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264,   64,   64,   65, -264, -264, -264,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -264,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265,   64,   64,   65, -265, -265, -265,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -265,  289,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -266, -266, -266, -266, -266, -266, -266, -266, -266,
     -266, -266, -266, -266,   64,   64,   65, -266, -266, -266,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      290, -266,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -267, -267, -267, -267, -267, -267, -267, -267, -267,
     -267, -267, -267, -267,   64,   64,   65, -267, -267, -267,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -267,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  291,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268,   64,   64,   65, -268, -268, -268,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -268,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  292,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -269, -269, -269, -269, -269, -269, -269, -269, -269,
     -269, -269, -269, -269,   64,   64,   65, -269, -269, -269,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -269,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270,   64,   64,   65, -270, -270, -270,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -270,   64,   64,   64,   64,   64,   64,   64,   64,
      293,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271,   64,   64,   65, -271, -271, -271,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -271,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      294,   64,   64,   64,   64
    },

    {
        5, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272,   64,   64,   65, -272, -272, -272,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -272,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273,   64,   64,   65, -273, -273, -273,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -273,   64,   64,   64,   64,   64,   64,   64,   64,
      295,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274,   64,   64,   65, -274, -274, -274,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -274,   64,   64,  296,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275,   64,   64,   65, -275, -275, -275,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -275,   64,   64,   64,   64,  297,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276,   64,   64,   65, -276, -276, -276,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -276,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -277, -277, -277, -277, -277, -277, -277, -277, -277,
     -277, -277, -277, -277,   64,   64,   65, -277, -277, -277,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -277,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  298,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278,   64,   64,   65, -278, -278, -278,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -278,   64,   64,   64,   64,   64,   64,   64,   64,
      299,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279,   64,   64,   65, -279, -279, -279,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -279,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  300,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280,   64,   64,   65, -280, -280, -280,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -280,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      301,   64,   64,   64,   64
    },

    {
        5, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281,   64,   64,   65, -281, -281, -281,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -281,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  302,   64
    },

    {
        5, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282,   64,   64,   65, -282, -282, -282,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -282,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,  303,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283,   64,   64,   65, -283, -283, -283,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -283,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -284, -284, -284, -284, -284, -284, -284, -284, -284,
     -284, -284, -284, -284,   64,   64,   65, -284, -284, -284,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  304,
       64, -284,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  305,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285,   64,   64,   65, -285, -285, -285,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -285,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,

     -286, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286
    },

    {
        5,  151,  151, -287,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  306,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5, -288, -288, -288, -288, -288, -288, -288, -288, -288,
     -288, -288, -288, -288,   64,   64,   65, -288, -288, -288,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -288,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  307,
       64,   64,   64,   64,   64
    },

    {
        5, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289,   64,   64,   65, -289, -289, -289,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -289,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  308,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290,   64,   64,   65, -290, -290, -290,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -290,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  309,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291,   64,   64,   65, -291, -291, -291,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -291,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292,   64,   64,   65, -292, -292, -292,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -292,   64,   64,   64,  310,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293,   64,   64,   65, -293, -293, -293,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -293,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  311,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294,   64,   64,   65, -294, -294, -294,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -294,   64,  312,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295,   64,   64,   65, -295, -295, -295,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -295,   64,   64,   64,   64,  313,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296,   64,   64,   65, -296, -296, -296,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -296,   64,   64,   64,   64,  314,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -297, -297, -297, -297, -297, -297, -297, -297, -297,
     -297, -297, -297, -297,   64,   64,   65, -297, -297, -297,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -297,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  315,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298,   64,   64,   65, -298, -298, -298,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -298,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  316,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299,   64,   64,   65, -299, -299, -299,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -299,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  317

    },

    {
        5, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300,   64,   64,   65, -300, -300, -300,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -300,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  318,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301,   64,   64,   65, -301, -301, -301,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -301,   64,  319,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302,   64,   64,   65, -302, -302, -302,
      320,   64,   64,   64,   64,  321,   64,   64,   64,   64,
       64, -302,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303,   64,   64,   65, -303, -303, -303,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -303,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  322,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304,   64,   64,   65, -304, -304, -304,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -304,   64,   64,   64,   64,  323,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305,   64,   64,   65, -305, -305, -305,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -305,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5,  151,  151, -306,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  230,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151
    },

    {
        5, -307, -307, -307, -307, -307, -307, -307, -307, -307,
     -307, -307, -307, -307,   64,   64,   65, -307, -307, -307,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -307,  324,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308,   64,   64,   65, -308, -308, -308,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -308,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  325,   64
    },

    {
        5, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309,   64,   64,   65, -309, -309, -309,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -309,   64,   64,   64,   64,   64,   64,   64,   64,
      326,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310,   64,   64,   65, -310, -310, -310,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -310,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  327,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311,   64,   64,   65, -311, -311, -311,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -311,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,  328,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -312, -312, -312, -312, -312, -312, -312, -312, -312,
     -312, -312, -312, -312,   64,   64,   65, -312, -312, -312,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -312,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  329,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -313, -313, -313, -313, -313, -313, -313, -313, -313,
     -313, -313, -313, -313,   64,   64,   65, -313, -313, -313,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -313,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  330,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314,   64,   64,   65, -314, -314, -314,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -314,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  331,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315,   64,   64,   65, -315, -315, -315,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -315,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -316, -316, -316, -316, -316, -316, -316, -316, -316,
     -316, -316, -316, -316,   64,   64,   65, -316, -316, -316,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -316,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -317, -317, -317, -317, -317, -317, -317, -317, -317,
     -317, -317, -317, -317,   64,   64,   65, -317, -317, -317,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -317,   64,   64,   64,   64,  332,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -318, -318, -318, -318, -318, -318, -318, -318, -318,
     -318, -318, -318, -318,   64,   64,   65, -318, -318, -318,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -318,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319,   64,   64,   65, -319, -319, -319,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -319,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  333,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320,   64,   64,   65, -320, -320, -320,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -320,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  334,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321,   64,   64,   65, -321, -321, -321,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -321,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      335,   64,   64,   64,   64
    },

    {
        5, -322, -322, -322, -322, -322, -322, -322, -322, -322,
     -322, -322, -322, -322,   64,   64,   65, -322, -322, -322,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -322,   64,   64,   64,   64,  336,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -323, -323, -323, -323, -323, -323, -323, -323, -323,
     -323, -323, -323, -323,   64,   64,   65, -323, -323, -323,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -323,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  337,
       64,   64,   64,   64,   64
    },

    {
        5, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324,   64,   64,   65, -324, -324, -324,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -324,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325,   64,   64,   65, -325, -325, -325,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -325,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -326, -326, -326, -326, -326, -326, -326, -326, -326,
     -326, -326, -326, -326,   64,   64,   65, -326, -326, -326,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -326,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,  338,
       64,   64,   64,   64,   64
    },

    {
        5, -327, -327, -327, -327, -327, -327, -327, -327, -327,
     -327, -327, -327, -327,   64,   64,   65, -327, -327, -327,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -327,   64,   64,   64,   64,  339,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328,   64,   64,   65, -328, -328, -328,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -328,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329,   64,   64,   65, -329, -329, -329,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -329,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  340,
       64,   64,   64,   64,   64

    },

    {
        5, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330,   64,   64,   65, -330, -330, -330,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -330,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -331, -331, -331, -331, -331, -331, -331, -331, -331,
     -331, -331, -331, -331,   64,   64,   65, -331, -331, -331,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -331,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -332, -332, -332, -332, -332, -332, -332, -332, -332,
     -332, -332, -332, -332,   64,   64,   65, -332, -332, -332,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -332,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  341,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -333, -333, -333, -333, -333, -333, -333, -333, -333,
     -333, -333, -333, -333,   64,   64,   65, -333, -333, -333,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -333,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  342,
       64,   64,   64,   64,   64
    },

    {
        5, -334, -334, -334, -334, -334, -334, -334, -334, -334,
     -334, -334, -334, -334,   64,   64,   65, -334, -334, -334,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -334,   64,   64,   64,   64,   64,   64,  343,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335,   64,   64,   65, -335, -335, -335,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -335,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  344,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336,   64,   64,   65, -336, -336, -336,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -336,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,  345,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -337, -337, -337, -337, -337, -337, -337, -337, -337,
     -337, -337, -337, -337,   64,   64,   65, -337, -337, -337,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -337,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  346,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338,   64,   64,   65, -338, -338, -338,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -338,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -339, -339, -339, -339, -339, -339, -339, -339, -339,
     -339, -339, -339, -339,   64,   64,   65, -339, -339, -339,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -339,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  347,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340,   64,   64,   65, -340, -340, -340,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -340,   64,   64,   64,   64,   64,   64,   64,   64,
      348,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -341, -341, -341, -341, -341, -341, -341, -341, -341,
     -341, -341, -341, -341,   64,   64,   65, -341, -341, -341,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -341,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -342, -342, -342, -342, -342, -342, -342, -342, -342,
     -342, -342, -342, -342,   64,   64,   65, -342, -342, -342,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -342,   64,   64,   64,   64,   64,   64,   64,   64,
      349,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -343, -343, -343, -343, -343, -343, -343, -343, -343,
     -343, -343, -343, -343,   64,   64,   65, -343, -343, -343,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -343,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      350,   64,   64,   64,   64
    },

    {
        5, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344,   64,   64,   65, -344, -344, -344,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -344,   64,   64,  351,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345,   64,   64,   65, -345, -345, -345,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -345,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346,   64,   64,   65, -346, -346, -346,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -346,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -347, -347, -347, -347, -347, -347, -347, -347, -347,
     -347, -347, -347, -347,   64,   64,   65, -347, -347, -347,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -347,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348,   64,   64,   65, -348, -348, -348,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -348,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  352,
       64,   64,   64,   64,   64
    },

    {
        5, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349,   64,   64,   65, -349, -349, -349,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -349,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  353,
       64,   64,   64,   64,   64

    },

    {
        5, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350,   64,   64,   65, -350, -350, -350,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -350,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  354,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351,   64,   64,   65, -351, -351, -351,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -351,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,  355,
       64,   64,   64,   64,   64
    },

    {
        5, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352,   64,   64,   65, -352, -352, -352,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -352,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      356,   64,   64,   64,   64
    },

    {
        5, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353,   64,   64,   65, -353, -353, -353,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -353,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
      357,   64,   64,   64,   64
    },

    {
        5, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354,   64,   64,   65, -354, -354, -354,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -354,   64,   64,   64,   64,  358,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355,   64,   64,   65, -355, -355, -355,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -355,   64,   64,   64,   64,   64,   64,   64,   64,
      359,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356,   64,   64,   65, -356, -356, -356,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -356,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,  360,
       64,   64,   64,   64,   64
    },

    {
        5, -357, -357, -357, -357, -357, -357, -357, -357, -357,
     -357, -357, -357, -357,   64,   64,   65, -357, -357, -357,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -357,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  361,
       64,   64,   64,   64,   64
    },

    {
        5, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358,   64,   64,   65, -358, -358, -358,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -358,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  362,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359,   64,   64,   65, -359, -359, -359,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -359,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  363,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360,   64,   64,   65, -360, -360, -360,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -360,   64,   64,   64,   64,   64,   64,   64,   64,
      364,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361,   64,   64,   65, -361, -361, -361,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -361,   64,   64,   64,   64,   64,   64,   64,   64,

      365,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362,   64,   64,   65, -362, -362, -362,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -362,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  366,
       64,   64,   64,   64,   64
    },

    {
        5, -363, -363, -363, -363, -363, -363, -363, -363, -363,
     -363, -363, -363, -363,   64,   64,   65, -363, -363, -363,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -363,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  367,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364,   64,   64,   65, -364, -364, -364,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -364,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  368,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365,   64,   64,   65, -365, -365, -365,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -365,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  369,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366,   64,   64,   65, -366, -366, -366,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -366,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,  370,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -367, -367, -367, -367, -367, -367, -367, -367, -367,
     -367, -367, -367, -367,   64,   64,   65, -367, -367, -367,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -367,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -368, -368, -368, -368, -368, -368, -368, -368, -368,
     -368, -368, -368, -368,   64,   64,   65, -368, -368, -368,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -368,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  371,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -369, -369, -369, -369, -369, -369, -369, -369, -369,
     -369, -369, -369, -369,   64,   64,   65, -369, -369, -369,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -369,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,  372,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    {
        5, -370, -370, -370, -370, -370, -370, -370, -370, -370,
     -370, -370, -370, -370,   64,   64,   65, -370, -370, -370,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -370,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -371, -371, -371, -371, -371, -371, -371, -371, -371,
     -371, -371, -371, -371,   64,   64,   65, -371, -371, -371,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -371,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,  373,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -372, -372, -372, -372, -372, -372, -372, -372, -372,
     -372, -372, -372, -372,   64,   64,   65, -372, -372, -372,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -372,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  374,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -373, -373, -373, -373, -373, -373, -373, -373, -373,
     -373, -373, -373, -373,   64,   64,   65, -373, -373, -373,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -373,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64
    },

    {
        5, -374, -374, -374, -374, -374, -374, -374, -374, -374,
     -374, -374, -374, -374,   64,   64,   65, -374, -374, -374,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64, -374,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64

    },

    } ;

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[375] =
    {   0,
        0,    0,    0,    0,   70,   68,    1,    7,    7,   68,
        2,   67,   68,   67,   67,   68,   62,   68,   67,   49,
       49,   68,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,    5,    5,    5,    5,    5,
        1,    7,    0,    0,    0,    2,    0,    0,    0,    0,
       61,   63,    0,   65,    4,    3,   64,   62,    0,    0,
       52,    0,   53,   49,    0,   49,   68,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,    6,   56,   58,    0,   55,   57,    0,    0,

        0,    3,   64,    0,   64,   53,    0,    0,   51,   49,
        8,   49,   49,   49,   49,   16,   49,   49,   49,   20,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       34,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,    0,    0,    0,    0,    0,    0,   66,    0,   65,
        0,    0,    0,   50,   51,    0,   24,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   22,   49,   49,
       26,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,    0,
        0,    0,    0,    0,    0,   50,    0,   49,   10,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   37,   49,
       49,   49,   49,   49,   49,   49,   49,   60,   59,   54,
        0,    9,   11,   49,   13,   49,   17,   49,   49,   49,
       49,   25,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   54,
       54,   12,   49,   15,   49,   49,   49,   49,   27,   49,
       49,   30,   49,   49,   49,   35,   49,   49,   49,   49,
       49,   49,   44,   49,   48,   54,   54,   49,   49,   49,
       21,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   47,   54,   49,   49,   49,   49,
       49,   49,   49,   49,   33,   36,   49,   38,   49,   49,
       49,   49,   49,   14,   18,   49,   49,   28,   49,   31,
       32,   49,   49,   49,   49,   49,   45,   19,   49,   49,
       40,   49,   49,   49,   43,   46,   23,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   42,   49,   49,   41,
       49,   49,   29,   39
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    1,    7,    8,    7,
        7,    9,   10,    7,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    7,   17,
        7,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   21,   21,   21,   21,   26,   21,   27,   21,   28,
       21,   21,   29,   21,   30,   21,   21,   21,   21,   21,
        7,   31,    7,    1,   21,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   21,   41,   42,   43,   44,
       45,   46,   21,   47,   48,   49,   50,   51,   21,   52,
       53,   54,    7,    1,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pxr/usd/sdf/textFileFormat.ll"
#line 2 "pxr/usd/sdf/textFileFormat.ll"
//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

#include "pxr/pxr.h"
#include "pxr/base/arch/fileSystem.h"
#include "pxr/base/tf/errorMark.h"
#include "pxr/base/tf/stringUtils.h"
#include "pxr/usd/sdf/textParserContext.h"
#include "pxr/usd/sdf/parserHelpers.h"

// Token table from yacc file
#include "textFileFormat.tab.h"

#ifndef fileno
#define fileno(fd) ArchFileNo(fd)
#endif
#ifndef isatty
#define isatty(fd) ArchFileIsaTTY(fd)
#endif

using std::map;
using std::vector;

PXR_NAMESPACE_USING_DIRECTIVE

#define YYSTYPE Sdf_ParserHelpers::Value

// As a pure parser, we must define the following
#define YY_DECL int textFileFormatYylex(YYSTYPE *yylval_param, yyscan_t yyscanner)

// The context object will be used to store global state for the parser.
#define YY_EXTRA_TYPE Sdf_TextParserContext *

/* Configuration options for flex */
/* States */

#line 4111 "pxr/usd/sdf/textFileFormat.lex.cpp"

#define INITIAL 0
#define SLASHTERIX_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int textFileFormatYylex_init (yyscan_t* scanner);

int textFileFormatYylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int textFileFormatYylex_destroy (yyscan_t yyscanner );

int textFileFormatYyget_debug (yyscan_t yyscanner );

void textFileFormatYyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE textFileFormatYyget_extra (yyscan_t yyscanner );

void textFileFormatYyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *textFileFormatYyget_in (yyscan_t yyscanner );

void textFileFormatYyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *textFileFormatYyget_out (yyscan_t yyscanner );

void textFileFormatYyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t textFileFormatYyget_leng (yyscan_t yyscanner );

char *textFileFormatYyget_text (yyscan_t yyscanner );

int textFileFormatYyget_lineno (yyscan_t yyscanner );

void textFileFormatYyset_lineno (int line_number ,yyscan_t yyscanner );

int textFileFormatYyget_column  (yyscan_t yyscanner );

void textFileFormatYyset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * textFileFormatYyget_lval (yyscan_t yyscanner );

void textFileFormatYyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int textFileFormatYywrap (yyscan_t yyscanner );
#else
extern int textFileFormatYywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int textFileFormatYylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int textFileFormatYylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			textFileFormatYyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				textFileFormatYy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		textFileFormatYy_load_buffer_state(yyscanner );
		}

	{
#line 67 "pxr/usd/sdf/textFileFormat.ll"


    /* skip over whitespace and comments */
    /* handle the first line # comment specially, since it contains the
       magic token */
#line 4382 "pxr/usd/sdf/textFileFormat.lex.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			{
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}

			++yy_cp;
			}

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 72 "pxr/usd/sdf/textFileFormat.ll"
{}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 73 "pxr/usd/sdf/textFileFormat.ll"
{
        if (yyextra->sdfLineNo == 1) {
            (*yylval_param) = std::string(yytext, yyleng);
            return TOK_MAGIC;
        }
    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 79 "pxr/usd/sdf/textFileFormat.ll"
{}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 80 "pxr/usd/sdf/textFileFormat.ll"
BEGIN SLASHTERIX_COMMENT ;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 81 "pxr/usd/sdf/textFileFormat.ll"
;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 82 "pxr/usd/sdf/textFileFormat.ll"
BEGIN INITIAL ;
	YY_BREAK
/* newline is returned as TOK_NL
     * Note that newlines embedded in quoted strings and tuples are counted
     * as part of the token and do NOT emit a separate TOK_NL.
     */
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 88 "pxr/usd/sdf/textFileFormat.ll"
{
        yyextra->sdfLineNo++;
        return TOK_NL;
    }
	YY_BREAK
/* literal keywords.  we return the yytext so that the yacc grammar
       can make use of it. */
case 8:
YY_RULE_SETUP
#line 95 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_ADD; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 96 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_APPEND; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 97 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CLASS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 98 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CONFIG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 99 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CONNECT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 100 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CUSTOM; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 101 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CUSTOMDATA; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 102 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DEFAULT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 103 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DEF; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 104 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DELETE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 105 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DICTIONARY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 106 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DISPLAYUNIT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 107 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DOC; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 108 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_INHERITS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 109 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_KIND; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 110 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_NAMECHILDREN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 111 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_NONE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 112 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_OFFSET; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 113 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_OVER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 114 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PAYLOAD; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 115 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PERMISSION; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 116 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PREFIX_SUBSTITUTIONS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 117 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PREPEND; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 118 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PROPERTIES; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 119 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_REFERENCES; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 120 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_RELOCATES; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 121 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_REL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 122 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_REORDER; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 123 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_ROOTPRIMS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 124 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SCALE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 125 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SUBLAYERS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 126 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SUFFIX_SUBSTITUTIONS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 127 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SPECIALIZES; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 128 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SYMMETRYARGUMENTS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 129 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SYMMETRYFUNCTION; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 130 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_TIME_SAMPLES; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 131 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_UNIFORM; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 132 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_VARIANTSET; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 133 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_VARIANTSETS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 134 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_VARIANTS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 135 "pxr/usd/sdf/textFileFormat.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_VARYING; }
	YY_BREAK
/* unquoted C/Python identifier */
case 49:
YY_RULE_SETUP
#line 138 "pxr/usd/sdf/textFileFormat.ll"
{
        (*yylval_param) = std::string(yytext, yyleng);
        return TOK_IDENTIFIER;
    }
	YY_BREAK
/* unquoted C++ namespaced identifier -- see bug 10775 */
case 50:
YY_RULE_SETUP
#line 144 "pxr/usd/sdf/textFileFormat.ll"
{
        (*yylval_param) = std::string(yytext, yyleng);
        return TOK_CXX_NAMESPACED_IDENTIFIER;
    }
	YY_BREAK
/* unquoted namespaced identifier.  matches any number of colon
     * delimited C/Python identifiers */
case 51:
YY_RULE_SETUP
#line 151 "pxr/usd/sdf/textFileFormat.ll"
{
        (*yylval_param) = std::string(yytext, yyleng);
        return TOK_NAMESPACED_IDENTIFIER;
    }
	YY_BREAK
/* scene paths */
case 52:
YY_RULE_SETUP
#line 157 "pxr/usd/sdf/textFileFormat.ll"
{
        (*yylval_param) = Sdf_EvalQuotedString(yytext, yyleng, 1);
        return TOK_PATHREF;
    }
	YY_BREAK
/* Single '@'-delimited asset references */
case 53:
YY_RULE_SETUP
#line 163 "pxr/usd/sdf/textFileFormat.ll"
{
        TfErrorMark m;
        (*yylval_param) = 
            Sdf_EvalAssetPath(yytext, yyleng, /* tripleDelimited = */ false);
        return m.IsClean() ? TOK_ASSETREF : TOK_SYNTAX_ERROR;
    }
	YY_BREAK
/* Triple '@'-delimited asset references. */
case 54:
YY_RULE_SETUP
#line 171 "pxr/usd/sdf/textFileFormat.ll"
{
        TfErrorMark m;
        (*yylval_param) = 
            Sdf_EvalAssetPath(yytext, yyleng, /* tripleDelimited = */ true);
        return m.IsClean() ? TOK_ASSETREF : TOK_SYNTAX_ERROR;
    }
	YY_BREAK
/* Singly quoted, single line strings with escapes.
       Note: we handle empty singly quoted strings below, to disambiguate
       them from the beginning of triply-quoted strings.
       Ex: "Foo \"foo\"" */
case 55:
#line 183 "pxr/usd/sdf/textFileFormat.ll"
case 56:
YY_RULE_SETUP
#line 183 "pxr/usd/sdf/textFileFormat.ll"
{  /* " //<- unfreak out coloring code */
        (*yylval_param) = Sdf_EvalQuotedString(yytext, yyleng, 1);
        return TOK_STRING;
    }
	YY_BREAK
/* Empty singly quoted strings that aren't the beginning of
       a triply-quoted string. */
case 57:
/* rule 57 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 190 "pxr/usd/sdf/textFileFormat.ll"
{  /* ' // <- keep syntax coloring from freaking out */
        (*yylval_param) = std::string();
        return TOK_STRING;
    }
	YY_BREAK
case 58:
/* rule 58 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 194 "pxr/usd/sdf/textFileFormat.ll"
{
        (*yylval_param) = std::string();
        return TOK_STRING;
    }
	YY_BREAK
/* Triply quoted, multi-line strings with escapes.
       Ex: """A\n\"B\"\nC""" */
case 59:
/* rule 59 can match eol */
#line 202 "pxr/usd/sdf/textFileFormat.ll"
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 202 "pxr/usd/sdf/textFileFormat.ll"
{  /* " //<- unfreak out coloring code */

        unsigned int numlines = 0;
        (*yylval_param) = Sdf_EvalQuotedString(yytext, yyleng, 3, &numlines);
        yyextra->sdfLineNo += numlines;
        return TOK_STRING;
    }
	YY_BREAK
/* Super special case for negative 0.  We have to store this as a double to
     * preserve the sign.  There is no negative zero integral value, and we
     * don't know at this point what the final stored type will be. */
case 61:
YY_RULE_SETUP
#line 213 "pxr/usd/sdf/textFileFormat.ll"
{
        (*yylval_param) = double(-0.0);
        return TOK_NUMBER;
   }
	YY_BREAK
/* Positive integers: store as uint64_t if in range, otherwise double. */
case 62:
YY_RULE_SETUP
#line 219 "pxr/usd/sdf/textFileFormat.ll"
{
        bool outOfRange = false;
        (*yylval_param) = TfStringToUInt64(yytext, &outOfRange);
        if (outOfRange) {
           TF_WARN("Integer literal '%s' on line %d%s%s out of range, parsing "
                   "as double.  Consider exponential notation for large "
                   "floating point values.", yytext, yyextra->sdfLineNo,
                   yyextra->fileContext.empty() ? "" : " in file ",
                   yyextra->fileContext.empty() ? "" :
                   yyextra->fileContext.c_str());
           (*yylval_param) = TfStringToDouble(yytext);
        }
        return TOK_NUMBER;
    }
	YY_BREAK
/* Negative integers: store as long. */
case 63:
YY_RULE_SETUP
#line 235 "pxr/usd/sdf/textFileFormat.ll"
{
        bool outOfRange = false;
        (*yylval_param) = TfStringToInt64(yytext, &outOfRange);
        if (outOfRange) {
           TF_WARN("Integer literal '%s' on line %d%s%s out of range, parsing "
                   "as double.  Consider exponential notation for large "
                   "floating point values.", yytext, yyextra->sdfLineNo,
                   yyextra->fileContext.empty() ? "" : " in file ",
                   yyextra->fileContext.empty() ? "" :
                   yyextra->fileContext.c_str());
           (*yylval_param) = TfStringToDouble(yytext);
        }
        return TOK_NUMBER;
    }
	YY_BREAK
/* Numbers with decimal places or exponents: store as double. */
case 64:
#line 252 "pxr/usd/sdf/textFileFormat.ll"
case 65:
YY_RULE_SETUP
#line 252 "pxr/usd/sdf/textFileFormat.ll"
{
        (*yylval_param) = TfStringToDouble(yytext);
        return TOK_NUMBER;
    }
	YY_BREAK
/* regexps for negative infinity.  we don't handle inf and nan here
     * because they look like identifiers.  we handle them in parser where
     * we have the additional context we need to distinguish them from
     * identifiers. */
case 66:
YY_RULE_SETUP
#line 261 "pxr/usd/sdf/textFileFormat.ll"
{
        (*yylval_param) = -std::numeric_limits<double>::infinity();
        return TOK_NUMBER;
    }
	YY_BREAK
/* various single-character punctuation.  return the character
     * itself as the token.
     */
case 67:
YY_RULE_SETUP
#line 269 "pxr/usd/sdf/textFileFormat.ll"
{
        return yytext[0];
    }
	YY_BREAK
/* the default rule is to ECHO any unmatched character.  by returning a
     * token that the parser does not know how to handle these become syntax
     * errors instead.
     */
case 68:
YY_RULE_SETUP
#line 277 "pxr/usd/sdf/textFileFormat.ll"
{
        return TOK_SYNTAX_ERROR;
    }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 281 "pxr/usd/sdf/textFileFormat.ll"
ECHO;
	YY_BREAK
#line 4899 "pxr/usd/sdf/textFileFormat.lex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SLASHTERIX_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * textFileFormatYylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( textFileFormatYywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of textFileFormatYylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					textFileFormatYyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			textFileFormatYyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) textFileFormatYyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	yy_current_state = yy_nxt[yy_current_state][1];
	yy_is_jam = (yy_current_state <= 0);

	if ( ! yy_is_jam )
		{
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					textFileFormatYyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( textFileFormatYywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void textFileFormatYyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        textFileFormatYyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            textFileFormatYy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	textFileFormatYy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	textFileFormatYy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void textFileFormatYy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		textFileFormatYypop_buffer_state();
	 *		textFileFormatYypush_buffer_state(new_buffer);
     */
	textFileFormatYyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	textFileFormatYy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (textFileFormatYywrap()) processing, but the only time this flag
	 * is looked at is after textFileFormatYywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void textFileFormatYy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE textFileFormatYy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) textFileFormatYyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in textFileFormatYy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) textFileFormatYyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in textFileFormatYy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	textFileFormatYy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with textFileFormatYy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void textFileFormatYy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		textFileFormatYyfree((void *) b->yy_ch_buf ,yyscanner );

	textFileFormatYyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a textFileFormatYyrestart() or at EOF.
 */
    static void textFileFormatYy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	textFileFormatYy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then textFileFormatYy_init_buffer was _probably_
     * called from textFileFormatYyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void textFileFormatYy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		textFileFormatYy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void textFileFormatYypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	textFileFormatYyensure_buffer_stack(yyscanner);

	/* This block is copied from textFileFormatYy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from textFileFormatYy_switch_to_buffer. */
	textFileFormatYy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void textFileFormatYypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	textFileFormatYy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		textFileFormatYy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void textFileFormatYyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)textFileFormatYyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in textFileFormatYyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)textFileFormatYyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in textFileFormatYyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE textFileFormatYy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) textFileFormatYyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in textFileFormatYy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	textFileFormatYy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to textFileFormatYylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       textFileFormatYy_scan_bytes() instead.
 */
YY_BUFFER_STATE textFileFormatYy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return textFileFormatYy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to textFileFormatYylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE textFileFormatYy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) textFileFormatYyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in textFileFormatYy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = textFileFormatYy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in textFileFormatYy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE textFileFormatYyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int textFileFormatYyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int textFileFormatYyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *textFileFormatYyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *textFileFormatYyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t textFileFormatYyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *textFileFormatYyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void textFileFormatYyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void textFileFormatYyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "textFileFormatYyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void textFileFormatYyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "textFileFormatYyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see textFileFormatYy_switch_to_buffer
 */
void textFileFormatYyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void textFileFormatYyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int textFileFormatYyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void textFileFormatYyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * textFileFormatYyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void textFileFormatYyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* textFileFormatYylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int textFileFormatYylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) textFileFormatYyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* textFileFormatYylex_init_extra has the same functionality as textFileFormatYylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to textFileFormatYyalloc in
 * the yyextra field.
 */

int textFileFormatYylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    textFileFormatYyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) textFileFormatYyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    textFileFormatYyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from textFileFormatYylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * textFileFormatYylex_init()
     */
    return 0;
}

/* textFileFormatYylex_destroy is for both reentrant and non-reentrant scanners. */
int textFileFormatYylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		textFileFormatYy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		textFileFormatYypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	textFileFormatYyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        textFileFormatYyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * textFileFormatYylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    textFileFormatYyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *textFileFormatYyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *textFileFormatYyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void textFileFormatYyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see textFileFormatYyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 281 "pxr/usd/sdf/textFileFormat.ll"



