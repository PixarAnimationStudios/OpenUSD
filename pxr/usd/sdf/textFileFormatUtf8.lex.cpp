#line 1 "textFileFormatUtf8.lex.cpp"

#line 3 "textFileFormatUtf8.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define textFileFormatUtf8Yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer textFileFormatUtf8Yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define textFileFormatUtf8Yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer textFileFormatUtf8Yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define textFileFormatUtf8Yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer textFileFormatUtf8Yy_scan_buffer
#endif

#ifdef yy_scan_string
#define textFileFormatUtf8Yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string textFileFormatUtf8Yy_scan_string
#endif

#ifdef yy_scan_bytes
#define textFileFormatUtf8Yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes textFileFormatUtf8Yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define textFileFormatUtf8Yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer textFileFormatUtf8Yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define textFileFormatUtf8Yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer textFileFormatUtf8Yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define textFileFormatUtf8Yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state textFileFormatUtf8Yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define textFileFormatUtf8Yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer textFileFormatUtf8Yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define textFileFormatUtf8Yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state textFileFormatUtf8Yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define textFileFormatUtf8Yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state textFileFormatUtf8Yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define textFileFormatUtf8Yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack textFileFormatUtf8Yyensure_buffer_stack
#endif

#ifdef yylex
#define textFileFormatUtf8Yylex_ALREADY_DEFINED
#else
#define yylex textFileFormatUtf8Yylex
#endif

#ifdef yyrestart
#define textFileFormatUtf8Yyrestart_ALREADY_DEFINED
#else
#define yyrestart textFileFormatUtf8Yyrestart
#endif

#ifdef yylex_init
#define textFileFormatUtf8Yylex_init_ALREADY_DEFINED
#else
#define yylex_init textFileFormatUtf8Yylex_init
#endif

#ifdef yylex_init_extra
#define textFileFormatUtf8Yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra textFileFormatUtf8Yylex_init_extra
#endif

#ifdef yylex_destroy
#define textFileFormatUtf8Yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy textFileFormatUtf8Yylex_destroy
#endif

#ifdef yyget_debug
#define textFileFormatUtf8Yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug textFileFormatUtf8Yyget_debug
#endif

#ifdef yyset_debug
#define textFileFormatUtf8Yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug textFileFormatUtf8Yyset_debug
#endif

#ifdef yyget_extra
#define textFileFormatUtf8Yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra textFileFormatUtf8Yyget_extra
#endif

#ifdef yyset_extra
#define textFileFormatUtf8Yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra textFileFormatUtf8Yyset_extra
#endif

#ifdef yyget_in
#define textFileFormatUtf8Yyget_in_ALREADY_DEFINED
#else
#define yyget_in textFileFormatUtf8Yyget_in
#endif

#ifdef yyset_in
#define textFileFormatUtf8Yyset_in_ALREADY_DEFINED
#else
#define yyset_in textFileFormatUtf8Yyset_in
#endif

#ifdef yyget_out
#define textFileFormatUtf8Yyget_out_ALREADY_DEFINED
#else
#define yyget_out textFileFormatUtf8Yyget_out
#endif

#ifdef yyset_out
#define textFileFormatUtf8Yyset_out_ALREADY_DEFINED
#else
#define yyset_out textFileFormatUtf8Yyset_out
#endif

#ifdef yyget_leng
#define textFileFormatUtf8Yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng textFileFormatUtf8Yyget_leng
#endif

#ifdef yyget_text
#define textFileFormatUtf8Yyget_text_ALREADY_DEFINED
#else
#define yyget_text textFileFormatUtf8Yyget_text
#endif

#ifdef yyget_lineno
#define textFileFormatUtf8Yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno textFileFormatUtf8Yyget_lineno
#endif

#ifdef yyset_lineno
#define textFileFormatUtf8Yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno textFileFormatUtf8Yyset_lineno
#endif

#ifdef yyget_column
#define textFileFormatUtf8Yyget_column_ALREADY_DEFINED
#else
#define yyget_column textFileFormatUtf8Yyget_column
#endif

#ifdef yyset_column
#define textFileFormatUtf8Yyset_column_ALREADY_DEFINED
#else
#define yyset_column textFileFormatUtf8Yyset_column
#endif

#ifdef yywrap
#define textFileFormatUtf8Yywrap_ALREADY_DEFINED
#else
#define yywrap textFileFormatUtf8Yywrap
#endif

#ifdef yyget_lval
#define textFileFormatUtf8Yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval textFileFormatUtf8Yyget_lval
#endif

#ifdef yyset_lval
#define textFileFormatUtf8Yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval textFileFormatUtf8Yyset_lval
#endif

#ifdef yyalloc
#define textFileFormatUtf8Yyalloc_ALREADY_DEFINED
#else
#define yyalloc textFileFormatUtf8Yyalloc
#endif

#ifdef yyrealloc
#define textFileFormatUtf8Yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc textFileFormatUtf8Yyrealloc
#endif

#ifdef yyfree
#define textFileFormatUtf8Yyfree_ALREADY_DEFINED
#else
#define yyfree textFileFormatUtf8Yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define textFileFormatUtf8Yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[432] =
    {   0,
        0,    0,    0,    0,   70,   68,    1,    7,    7,   68,
        2,   67,   68,   67,   67,   68,   62,   68,   67,   49,
       49,   68,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   68,   68,   68,    5,    5,
        5,    5,    5,    1,    7,    0,    0,    0,    2,    0,
        0,    0,    0,   61,   63,    0,   65,    4,    3,   64,
       62,    0,    0,   52,    0,   53,   49,    0,    0,    0,
        0,   49,   68,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,    0,

        0,    6,   56,   58,    0,    0,   56,    0,   55,   57,
        0,    0,   55,    0,    0,    0,    3,   64,    0,   64,
       53,    0,    0,   51,    0,    0,    0,   49,    0,    0,
       49,    8,   49,   49,   49,   49,   16,   49,   49,   49,
       20,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   34,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,    0,    0,    0,    0,    0,    0,    0,   66,
        0,   65,    0,    0,    0,   50,    0,    0,    0,   51,
        0,    0,    0,    0,   51,    0,    0,    0,   24,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   22,

       49,   49,   26,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   50,    0,    0,    0,    0,   50,    0,    0,   51,
        0,    0,    0,   49,   10,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   37,   49,   49,   49,   49,   49,
       49,   49,   49,   60,    0,   59,    0,   54,    0,   50,
        0,    0,    0,    0,    9,   11,   49,   13,   49,   17,
       49,   49,   49,   49,   25,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   60,   59,   54,   54,    0,   12,   49,   15,
       49,   49,   49,   49,   27,   49,   49,   30,   49,   49,
       49,   35,   49,   49,   49,   49,   49,   49,   44,   49,
       48,   54,   54,   49,   49,   49,   21,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       47,   54,   49,   49,   49,   49,   49,   49,   49,   49,
       33,   36,   49,   38,   49,   49,   49,   49,   49,   14,
       18,   49,   49,   28,   49,   31,   32,   49,   49,   49,
       49,   49,   45,   19,   49,   49,   40,   49,   49,   49,

       43,   46,   23,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   42,   49,   49,   41,   49,   49,   29,   39,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    1,    7,    8,    7,
        7,    9,   10,    7,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    7,   17,
        7,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   21,   21,   21,   21,   26,   21,   27,   21,   28,
       21,   21,   29,   21,   30,   21,   21,   21,   21,   21,
        7,   31,    7,    1,   32,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   42,   49,   50,   51,   52,   53,   42,   54,
       55,   56,    7,    1,    7,    1,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,    1,    1,   58,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   60,
       60,   60,   60,   60,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[61] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    4,    5,    6,    1,    1,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1,    7,    7,    7
    } ;

static const flex_int16_t yy_base[453] =
    {   0,
        0,    0,   58,   60,  717, 2075,  712, 2075,  710,   61,
        0, 2075,   57,   56,   58,   65,   69,  689,  681,   59,
       63,  647,   66,   83,   91,   87,   95,  104,  118,  124,
      128,  144,  150,  154,  164,  624,  612,  611, 2075, 2075,
     2075,  650,  615,  658, 2075,   81,  649,  100,    0,   69,
      640,  164,   80,  203,  214,  601,  206, 2075,    0,  217,
      221,  179,  626, 2075,  616,  611,  189,  203,  558,  556,
      555,  209, 2075,  221,  218,  226,  236,  240,  249,  254,
      257,  281,  272,  275,  267,  285,  294,  307,  313,  330,
      322,  303,  339,  362,  348,  359,  343,  367,  354,  539,

      515, 2075, 2075, 2075,   82,   85,  143,  154, 2075, 2075,
       77,  121,  208,  320,  518,  418,    0,  416,  192,  257,
     2075,  150,  327,  376,  475,  470,  467,  379,  465,  438,
      407,  389,  425,  429,  434,  439,  442,  445,  455,  460,
      452,  470,  480,  505,  475,  501,  493,  510,  528,  525,
      520,  542,  532,  546,  551,  558,  582,  561,  578,  566,
      591,  598,  424,  306,  469,  540,  438,  465,  624, 2075,
      260,  288,  360,  451,  423,  606,  407,  406,  403,  612,
      615,  402,  400,  399,  618,  386,  367,  358,  627,  636,
      630,  643,  646,  651,  663,  675,  683,  692,  696,  700,

      703,  711,  714,  721,  724,  737,  730,  748,  760,  770,
      741,  775,  778,  782,  788,  798,  794,  816,  808,  811,
      843,  406,  446,  447,  544,  402,  515,  523,  689,  390,
      375,  827,  342,  300,  291,  290,  833,  285,  249,  846,
      207,  203,  196,  861,  849,  856,  864,  867,  873,  897,
      882,  878,  894,  923,  914,  927,  930,  942,  933,  945,
      960,  951,  979,  982,  948,  996, 1005,  999, 1010, 1014,
     1017, 1032, 1035, 2075,  245, 2075,  238,  225,  192, 1027,
      144,  141,  110,   82, 1046, 1051, 1063, 1066, 1080, 1083,
     1086, 1092, 1097, 1112, 1100, 1118, 1133, 1104, 1145, 1149,

     1152, 1163, 1157, 1172, 1180, 1183, 1168, 1186, 1202, 1209,
     1213, 1217,  110,  101,   82,  614,   41, 1220, 1232, 1235,
     1241, 1254, 1247, 1265, 1269, 1280, 1292, 1272, 1295, 1287,
     1300, 1303, 1319, 1325, 1332, 1341, 1310, 1355, 1351, 1358,
     1364, 2075,   77, 1370, 1378, 1373, 1381, 1389, 1396, 1386,
     1426, 1434, 1410, 1437, 1418, 1441, 1445, 1482, 1464, 1451,
     1456,   61, 1473, 1496, 1502, 1509, 1513, 1520, 1531, 1534,
     1505, 1528, 1537, 1541, 1559, 1566, 1569, 1586, 1582, 1589,
     1592, 1604, 1598, 1614, 1618, 1621, 1627, 1638, 1643, 1650,
     1654, 1666, 1677, 1659, 1674, 1688, 1683, 1699, 1712, 1695,

     1691, 1707, 1715, 1728, 1740, 1723, 1744, 1753, 1762, 1769,
     1774, 1780, 1785, 1791, 1794, 1801, 1807, 1819, 1830, 1839,
     1846, 1814, 1842, 1864, 1867, 1859, 1871, 1878, 1875, 1887,
     2075, 1947, 1954, 1961, 1968, 1975, 1982, 1986, 1993, 2000,
     2007, 2014, 2021, 2024, 2031, 2038, 2045,   69, 2049, 2056,
     2063, 2067
    } ;

static const flex_int16_t yy_def[453] =
    {   0,
      431,    1,  432,  432,  431,  431,  431,  431,  431,  433,
      434,  431,  435,  431,  431,  431,  431,  436,  437,  438,
      438,  431,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  433,  439,  440,  434,  435,
      441,  442,  431,  431,  431,  431,  431,  431,  443,  431,
      431,  431,  436,  431,  437,  431,  438,  444,  431,  431,
      431,  438,  431,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  431,

      431,  431,  431,  431,  445,  433,  433,  440,  431,  431,
      446,  435,  435,  442,  431,  431,  443,  431,  431,  431,
      431,  447,  448,  449,  431,  431,  431,  438,  431,  431,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  431,  445,  445,  450,  446,  446,  451,  431,
      431,  431,  447,  447,  447,  452,  431,  431,  431,  449,
      444,  431,  431,  431,  449,  431,  431,  431,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  445,  445,  450,  450,  446,  446,  451,  451,  447,
      447,  452,  431,  431,  431,  431,  452,  431,  431,  449,
      431,  431,  431,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  431,  445,  431,  446,  431,  447,  452,
      431,  431,  431,  431,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  445,  446,  431,  447,  431,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  431,  447,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  447,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
        0,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431
    } ;

static const flex_int16_t yy_nxt[2136] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,    6,    6,
       14,   15,   16,   17,   17,   12,   18,    6,   19,   20,
       20,   20,   20,   20,   20,   20,   21,   20,   20,   20,
       22,   20,   23,   20,   24,   25,   20,   20,   20,   20,
       26,   20,   27,   20,   20,   28,   29,   30,   31,   32,
       33,   34,   35,   20,   20,   20,    6,   36,   37,   38,
       40,   41,   40,   41,   51,   47,   42,   53,   42,   54,
       55,   57,   57,   58,   68,  176,  109,   59,   68,  278,
       60,   68,   61,   61,  168,  103,  165,   52,   43,  103,
       43,   48,   62,   57,   57,  362,   56,  280,   68,   52,

      342,   74,   68,   46,  107,   62,   68,  169,  276,   72,
       68,   48,  166,   75,  274,   48,   69,   70,   71,   68,
       69,   70,   71,   69,   70,   71,   76,   79,  109,   77,
      108,   80,   82,   68,   78,   83,   84,   81,  240,   68,
       69,   70,   71,   68,   69,   70,   71,  103,   69,   70,
       71,   52,   69,   70,   71,   85,   87,   46,  107,   68,
       88,   69,   70,   71,   90,   68,  237,   50,  174,   68,
       86,  113,   89,   48,   91,   69,   70,   71,   92,   68,
      175,   69,   70,   71,  108,   69,   70,   71,  119,  119,
       96,   93,  120,  120,  114,   94,   98,  317,   95,   97,

      280,   69,   70,   71,   68,  120,  120,   69,   70,   71,
      316,   69,   70,   71,   60,  109,   55,   55,  123,   57,
       57,   69,   70,   71,   68,   60,   62,   55,   55,  116,
      118,  118,   60,   68,   61,   61,   68,   62,   52,   62,
       62,   68,  116,  315,   62,  314,   69,   70,   71,  313,
       62,   68,  185,   62,  131,   68,  132,   62,  134,  284,
      125,  126,  127,  240,   68,  133,   69,   70,   71,   68,
      120,  120,   68,  172,  172,   69,   70,   71,   69,   70,
       71,  135,   68,   69,   70,   71,  137,   68,  139,  136,
       68,  141,  138,   69,   70,   71,   68,   69,   70,   71,

       68,  172,  172,  140,  145,  283,   69,   70,   71,   68,
      165,   69,   70,   71,   69,   70,   71,  143,   68,  144,
      142,  146,   68,   50,   69,   70,   71,  113,   68,   69,
       70,   71,   69,   70,   71,  155,  166,   68,   69,   70,
       71,  237,   69,   70,   71,   68,  282,  281,  147,  149,
      114,   69,   70,   71,   68,  148,  280,  123,   68,  150,
       69,   70,   71,   68,   69,   70,   71,  151,  154,   68,
       69,   70,   71,  152,   68,  156,  153,   68,  174,   69,
       70,   71,   68,  161,  177,  178,  179,   69,   70,   71,
      175,  181,  159,  279,   68,  157,   69,   70,   71,  158,

       69,   70,   71,  160,   68,   69,   70,   71,  278,  276,
      274,   69,   70,   71,  128,  162,   69,   70,   71,   69,
       70,   71,   68,  243,   69,   70,   71,  171,  171,  118,
      118,  172,  172,  182,  183,  184,   69,   70,   71,   62,
       68,  231,  185,  189,   68,  168,   69,   70,   71,   68,
      165,  275,   62,  175,   68,  242,  241,   68,  240,  239,
       68,  190,  238,  237,   69,   70,   71,   68,  169,  230,
       68,  192,  226,  222,  195,   68,  166,  225,  191,  193,
       99,  196,   69,   70,   71,   68,   69,   70,   71,  194,
       68,   69,   70,   71,  188,   68,   69,   70,   71,   69,

       70,   71,   69,   70,   71,  197,  199,  198,   68,   69,
       70,   71,   69,   70,   71,  200,   68,   69,   70,   71,
       68,  128,  168,  187,  202,   68,  186,   69,   70,   71,
      277,  185,   69,   70,   71,   68,  204,   69,   70,   71,
       68,  201,  164,   68,  224,  169,  164,   68,  224,  203,
       69,   70,   71,  229,  205,  170,  209,   68,   69,   70,
       71,   68,   69,   70,   71,  206,   68,   69,   70,   71,
      225,  163,  208,   68,  225,  207,   68,   69,   70,   71,
      211,   68,   69,   70,   71,   69,   70,   71,  210,   69,
       70,   71,  214,   68,  213,   99,  212,   68,  216,   69,

       70,   71,  218,   69,   70,   71,   68,  215,   69,   70,
       71,  130,  129,   68,  128,   69,   70,   71,   69,   70,
       71,  233,  217,   69,   70,   71,  167,  181,  219,  122,
      431,  228,  343,  181,  121,   69,   70,   71,  220,   69,
       70,   71,   68,   64,  175,   68,  115,  111,   69,   70,
       71,   68,  221,  105,  229,   69,   70,   71,   68,   44,
       73,   68,  102,  234,  235,  236,   68,  101,  100,  182,
      183,  184,  125,  126,  127,  182,  183,  184,   68,  245,
       99,  244,  247,  246,   69,   70,   71,   69,   70,   71,
       68,  167,   73,   69,   70,   71,  228,  248,   68,   66,

       69,   70,   71,   69,   70,   71,   64,   68,   69,   70,
       71,   68,   45,   44,  249,   68,  431,  431,   68,  229,
       69,   70,   71,  251,  254,  250,   68,  431,  431,   68,
      431,  431,   69,   70,   71,  252,   68,  431,  431,   68,
       69,   70,   71,  431,  253,   68,  431,  255,  431,   69,
       70,   71,   68,   69,   70,   71,   68,   69,   70,   71,
       69,   70,   71,   68,  257,  431,  259,  256,   69,   70,
       71,   69,   70,   71,  431,   68,  263,  258,   69,   70,
       71,   69,   70,   71,  260,   68,  431,   69,   70,   71,
       68,  431,  431,   68,   69,   70,   71,   68,   69,   70,

       71,  431,  264,   68,  262,   69,   70,   71,  261,   68,
      431,  431,  431,   68,  265,  431,  431,   69,   70,   71,
      267,  431,  266,   68,  431,  431,   68,   69,   70,   71,
      269,   68,   69,   70,   71,   69,   70,   71,  268,   69,
       70,   71,  233,  272,  270,   69,   70,   71,  233,  431,
      431,   69,   70,   71,  271,   69,   70,   71,   68,  431,
      431,  181,  431,  431,   68,   69,   70,   71,   69,   70,
       71,   68,  431,   69,   70,   71,   68,  431,  431,   68,
      431,  431,   68,  273,  234,  235,  236,  431,   68,  431,
      234,  235,  236,   68,  286,  431,  285,   68,  287,  431,

       69,   70,   71,  182,  183,  184,   69,   70,   71,   68,
      292,  288,   68,   69,   70,   71,  289,  431,   69,   70,
       71,   69,   70,   71,   69,   70,   71,  431,  291,   68,
       69,   70,   71,  290,  293,   69,   70,   71,   68,   69,
       70,   71,   68,  431,  431,   68,  431,  431,   68,  431,
      431,   69,   70,   71,   69,   70,   71,   68,  431,  296,
       68,  431,  294,   68,  295,  431,   68,  431,  431,  431,
      431,   69,   70,   71,  431,   68,  431,  431,  299,  297,
       69,   70,   71,  302,   69,   70,   71,   69,   70,   71,
       69,   70,   71,  300,   68,  298,  301,   68,  431,   69,

       70,   71,   69,   70,   71,   69,   70,   71,   69,   70,
       71,   68,  431,  431,   68,  303,  431,   69,   70,   71,
       68,  431,  431,  431,  431,   68,  431,  431,  305,   68,
      304,  431,   68,  431,  431,  431,   69,   70,   71,   69,
       70,   71,  233,  431,  431,  431,  309,   68,  431,  431,
       68,  431,  307,   69,   70,   71,   69,   70,   71,  306,
      308,   68,   69,   70,   71,  310,   68,   69,   70,   71,
      431,   69,   70,   71,   69,   70,   71,  311,   68,  431,
      312,   68,  431,  431,  234,  235,  236,  431,  319,   69,
       70,   71,   69,   70,   71,   68,  431,  431,   68,  431,

      431,   68,  431,   69,   70,   71,  431,   68,   69,   70,
       71,  431,   68,  318,  431,   68,  431,  431,  431,   68,
       69,   70,   71,   69,   70,   71,  431,   68,  431,  431,
      320,  321,  327,   68,  431,  431,  431,   69,   70,   71,
       69,   70,   71,   69,   70,   71,  322,  323,   68,   69,
       70,   71,  324,  325,   69,   70,   71,   69,   70,   71,
       68,   69,   70,   71,   68,  431,  431,   68,  431,   69,
       70,   71,   68,  431,  431,   69,   70,   71,   68,  431,
      328,  431,  326,   68,  431,  431,  431,   68,  431,  431,
       69,   70,   71,  431,  431,   68,  336,  330,   68,  329,

      431,   68,   69,   70,   71,  332,   69,   70,   71,   69,
       70,   71,  333,  331,   69,   70,   71,   68,  431,  335,
       69,   70,   71,  334,   68,   69,   70,   71,   68,   69,
       70,   71,   68,  431,  337,   68,  431,   69,   70,   71,
       69,   70,   71,   69,   70,   71,  338,   68,  431,  431,
       68,  431,  431,  339,  431,  341,   68,  431,  431,   69,
       70,   71,   68,  340,  344,  431,   69,   70,   71,   68,
       69,   70,   71,  345,   69,   70,   71,   69,   70,   71,
       68,  431,  431,  346,   68,  431,  431,   68,  431,   69,
       70,   71,   69,   70,   71,   68,  347,  431,   69,   70,

       71,  431,   68,  431,   69,   70,   71,   68,  348,  431,
       68,   69,   70,   71,  431,   68,  431,  431,   68,  431,
      349,  352,   69,   70,   71,   68,   69,   70,   71,   69,
       70,   71,  431,  431,   68,  351,  353,   69,   70,   71,
       68,  431,  431,  350,   69,   70,   71,   68,  431,   69,
       70,   71,   69,   70,   71,  431,   68,   69,   70,   71,
       69,   70,   71,  354,  358,  355,   68,   69,   70,   71,
       68,  431,  431,   68,  431,  431,   69,   70,   71,   68,
      356,  431,   69,   70,   71,   68,  360,  431,   68,   69,
       70,   71,  357,   68,  431,  431,   68,  431,   69,   70,

       71,   68,  359,  431,   68,  431,  431,  361,   69,   70,
       71,   68,   69,   70,   71,   69,   70,   71,  365,  368,
      363,   69,   70,   71,  366,   68,  364,   69,   70,   71,
       69,   70,   71,   68,  431,   69,   70,   71,   69,   70,
       71,   68,  367,   69,   70,   71,   69,   70,   71,   68,
      431,  431,   68,   69,   70,   71,   68,  431,  431,  371,
       68,  431,  369,  431,  431,  431,   68,   69,   70,   71,
      370,   68,  431,  373,  431,   69,   70,   71,  375,   68,
      431,  431,  431,   69,   70,   71,  372,  379,   68,  431,
      374,   69,   70,   71,   69,   70,   71,   68,   69,   70,

       71,  376,   69,   70,   71,  380,  377,  378,   69,   70,
       71,   68,  431,   69,   70,   71,  431,   68,  431,  431,
       68,   69,   70,   71,   68,  431,  431,  431,   68,  431,
       69,   70,   71,  431,  431,   68,  431,  431,  431,   69,
       70,   71,  382,   68,  431,  431,   68,  431,  431,   68,
      381,  431,   68,   69,   70,   71,   68,  383,  384,   69,
       70,   71,   69,   70,   71,  431,   69,   70,   71,  385,
       69,   70,   71,  388,   68,  431,  431,   69,   70,   71,
      386,   68,  431,  387,   68,   69,   70,   71,   69,   70,
       71,   69,   70,   71,   69,   70,   71,   68,   69,   70,

       71,   68,  431,  431,   68,  431,  431,   68,  389,  431,
      431,  431,  431,   68,  390,  431,   69,   70,   71,   68,
      391,  431,  392,   69,   70,   71,   69,   70,   71,   68,
      431,  431,  393,   68,  395,  431,   68,  431,  431,   69,
       70,   71,   68,   69,   70,   71,   69,   70,   71,   69,
       70,   71,  431,   68,  394,   69,   70,   71,   68,  431,
      431,   69,   70,   71,  431,   68,  431,  431,  396,   68,
      431,   69,   70,   71,   68,   69,   70,   71,   69,   70,
       71,   68,  431,  431,   69,   70,   71,  397,  399,   68,
      431,  431,   68,  398,  431,   69,   70,   71,   68,  400,

       69,   70,   71,   68,  431,  431,   68,   69,   70,   71,
       68,   69,   70,   71,   68,  401,   69,   70,   71,  403,
      431,  431,   68,   69,   70,   71,  402,   68,  404,  407,
       68,   69,   70,   71,   69,   70,   71,  431,   68,  405,
       69,   70,   71,   68,  431,   69,   70,   71,   69,   70,
       71,  431,   69,   70,   71,   68,   69,   70,   71,   68,
      431,  431,  431,  406,   69,   70,   71,  410,   68,   69,
       70,   71,   69,   70,   71,  431,  431,   68,  408,  431,
       69,   70,   71,  431,   68,   69,   70,   71,  431,   68,
      409,  431,  431,  431,  411,   68,  431,   69,   70,   71,

       68,   69,   70,   71,  412,  414,   68,  431,  431,   68,
       69,   70,   71,  413,  415,  431,   68,  431,  431,   69,
       70,   71,   68,  431,  431,  431,   69,   70,   71,   68,
      416,   69,   70,   71,   68,  417,  418,   69,   70,   71,
      419,  420,   69,   70,   71,   68,  431,  421,   69,   70,
       71,   69,   70,   71,   68,  431,  431,   68,   69,   70,
       71,   68,  431,  426,   69,   70,   71,  431,  431,  422,
      431,   69,   70,   71,   68,  423,   69,   70,   71,   68,
      431,  431,   68,  431,  431,  424,   68,   69,   70,   71,
       68,  431,  425,   68,  431,  431,   69,   70,   71,   69,

       70,   71,   68,   69,   70,   71,  431,  431,  431,  427,
      431,  431,  428,  431,  431,  431,   69,   70,   71,  431,
      429,   69,   70,   71,   69,   70,   71,  430,   69,   70,
       71,  431,   69,   70,   71,   69,   70,   71,  431,  431,
      431,  431,  431,  431,   69,   70,   71,   39,   39,   39,
       39,   39,   39,   39,   46,  431,  431,   46,   46,   46,
       46,   49,  431,  431,   49,   49,   49,   49,   50,  431,
      431,   50,   50,   50,   50,   63,  431,  431,   63,   63,
      431,   63,   65,  431,   65,   65,   65,   65,   65,   67,
       67,  431,   67,  104,  104,  104,  104,  104,  104,  104,

      106,  431,  106,  106,  106,  106,  106,  110,  110,  110,
      110,  110,  110,  110,  112,  431,  112,  112,  112,  112,
      112,  117,  431,  431,  117,  117,  117,  117,  124,  431,
      124,  164,  164,  164,  164,  164,  164,  164,  167,  167,
      167,  167,  167,  167,  167,  173,  431,  173,  173,  173,
      173,  173,  180,  180,  431,  180,  223,  223,  223,  223,
      223,  223,  223,  227,  227,  227,  227,  227,  227,  227,
      232,  232,  431,  232,    5,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431
    } ;

static const flex_int16_t yy_chk[2136] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    4,    4,   13,   10,    3,   14,    4,   14,
       14,   15,   15,   16,   20,  448,   50,   16,   21,  362,
       17,   23,   17,   17,  111,   46,  105,   13,    3,  106,
        4,   10,   17,   53,   53,  343,   14,  317,   24,   50,

      315,   23,   26,   48,   48,   17,   25,  111,  314,   21,
       27,   46,  105,   23,  313,  106,   20,   20,   20,   28,
       21,   21,   21,   23,   23,   23,   24,   25,  112,   24,
       48,   25,   26,   29,   24,   27,   28,   25,  284,   30,
       24,   24,   24,   31,   26,   26,   26,  107,   25,   25,
       25,  112,   27,   27,   27,   29,   30,  108,  108,   32,
       30,   28,   28,   28,   31,   33,  283,   52,  122,   34,
       29,   52,   30,  107,   31,   29,   29,   29,   32,   35,
      122,   30,   30,   30,  108,   31,   31,   31,   62,   62,
       33,   32,   62,   62,   52,   32,   35,  282,   32,   34,

      281,   32,   32,   32,   67,  119,  119,   33,   33,   33,
      279,   34,   34,   34,   54,  113,   54,   54,   68,   57,
       57,   35,   35,   35,   72,   55,   54,   55,   55,   57,
       60,   60,   61,   75,   61,   61,   74,   55,  113,   54,
       60,   76,   57,  278,   61,  277,   67,   67,   67,  275,
       55,   77,  243,   60,   72,   78,   74,   61,   76,  242,
       68,   68,   68,  241,   79,   75,   72,   72,   72,   80,
      120,  120,   81,  171,  171,   75,   75,   75,   74,   74,
       74,   77,   85,   76,   76,   76,   79,   83,   80,   78,
       84,   81,   79,   77,   77,   77,   82,   78,   78,   78,

       86,  172,  172,   80,   85,  239,   79,   79,   79,   87,
      164,   80,   80,   80,   81,   81,   81,   83,   92,   84,
       82,   86,   88,  114,   85,   85,   85,  114,   89,   83,
       83,   83,   84,   84,   84,   92,  164,   91,   82,   82,
       82,  238,   86,   86,   86,   90,  236,  235,   87,   89,
      114,   87,   87,   87,   93,   88,  234,  233,   97,   89,
       92,   92,   92,   95,   88,   88,   88,   90,   91,   99,
       89,   89,   89,   90,   96,   93,   90,   94,  173,   91,
       91,   91,   98,   97,  123,  123,  123,   90,   90,   90,
      173,  124,   95,  231,  128,   94,   93,   93,   93,   94,

       97,   97,   97,   96,  132,   95,   95,   95,  230,  226,
      222,   99,   99,   99,  188,   98,   96,   96,   96,   94,
       94,   94,  131,  187,   98,   98,   98,  116,  116,  118,
      118,  116,  116,  124,  124,  124,  128,  128,  128,  118,
      133,  175,  186,  131,  134,  167,  132,  132,  132,  135,
      223,  224,  118,  175,  136,  184,  183,  137,  182,  179,
      138,  133,  178,  177,  131,  131,  131,  141,  167,  174,
      139,  135,  168,  165,  137,  140,  223,  224,  134,  135,
      163,  138,  133,  133,  133,  142,  134,  134,  134,  136,
      145,  135,  135,  135,  130,  143,  136,  136,  136,  137,

      137,  137,  138,  138,  138,  139,  142,  140,  147,  141,
      141,  141,  139,  139,  139,  143,  146,  140,  140,  140,
      144,  129,  227,  127,  145,  148,  126,  142,  142,  142,
      228,  125,  145,  145,  145,  151,  147,  143,  143,  143,
      150,  144,  166,  149,  166,  227,  225,  153,  225,  146,
      147,  147,  147,  228,  148,  115,  151,  152,  146,  146,
      146,  154,  144,  144,  144,  149,  155,  148,  148,  148,
      166,  101,  150,  156,  225,  149,  158,  151,  151,  151,
      153,  160,  150,  150,  150,  149,  149,  149,  152,  153,
      153,  153,  156,  159,  155,  100,  154,  157,  158,  152,

      152,  152,  160,  154,  154,  154,  161,  157,  155,  155,
      155,   71,   70,  162,   69,  156,  156,  156,  158,  158,
      158,  176,  159,  160,  160,  160,  169,  180,  161,   66,
      181,  169,  316,  185,   65,  159,  159,  159,  162,  157,
      157,  157,  189,   63,  316,  191,   56,   51,  161,  161,
      161,  190,  162,   47,  169,  162,  162,  162,  192,   44,
       43,  193,   42,  176,  176,  176,  194,   38,   37,  180,
      180,  180,  181,  181,  181,  185,  185,  185,  195,  191,
       36,  190,  193,  192,  189,  189,  189,  191,  191,  191,
      196,  229,   22,  190,  190,  190,  229,  194,  197,   19,

      192,  192,  192,  193,  193,  193,   18,  198,  194,  194,
      194,  199,    9,    7,  195,  200,    5,    0,  201,  229,
      195,  195,  195,  197,  201,  196,  202,    0,    0,  203,
        0,    0,  196,  196,  196,  198,  204,    0,    0,  205,
      197,  197,  197,    0,  199,  207,    0,  202,    0,  198,
      198,  198,  206,  199,  199,  199,  211,  200,  200,  200,
      201,  201,  201,  208,  205,    0,  207,  204,  202,  202,
      202,  203,  203,  203,    0,  209,  211,  206,  204,  204,
      204,  205,  205,  205,  208,  210,    0,  207,  207,  207,
      212,    0,    0,  213,  206,  206,  206,  214,  211,  211,

      211,    0,  212,  215,  210,  208,  208,  208,  209,  217,
        0,    0,    0,  216,  213,    0,    0,  209,  209,  209,
      215,    0,  214,  219,    0,    0,  220,  210,  210,  210,
      217,  218,  212,  212,  212,  213,  213,  213,  216,  214,
      214,  214,  232,  220,  218,  215,  215,  215,  237,    0,
        0,  217,  217,  217,  219,  216,  216,  216,  221,    0,
        0,  240,    0,    0,  245,  219,  219,  219,  220,  220,
      220,  246,    0,  218,  218,  218,  244,    0,    0,  247,
        0,    0,  248,  221,  232,  232,  232,    0,  249,    0,
      237,  237,  237,  252,  246,    0,  244,  251,  247,    0,

      221,  221,  221,  240,  240,  240,  245,  245,  245,  253,
      252,  248,  250,  246,  246,  246,  249,    0,  244,  244,
      244,  247,  247,  247,  248,  248,  248,    0,  251,  255,
      249,  249,  249,  250,  253,  252,  252,  252,  254,  251,
      251,  251,  256,    0,    0,  257,    0,    0,  259,    0,
        0,  253,  253,  253,  250,  250,  250,  258,    0,  256,
      260,    0,  254,  265,  255,    0,  262,    0,    0,    0,
        0,  255,  255,  255,    0,  261,    0,    0,  259,  257,
      254,  254,  254,  262,  256,  256,  256,  257,  257,  257,
      259,  259,  259,  260,  263,  258,  261,  264,    0,  258,

      258,  258,  260,  260,  260,  265,  265,  265,  262,  262,
      262,  266,    0,    0,  268,  263,    0,  261,  261,  261,
      267,    0,    0,    0,    0,  269,    0,    0,  266,  270,
      264,    0,  271,    0,    0,    0,  263,  263,  263,  264,
      264,  264,  280,    0,    0,    0,  270,  272,    0,    0,
      273,    0,  268,  266,  266,  266,  268,  268,  268,  267,
      269,  285,  267,  267,  267,  271,  286,  269,  269,  269,
        0,  270,  270,  270,  271,  271,  271,  272,  287,    0,
      273,  288,    0,    0,  280,  280,  280,    0,  288,  272,
      272,  272,  273,  273,  273,  289,    0,    0,  290,    0,

        0,  291,    0,  285,  285,  285,    0,  292,  286,  286,
      286,    0,  293,  287,    0,  295,    0,    0,    0,  298,
      287,  287,  287,  288,  288,  288,    0,  294,    0,    0,
      289,  291,  298,  296,    0,    0,    0,  289,  289,  289,
      290,  290,  290,  291,  291,  291,  292,  293,  297,  292,
      292,  292,  294,  296,  293,  293,  293,  295,  295,  295,
      299,  298,  298,  298,  300,    0,    0,  301,    0,  294,
      294,  294,  303,    0,    0,  296,  296,  296,  302,    0,
      299,    0,  297,  307,    0,    0,    0,  304,    0,    0,
      297,  297,  297,    0,    0,  305,  307,  301,  306,  300,

        0,  308,  299,  299,  299,  303,  300,  300,  300,  301,
      301,  301,  304,  302,  303,  303,  303,  309,    0,  306,
      302,  302,  302,  305,  310,  307,  307,  307,  311,  304,
      304,  304,  312,    0,  308,  318,    0,  305,  305,  305,
      306,  306,  306,  308,  308,  308,  309,  319,    0,    0,
      320,    0,    0,  310,    0,  312,  321,    0,    0,  309,
      309,  309,  323,  311,  319,    0,  310,  310,  310,  322,
      311,  311,  311,  321,  312,  312,  312,  318,  318,  318,
      324,    0,    0,  322,  325,    0,    0,  328,    0,  319,
      319,  319,  320,  320,  320,  326,  323,    0,  321,  321,

      321,    0,  330,    0,  323,  323,  323,  327,  324,    0,
      329,  322,  322,  322,    0,  331,    0,    0,  332,    0,
      326,  330,  324,  324,  324,  337,  325,  325,  325,  328,
      328,  328,    0,    0,  333,  329,  331,  326,  326,  326,
      334,    0,    0,  327,  330,  330,  330,  335,    0,  327,
      327,  327,  329,  329,  329,    0,  336,  331,  331,  331,
      332,  332,  332,  333,  337,  334,  339,  337,  337,  337,
      338,    0,    0,  340,    0,    0,  333,  333,  333,  341,
      335,    0,  334,  334,  334,  344,  340,    0,  346,  335,
      335,  335,  336,  345,    0,    0,  347,    0,  336,  336,

      336,  350,  338,    0,  348,    0,    0,  340,  339,  339,
      339,  349,  338,  338,  338,  340,  340,  340,  346,  350,
      344,  341,  341,  341,  348,  353,  345,  344,  344,  344,
      346,  346,  346,  355,    0,  345,  345,  345,  347,  347,
      347,  351,  349,  350,  350,  350,  348,  348,  348,  352,
        0,    0,  354,  349,  349,  349,  356,    0,    0,  353,
      357,    0,  351,    0,    0,    0,  360,  353,  353,  353,
      352,  361,    0,  355,    0,  355,  355,  355,  357,  359,
        0,    0,    0,  351,  351,  351,  354,  360,  363,    0,
      356,  352,  352,  352,  354,  354,  354,  358,  356,  356,

      356,  358,  357,  357,  357,  363,  358,  359,  360,  360,
      360,  364,    0,  361,  361,  361,    0,  365,    0,    0,
      371,  359,  359,  359,  366,    0,    0,    0,  367,    0,
      363,  363,  363,    0,    0,  368,    0,    0,    0,  358,
      358,  358,  365,  372,    0,    0,  369,    0,    0,  370,
      364,    0,  373,  364,  364,  364,  374,  366,  367,  365,
      365,  365,  371,  371,  371,    0,  366,  366,  366,  368,
      367,  367,  367,  373,  375,    0,    0,  368,  368,  368,
      369,  376,    0,  370,  377,  372,  372,  372,  369,  369,
      369,  370,  370,  370,  373,  373,  373,  379,  374,  374,

      374,  378,    0,    0,  380,    0,    0,  381,  375,    0,
        0,    0,    0,  383,  376,    0,  375,  375,  375,  382,
      377,    0,  378,  376,  376,  376,  377,  377,  377,  384,
        0,    0,  379,  385,  383,    0,  386,    0,    0,  379,
      379,  379,  387,  378,  378,  378,  380,  380,  380,  381,
      381,  381,    0,  388,  382,  383,  383,  383,  389,    0,
        0,  382,  382,  382,    0,  390,    0,    0,  385,  391,
        0,  384,  384,  384,  394,  385,  385,  385,  386,  386,
      386,  392,    0,    0,  387,  387,  387,  388,  390,  395,
        0,    0,  393,  389,    0,  388,  388,  388,  397,  391,

      389,  389,  389,  396,    0,    0,  401,  390,  390,  390,
      400,  391,  391,  391,  398,  392,  394,  394,  394,  395,
        0,    0,  402,  392,  392,  392,  393,  399,  396,  400,
      403,  395,  395,  395,  393,  393,  393,    0,  406,  398,
      397,  397,  397,  404,    0,  396,  396,  396,  401,  401,
      401,    0,  400,  400,  400,  405,  398,  398,  398,  407,
        0,    0,    0,  399,  402,  402,  402,  406,  408,  399,
      399,  399,  403,  403,  403,    0,    0,  409,  404,    0,
      406,  406,  406,    0,  410,  404,  404,  404,    0,  411,
      405,    0,    0,    0,  407,  412,    0,  405,  405,  405,

      413,  407,  407,  407,  408,  410,  414,    0,    0,  415,
      408,  408,  408,  409,  411,    0,  416,    0,    0,  409,
      409,  409,  417,    0,    0,    0,  410,  410,  410,  422,
      412,  411,  411,  411,  418,  413,  414,  412,  412,  412,
      415,  416,  413,  413,  413,  419,    0,  417,  414,  414,
      414,  415,  415,  415,  420,    0,    0,  423,  416,  416,
      416,  421,    0,  422,  417,  417,  417,    0,    0,  418,
        0,  422,  422,  422,  426,  419,  418,  418,  418,  424,
        0,    0,  425,    0,    0,  420,  427,  419,  419,  419,
      429,    0,  421,  428,    0,    0,  420,  420,  420,  423,

      423,  423,  430,  421,  421,  421,    0,    0,    0,  424,
        0,    0,  425,    0,    0,    0,  426,  426,  426,    0,
      427,  424,  424,  424,  425,  425,  425,  428,  427,  427,
      427,    0,  429,  429,  429,  428,  428,  428,    0,    0,
        0,    0,    0,    0,  430,  430,  430,  432,  432,  432,
      432,  432,  432,  432,  433,    0,    0,  433,  433,  433,
      433,  434,    0,    0,  434,  434,  434,  434,  435,    0,
        0,  435,  435,  435,  435,  436,    0,    0,  436,  436,
        0,  436,  437,    0,  437,  437,  437,  437,  437,  438,
      438,    0,  438,  439,  439,  439,  439,  439,  439,  439,

      440,    0,  440,  440,  440,  440,  440,  441,  441,  441,
      441,  441,  441,  441,  442,    0,  442,  442,  442,  442,
      442,  443,    0,    0,  443,  443,  443,  443,  444,    0,
      444,  445,  445,  445,  445,  445,  445,  445,  446,  446,
      446,  446,  446,  446,  446,  447,    0,  447,  447,  447,
      447,  447,  449,  449,    0,  449,  450,  450,  450,  450,
      450,  450,  450,  451,  451,  451,  451,  451,  451,  451,
      452,  452,    0,  452,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "textFileFormatUtf8.ll"
#line 2 "textFileFormatUtf8.ll"
//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

#include "pxr/pxr.h"
#include "pxr/base/arch/fileSystem.h"
#include "pxr/base/tf/errorMark.h"
#include "pxr/base/tf/stringUtils.h"
#include "pxr/usd/sdf/textParserContext.h"
#include "pxr/usd/sdf/parserHelpers.h"

// Token table from yacc file
#include "textFileFormatUtf8.tab.h"

#ifndef fileno
#define fileno(fd) ArchFileNo(fd)
#endif
#ifndef isatty
#define isatty(fd) ArchFileIsaTTY(fd)
#endif

using std::map;
using std::vector;

PXR_NAMESPACE_USING_DIRECTIVE

#define YYSTYPE Sdf_ParserHelpers::Value

// As a pure parser, we must define the following
#define YY_DECL int textFileFormatUtf8Yylex(YYSTYPE *yylval_param, yyscan_t yyscanner)

// The context object will be used to store global state for the parser.
#define YY_EXTRA_TYPE Sdf_TextParserContext *

#line 1316 "textFileFormatUtf8.lex.cpp"
/* Configuration options for flex */
/* character classes
  * defines UTF-8 encoded byte values for standard ASCII
  * and multi-byte UTF-8 character sets
  * valid multi-byte UTF-8 sequences are as follows:
  * For an n-byte encoded UTF-8 character, the last n-1 bytes range [\x80-\xbf]
  * 2-byte UTF-8 characters, first byte in range [\xc2-\xdf]
  * 3-byte UTF-8 characters, first byte in range [\xe0-\xef]
  * 4-byte UTF-8 characters, first byte in range [\xf0-\xf4]
  * ASCII characters span [\x41-\x5a] (upper case) [\x61-\x7a] (lower case) [\x30-39] (digits)
  */
/* States */

#line 1330 "textFileFormatUtf8.lex.cpp"

#define INITIAL 0
#define SLASHTERIX_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

yy_size_t yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int textFileFormatUtf8Yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int textFileFormatUtf8Yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 97 "textFileFormatUtf8.ll"


#line 100 "textFileFormatUtf8.ll"
    /* skip over whitespace and comments */
    /* handle the first line # comment specially, since it contains the
       magic token */
#line 1610 "textFileFormatUtf8.lex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 432 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2075 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 103 "textFileFormatUtf8.ll"
{}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 104 "textFileFormatUtf8.ll"
{
        if (yyextra->sdfLineNo == 1) {
            (*yylval_param) = std::string(yytext, yyleng);
            return TOK_MAGIC;
        }
    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 110 "textFileFormatUtf8.ll"
{}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 111 "textFileFormatUtf8.ll"
BEGIN SLASHTERIX_COMMENT ;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 112 "textFileFormatUtf8.ll"
;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 113 "textFileFormatUtf8.ll"
BEGIN INITIAL ;
	YY_BREAK
/* newline is returned as TOK_NL
     * Note that newlines embedded in quoted strings and tuples are counted
     * as part of the token and do NOT emit a separate TOK_NL.
     */
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 119 "textFileFormatUtf8.ll"
{
        yyextra->sdfLineNo++;
        return TOK_NL;
    }
	YY_BREAK
/* literal keywords.  we return the yytext so that the yacc grammar
       can make use of it. */
case 8:
YY_RULE_SETUP
#line 126 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_ADD; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 127 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_APPEND; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 128 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CLASS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 129 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CONFIG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 130 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CONNECT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 131 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CUSTOM; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 132 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_CUSTOMDATA; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 133 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DEFAULT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 134 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DEF; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DELETE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 136 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DICTIONARY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 137 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DISPLAYUNIT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 138 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_DOC; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 139 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_INHERITS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 140 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_KIND; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 141 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_NAMECHILDREN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 142 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_NONE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 143 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_OFFSET; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 144 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_OVER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 145 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PAYLOAD; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 146 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PERMISSION; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 147 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PREFIX_SUBSTITUTIONS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 148 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PREPEND; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 149 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_PROPERTIES; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 150 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_REFERENCES; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 151 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_RELOCATES; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 152 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_REL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 153 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_REORDER; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 154 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_ROOTPRIMS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 155 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SCALE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 156 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SUBLAYERS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 157 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SUFFIX_SUBSTITUTIONS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 158 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SPECIALIZES; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 159 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SYMMETRYARGUMENTS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 160 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_SYMMETRYFUNCTION; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 161 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_TIME_SAMPLES; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 162 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_UNIFORM; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 163 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_VARIANTSET; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 164 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_VARIANTSETS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 165 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_VARIANTS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 166 "textFileFormatUtf8.ll"
{ (*yylval_param) = std::string(yytext, yyleng); return TOK_VARYING; }
	YY_BREAK
/* In a Unicode enabled scheme, 'identifiers' are generally
  * categorized as something that begins with something in the
  * XID_Start category followed by zero or more things in the
  * XID_Continue category.  Since the number of characters in
  * these classes are large, we can't explicitly validate them
  * here easily, so the lex rule is pretty permissive with some
  * further validation done in code prior to calling what was
  * read an 'identifier'.  Note this rule will also match
  * standard ASCII strings because the UTF-8 encoded byte 
  * representation is the same for these characters.
  * However, unlike the path lexer, we can guarantee that 
  * prim names aren't something special to be called out here
  * so we can be a little more specific about the kinds of strings
  * we match, particularly to not collide with the pure digit match rule
  * below
  */
case 49:
YY_RULE_SETUP
#line 185 "textFileFormatUtf8.ll"
{
    (*yylval_param) = std::string(yytext, yyleng);
    return TOK_IDENTIFIER;
}
	YY_BREAK
/* unquoted C++ namespaced identifiers are identifiers separated
  * by the '::' character -- see bug 10775.
  */
case 50:
YY_RULE_SETUP
#line 193 "textFileFormatUtf8.ll"
{
    (*yylval_param) = std::string(yytext, yyleng);
    return TOK_CXX_NAMESPACED_IDENTIFIER;
}
	YY_BREAK
/* unquoted namespaced identifiers match any number of colon 
  * delimited identifiers
  */
case 51:
YY_RULE_SETUP
#line 201 "textFileFormatUtf8.ll"
{
    *(yylval_param) = std::string(yytext, yyleng);
    return TOK_NAMESPACED_IDENTIFIER;
}
	YY_BREAK
/* scene paths */
case 52:
YY_RULE_SETUP
#line 207 "textFileFormatUtf8.ll"
{
        (*yylval_param) = Sdf_EvalQuotedString(yytext, yyleng, 1);
        return TOK_PATHREF;
    }
	YY_BREAK
/* Single '@'-delimited asset references */
case 53:
YY_RULE_SETUP
#line 213 "textFileFormatUtf8.ll"
{
        TfErrorMark m;
        (*yylval_param) = 
            Sdf_EvalAssetPath(yytext, yyleng, /* tripleDelimited = */ false);
        return m.IsClean() ? TOK_ASSETREF : TOK_SYNTAX_ERROR;
    }
	YY_BREAK
/* Triple '@'-delimited asset references. */
case 54:
YY_RULE_SETUP
#line 221 "textFileFormatUtf8.ll"
{
        TfErrorMark m;
        (*yylval_param) = 
            Sdf_EvalAssetPath(yytext, yyleng, /* tripleDelimited = */ true);
        return m.IsClean() ? TOK_ASSETREF : TOK_SYNTAX_ERROR;
    }
	YY_BREAK
/* Singly quoted, single line strings with escapes.
       Note: we handle empty singly quoted strings below, to disambiguate
       them from the beginning of triply-quoted strings.
       Ex: "Foo \"foo\"" */
case 55:
#line 233 "textFileFormatUtf8.ll"
case 56:
YY_RULE_SETUP
#line 233 "textFileFormatUtf8.ll"
{  /* " //<- unfreak out coloring code */
        (*yylval_param) = Sdf_EvalQuotedString(yytext, yyleng, 1);
        return TOK_STRING;
    }
	YY_BREAK
/* Empty singly quoted strings that aren't the beginning of
       a triply-quoted string. */
case 57:
/* rule 57 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 240 "textFileFormatUtf8.ll"
{  /* ' // <- keep syntax coloring from freaking out */
        (*yylval_param) = std::string();
        return TOK_STRING;
    }
	YY_BREAK
case 58:
/* rule 58 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 244 "textFileFormatUtf8.ll"
{
        (*yylval_param) = std::string();
        return TOK_STRING;
    }
	YY_BREAK
/* Triply quoted, multi-line strings with escapes.
       Ex: """A\n\"B\"\nC""" */
case 59:
/* rule 59 can match eol */
#line 252 "textFileFormatUtf8.ll"
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 252 "textFileFormatUtf8.ll"
{  /* " //<- unfreak out coloring code */

        unsigned int numlines = 0;
        (*yylval_param) = Sdf_EvalQuotedString(yytext, yyleng, 3, &numlines);
        yyextra->sdfLineNo += numlines;
        return TOK_STRING;
    }
	YY_BREAK
/* Super special case for negative 0.  We have to store this as a double to
     * preserve the sign.  There is no negative zero integral value, and we
     * don't know at this point what the final stored type will be. */
case 61:
YY_RULE_SETUP
#line 263 "textFileFormatUtf8.ll"
{
        (*yylval_param) = double(-0.0);
        return TOK_NUMBER;
   }
	YY_BREAK
/* Positive integers: store as uint64_t if in range, otherwise double. */
case 62:
YY_RULE_SETUP
#line 269 "textFileFormatUtf8.ll"
{
        bool outOfRange = false;
        (*yylval_param) = TfStringToUInt64(yytext, &outOfRange);
        if (outOfRange) {
           TF_WARN("Integer literal '%s' on line %d%s%s out of range, parsing "
                   "as double.  Consider exponential notation for large "
                   "floating point values.", yytext, yyextra->sdfLineNo,
                   yyextra->fileContext.empty() ? "" : " in file ",
                   yyextra->fileContext.empty() ? "" :
                   yyextra->fileContext.c_str());
           (*yylval_param) = TfStringToDouble(yytext);
        }
        return TOK_NUMBER;
    }
	YY_BREAK
/* Negative integers: store as long. */
case 63:
YY_RULE_SETUP
#line 285 "textFileFormatUtf8.ll"
{
        bool outOfRange = false;
        (*yylval_param) = TfStringToInt64(yytext, &outOfRange);
        if (outOfRange) {
           TF_WARN("Integer literal '%s' on line %d%s%s out of range, parsing "
                   "as double.  Consider exponential notation for large "
                   "floating point values.", yytext, yyextra->sdfLineNo,
                   yyextra->fileContext.empty() ? "" : " in file ",
                   yyextra->fileContext.empty() ? "" :
                   yyextra->fileContext.c_str());
           (*yylval_param) = TfStringToDouble(yytext);
        }
        return TOK_NUMBER;
    }
	YY_BREAK
/* Numbers with decimal places or exponents: store as double. */
case 64:
#line 302 "textFileFormatUtf8.ll"
case 65:
YY_RULE_SETUP
#line 302 "textFileFormatUtf8.ll"
{
        (*yylval_param) = TfStringToDouble(yytext);
        return TOK_NUMBER;
    }
	YY_BREAK
/* regexps for negative infinity.  we don't handle inf and nan here
     * because they look like identifiers.  we handle them in parser where
     * we have the additional context we need to distinguish them from
     * identifiers. */
case 66:
YY_RULE_SETUP
#line 311 "textFileFormatUtf8.ll"
{
        (*yylval_param) = -std::numeric_limits<double>::infinity();
        return TOK_NUMBER;
    }
	YY_BREAK
/* various single-character punctuation.  return the character
     * itself as the token.
     */
case 67:
YY_RULE_SETUP
#line 319 "textFileFormatUtf8.ll"
{
        return yytext[0];
    }
	YY_BREAK
/* the default rule is to ECHO any unmatched character.  by returning a
     * token that the parser does not know how to handle these become syntax
     * errors instead.
     */
case 68:
YY_RULE_SETUP
#line 327 "textFileFormatUtf8.ll"
{
        return TOK_SYNTAX_ERROR;
    }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 331 "textFileFormatUtf8.ll"
ECHO;
	YY_BREAK
#line 2157 "textFileFormatUtf8.lex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SLASHTERIX_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 432 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 432 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 431);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 331 "textFileFormatUtf8.ll"


