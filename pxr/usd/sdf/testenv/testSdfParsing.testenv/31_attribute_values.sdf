#sdf 1.4.10
#tagged-as-never-update
(
    """Test of attribute value parsing."""
    framesPerSecond = 24
    framePrecision = 3
)

def MfScope "bool_tests"
{
    custom bool blocked = None
    custom bool false_0 = 0
    custom bool false_1 = 0
    custom bool false_2 = 0
    custom bool false_3 = 0
    custom bool false_4 = 0
    custom bool true_0 = 1
    custom bool true_1 = 1
    custom bool true_2 = 1
    custom bool true_3 = 1
    custom bool true_5 = 1
    custom bool[] array_0 = [0, 1, 0, 1, 0, 1, 0, 1]
    custom bool[] array_1 = [0, 1, 0, 1, 0, 1, 0, 1]
}

def MfScope "uchar_tests"
{
    custom uchar blocked = None
    custom uchar i0 = 0
    custom uchar i1 = 123
    custom uchar i2 = 255
    custom uchar i3 = 0
    custom uchar[] i4 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uchar[] i5 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uchar[] i6 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uchar[] i7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar[] i8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar[] i9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar[] i10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar[] i11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar[] i12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar[] i13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar[] i14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar[] i15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uchar i16 = 0
    custom uchar i17 = 0
    custom uchar[] i18 = [0, 0, 0]
}

def MfScope "int_tests"
{
    custom int blocked = None
    custom int i0 = 0
    custom int i1 = 123
    custom int i2 = 2147483647
    custom int i3 = -2147483648
    custom int[] i4 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom int[] i5 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom int[] i6 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom int[] i7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int[] i8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int[] i9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int[] i10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int[] i11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int[] i12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int[] i13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int[] i14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int[] i15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int i16 = -2147483648
    custom int i17 = -2147483648
    custom int[] i18 = [-2147483648, -2147483648, -2147483648]
}

def MfScope "uint_tests"
{
    custom uint blocked = None
    custom uint i0 = 0
    custom uint i1 = 123
    custom uint i2 = 4294967295
    custom uint i3 = 0
    custom uint[] i4 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uint[] i5 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uint[] i6 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uint[] i7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint[] i8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint[] i9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint[] i10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint[] i11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint[] i12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint[] i13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint[] i14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint[] i15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint i16 = 0
    custom uint i17 = 0
    custom uint[] i18 = [0, 0, 0]
}

def MfScope "int64_tests"
{
    custom int64 blocked = None
    custom int64 i0 = 0
    custom int64 i1 = 123
    custom int64 i2 = 9223372036854775807
    custom int64 i3 = -9223372036854775808
    custom int64[] i4 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom int64[] i5 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom int64[] i6 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom int64[] i7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64[] i8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64[] i9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64[] i10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64[] i11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64[] i12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64[] i13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64[] i14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64[] i15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom int64 i16 = -9223372036854775808
    custom int64 i17 = -9223372036854775808
    custom int64[] i18 = [-9223372036854775808, -9223372036854775808, -9223372036854775808]
}

def MfScope "uint64_tests"
{
    custom uint64 blocked = None
    custom uint64 i0 = 0
    custom uint64 i1 = 123
    custom uint64 i2 = 18446744073709551615
    custom uint64 i3 = 0
    custom uint64[] i4 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uint64[] i5 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uint64[] i6 = [0, 1, 2, 3, 4, 5, 6, 7]
    custom uint64[] i7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64[] i8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64[] i9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64[] i10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64[] i11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64[] i12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64[] i13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64[] i14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64[] i15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    custom uint64 i16 = 0
    custom uint64 i17 = 0
    custom uint64[] i18 = [0, 0, 0]
}

def MfScope "half_tests"
{
    custom half blocked = None
    custom half f0 = 0
    custom half f1 = 3.14257
    custom half f2 = 10000000000
    custom half f3 = -0.000001
    custom half[] f4 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom half[] f5 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom half[] f6 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom half d7 = inf
    custom half d8 = -inf
    custom half[] d9 = [inf, -inf, inf]
}

def MfScope "float_tests"
{
    custom float blocked = None
    custom float f0 = 0
    custom float f1 = 3.14159
    custom float f2 = 10000000000
    custom float f3 = -0.000001
    custom float[] f4 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom float[] f5 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom float[] f6 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom float d7 = inf
    custom float d8 = -inf
    custom float[] d9 = [inf, -inf, inf]
}

def MfScope "double_tests"
{
    custom double blocked = None
    custom double f0 = 0
    custom double f1 = 3.14159
    custom double f2 = 10000000000
    custom double f3 = -0.000001
    custom double[] f4 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom double[] f5 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom double[] f6 = [0, 1.2, 3.4, 5.6, 7800000000, 0]
    custom double d7 = inf
    custom double d8 = -inf
    custom double[] d9 = [inf, -inf, inf]
}

def MfScope "Vec2_tests"
{
    def MfScope "d"
    {
        custom double2 blocked = None
        custom double2 v0 = (0, 1)
        custom double2 v1 = (-3.12345678910111, 3.12345678910111)
        custom double2[] v3 = [(-0.707, 0.707), (1.23, 3.45)]
        custom double2[] v4 = [(-0.707, 0.707), (1.23, 3.45), (0.707, -0.707), (-1.23, 3.45)]
        custom double2 v5 = (inf, -inf)
    }

    def MfScope "f"
    {
        custom float2 blocked = None
        custom float2 v0 = (1, 2)
        custom float2 v1 = (-4.12345, 4.12345)
        custom float2[] v3 = [(-1.707, 1.707), (2.23, 4.45)]
        custom float2[] v4 = [(-1.707, 1.707), (2.23, 4.45), (1.707, -1.707), (-2.23, 4.45)]
        custom float2 v5 = (inf, -inf)
    }

    def MfScope "h"
    {
        custom half2 blocked = None
        custom half2 v0 = (1, 2)
        custom half2 v1 = (-4.12345, 4.12345)
        custom half2[] v3 = [(-1.707, 1.707), (2.23, 4.45)]
        custom half2[] v4 = [(-1.707, 1.707), (2.23, 4.45), (1.707, -1.707), (-2.23, 4.45)]
        custom half2 v5 = (inf, -inf)
    }

    def MfScope "i"
    {
        custom int2 blocked = None
        custom int2 v0 = (33, 100)
        custom int2[] v1 = [(-90, 100), (3000, -9000)]
        custom int2[] v2 = [(-90, 100), (3000, -9000), (-91, 101), (3001, -9001)]
        custom int2 v3 = (-2147483648, 2147483647)
    }
}

def MfScope "Vec3_tests"
{
    def MfScope "d"
    {
        custom double3 blocked = None
        custom double3 v0 = (0, 1, 2)
        custom double3 v1 = (-3.12345678910111, 0.707, 0.123)
        custom double3[] v3 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
        custom double3[] v4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
        custom double3 v5 = (inf, -inf, inf)
    }

    def MfScope "f"
    {
        custom float3 blocked = None
        custom float3 v0 = (1, 2, 3)
        custom float3 v1 = (-4.12345, 1.707, 2.123)
        custom float3[] v3 = [(-1.707, 1.707, 10.303), (2.23, 4.45, 10.303)]
        custom float3[] v4 = [(-1.707, 1.707, 10.303), (2.23, 4.45, 10.303), (1.707, -1.707, 10.303), (-2.23, 3.45, 10.303)]
        custom float3 v5 = (inf, -inf, inf)
    }

    def MfScope "h"
    {
        custom half3 blocked = None
        custom half3 v0 = (1, 2, 3)
        custom half3 v1 = (-4.12345, 1.707, 2.123)
        custom half3[] v3 = [(-1.707, 1.707, 10.303), (2.23, 4.45, 10.303)]
        custom half3[] v4 = [(-1.707, 1.707, 10.303), (2.23, 4.45, 10.303), (1.707, -1.707, 10.303), (-2.23, 3.45, 10.303)]
        custom half3 v5 = (inf, -inf, inf)
    }

    def MfScope "i"
    {
        custom int3 blocked = None
        custom int3 v0 = (33, 100, 444)
        custom int3[] v1 = [(-90, 100, 555), (3000, -9000, 9999)]
        custom int3[] v2 = [(-90, 100, 555), (3000, -9000, 9999), (-91, 101, 556), (3001, -9001, 9998)]
        custom int3 v3 = (-2147483648, 2147483647, 2147483646)
    }
}

def MfScope "Vec4_tests"
{
    def MfScope "d"
    {
        custom double4 blocked = None
        custom double4 v0 = (0, 1, 2, 4)
        custom double4 v1 = (-3.12345678910111, 0.707, 0.123, 911.33)
        custom double4[] v3 = [(-0.707, 0.707, 9.303, 911.33), (1.23, 3.45, 9.303, 911.33)]
        custom double4[] v4 = [(-0.707, 0.707, 9.303, 911.33), (1.23, 3.45, 9.303, 911.33), (0.707, -0.707, 9.303, 911.33), (-1.23, 3.45, 9.303, 911.33)]
        custom double4 v5 = (inf, -inf, inf, -inf)
    }

    def MfScope "f"
    {
        custom float4 blocked = None
        custom float4 v0 = (1, 2, 3, 5)
        custom float4 v1 = (-4.12345, 1.807, 1.223, 1011.43)
        custom float4[] v3 = [(-1.807, 1.807, 10.403, 1011.43), (2.33, 4.55, 10.403, 1011.43)]
        custom float4[] v4 = [(-1.807, 1.807, 10.403, 1011.43), (2.33, 4.55, 10.403, 1011.43), (1.807, -1.807, 10.403, 1011.43), (-2.33, 4.55, 10.403, 1011.43)]
        custom float4 v5 = (inf, -inf, inf, -inf)
    }

    def MfScope "h"
    {
        custom half4 blocked = None
        custom half4 v0 = (1, 2, 3, 5)
        custom half4 v1 = (-4.12345, 1.807, 1.223, 1011.43)
        custom half4[] v3 = [(-1.807, 1.807, 10.415, 1011.43), (2.33, 4.55, 10.415, 1011.43)]
        custom half4[] v4 = [(-1.807, 1.807, 10.415, 1011.43), (2.33, 4.55, 10.415, 1011.43), (1.807, -1.807, 10.415, 1011.43), (-2.33, 4.55, 10.415, 1011.43)]
        custom half4 v5 = (inf, -inf, inf, -inf)
    }

    def MfScope "i"
    {
        custom int4 blocked = None
        custom int4 v0 = (33, 100, 444, -1)
        custom int4[] v1 = [(-90, 100, 555, -3), (3000, -9000, 9999, -4)]
        custom int4[] v2 = [(-90, 100, 555, -5), (3000, -9000, 9999, -6), (-91, 101, 556, -9), (3001, -9001, 9998, -100)]
        custom int4 v3 = (-2147483648, 2147483647, -2147483648, 2147483647)
    }
}

def MfScope "Quat_tests"
{
    def MfScope "d"
    {
        custom quatd blocked = None
        custom quatd v0 = (0, 1, 2, 4)
        custom quatd v1 = (-3.12345678910111, 0.707, 0.123, 911.33)
        custom quatd[] v3 = [(-0.707, 0.707, 9.303, 911.33), (1.23, 3.45, 9.303, 911.33)]
        custom quatd[] v4 = [(-0.707, 0.707, 9.303, 911.33), (1.23, 3.45, 9.303, 911.33), (0.707, -0.707, 9.303, 911.33), (-1.23, 3.45, 9.303, 911.33)]
        custom quatd v5 = (inf, -inf, inf, -inf)
    }

    def MfScope "f"
    {
        custom quatf blocked = None
        custom quatf v0 = (1, 2, 3, 5)
        custom quatf v1 = (-4.12345, 1.807, 1.223, 1011.43)
        custom quatf[] v3 = [(-1.807, 1.807, 10.403, 1011.43), (2.33, 4.55, 10.403, 1011.43)]
        custom quatf[] v4 = [(-1.807, 1.807, 10.403, 1011.43), (2.33, 4.55, 10.403, 1011.43), (1.807, -1.807, 10.403, 1011.43), (-2.33, 4.55, 10.403, 1011.43)]
        custom quatf v5 = (inf, -inf, inf, -inf)
    }

    def MfScope "h"
    {
        custom quath blocked = None
        custom quath v0 = (1, 2, 3, 5)
        custom quath v1 = (-4.12345, 1.807, 1.223, 1011.43)
        custom quath[] v3 = [(-1.807, 1.807, 10.415, 1011.43), (2.33, 4.55, 10.415, 1011.43)]
        custom quath[] v4 = [(-1.807, 1.807, 10.415, 1011.43), (2.33, 4.55, 10.415, 1011.43), (1.807, -1.807, 10.415, 1011.43), (-2.33, 4.55, 10.415, 1011.43)]
        custom quath v5 = (inf, -inf, inf, -inf)
    }
}

def MfScope "Point_tests"
{
    custom point3d blocked = None
    custom point3d v0 = (0, 1, 2)
    custom point3d v1 = (-0.707, 0.707, 0.123)
    custom point3d[] v3 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom point3d[] v4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom point3d[] v5 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303), (-1.707, 1.707, 1.303), (2.23, 2.45, 2.303), (3.707, -3.707, 3.303), (-4.23, 4.45, 4.303)]
    custom point3d[] v6 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303), (-1.707, 1.707, 1.303), (2.23, 2.45, 2.303), (3.707, -3.707, 3.303), (-4.23, 4.45, 4.303), (-5.707, 5.707, 5.303), (6.23, 6.45, 6.303), (7.707, -7.707, 7.303), (-8.23, 8.45, 8.303), (-9.707, 9.707, 9.303), (10.23, 10.45, 10.303), (11.707, -11.707, 11.303), (-12.23, 12.45, 12.303)]
}

def MfScope "point3f_tests"
{
    custom point3f blocked = None
    custom point3f v0 = (0, 1, 2)
    custom point3f v1 = (-0.707, 0.707, 0.123)
    custom point3f[] v3 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom point3f[] v4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom point3f[] v5 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303), (-1.707, 1.707, 1.303), (2.23, 2.45, 2.303), (3.707, -3.707, 3.303), (-4.23, 4.45, 4.303)]
    custom point3f[] v6 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303), (-1.707, 1.707, 1.303), (2.23, 2.45, 2.303), (3.707, -3.707, 3.303), (-4.23, 4.45, 4.303), (-5.707, 5.707, 5.303), (6.23, 6.45, 6.303), (7.707, -7.707, 7.303), (-8.23, 8.45, 8.303), (-9.707, 9.707, 9.303), (10.23, 10.45, 10.303), (11.707, -11.707, 11.303), (-12.23, 12.45, 12.303)]
}

def MfScope "Normal_tests"
{
    custom normal3d blocked = None
    custom normal3d v0 = (0, 1, 2)
    custom normal3d v1 = (-0.707, 0.707, 0.123)
    custom normal3d[] v3 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom normal3d[] v4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
}

def MfScope "normal3f_tests"
{
    custom normal3f blocked = None
    custom normal3f v0 = (0, 1, 2)
    custom normal3f v1 = (-0.707, 0.707, 0.123)
    custom normal3f[] v3 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom normal3f[] v4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
}

def MfScope "Vector_tests"
{
    custom vector3d blocked = None
    custom vector3d v0 = (0, 1, 2)
    custom vector3d v1 = (-0.707, 0.707, 0.123)
    custom vector3d[] v3 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom vector3d[] v4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
}

def MfScope "vector3f_tests"
{
    custom vector3f blocked = None
    custom vector3f v0 = (0, 1, 2)
    custom vector3f v1 = (-0.707, 0.707, 0.123)
    custom vector3f[] v3 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom vector3f[] v4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
}

def MfScope "Color_tests"
{
    custom color3d blocked = None
    custom color3d c0 = (0, 1, 1)
    custom color3d c1 = (-0.707, 0.707, 0.123)
    custom color3d c2 = (0, 1, 1)
    custom color3d c3 = (0.707, 0.707, 0.123)
    custom color3d[] c4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom color3d[] c5 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom color3d[] c6 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom color3d[] c7 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom color3d[] c8 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom color3d[] c9 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
}

def MfScope "color3f_tests"
{
    custom color3f blocked = None
    custom color3f c0 = (0, 1, 1)
    custom color3f c1 = (-0.707, 0.707, 0.123)
    custom color3f c2 = (0, 1, 1)
    custom color3f c3 = (0.707, 0.707, 0.123)
    custom color3f[] c4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom color3f[] c5 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom color3f[] c6 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom color3f[] c7 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom color3f[] c8 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom color3f[] c9 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
}

def MfScope "color4d_tests"
{
    custom color4d blocked = None
    custom color4d c0 = (0, 1, 1, 1)
    custom color4d c1 = (-0.707, 0.707, 0.123, 1)
    custom color4d c2 = (0, 1, 1, 1)
    custom color4d c3 = (0.707, 0.707, 0.123, 1)
    custom color4d[] c4 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1)]
    custom color4d[] c5 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4d[] c6 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4d[] c7 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1)]
    custom color4d[] c8 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4d[] c9 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
}

def MfScope "color4h_tests"
{
    custom color4h blocked = None
    custom color4h c0 = (0, 1, 1, 1)
    custom color4h c1 = (-0.707, 0.707, 0.123, 1)
    custom color4h c2 = (0, 1, 1, 1)
    custom color4h c3 = (0.707, 0.707, 0.123, 1)
    custom color4h[] c4 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1)]
    custom color4h[] c5 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4h[] c6 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4h[] c7 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1)]
    custom color4h[] c8 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4h[] c9 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
}

def MfScope "color4f_tests"
{
    custom color4f blocked = None
    custom color4f c0 = (0, 1, 1, 1)
    custom color4f c1 = (-0.707, 0.707, 0.123, 1)
    custom color4f c2 = (0, 1, 1, 1)
    custom color4f c3 = (0.707, 0.707, 0.123, 1)
    custom color4f[] c4 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1)]
    custom color4f[] c5 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4f[] c6 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4f[] c7 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1)]
    custom color4f[] c8 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
    custom color4f[] c9 = [(-0.707, 0.707, 9.303, 1), (1.23, 3.45, 9.303, 1), (0.707, -0.707, 9.303, 1), (-1.23, 3.45, 9.303, 1)]
}

def MfScope "matrix4d_tests"
{
    custom matrix4d blocked = None
    custom matrix4d m0 = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    custom matrix4d[] m2 = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
}

def MfScope "Transform_tests"
{
    custom frame4d blocked = None
    custom frame4d t0 = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    custom frame4d[] t2 = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
}

def MfScope "Frame_tests"
{
    custom frame4d blocked = None
    custom frame4d m0 = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    custom frame4d[] m2 = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
}

def MfScope "texCoord2d_tests"
{
    custom texCoord2d blocked = None
    custom texCoord2d t0 = (0, 1)
    custom texCoord2d t1 = (-3.12345678910111, 3.12345678910111)
    custom texCoord2d[] t3 = [(-0.707, 0.707), (1.23, 3.45)]
    custom texCoord2d[] t4 = [(-0.707, 0.707), (1.23, 3.45), (0.707, -0.707), (-1.23, 3.45)]
    custom texCoord2d[] t5 = []
    custom texCoord2d t6 = (inf, -inf)
}

def MfScope "texCoord2f_tests"
{
    custom texCoord2f blocked = None
    custom texCoord2f t0 = (1, 2)
    custom texCoord2f t1 = (-4.12345, 4.12345)
    custom texCoord2f[] t3 = [(-1.707, 1.707), (2.23, 4.45)]
    custom texCoord2f[] t4 = [(-1.707, 1.707), (2.23, 4.45), (1.707, -1.707), (-2.23, 4.45)]
    custom texCoord2f[] t5 = []
    custom texCoord2f t6 = (inf, -inf)
}

def MfScope "texCoord2h_tests"
{
    custom texCoord2h blocked = None
    custom texCoord2h t0 = (1, 2)
    custom texCoord2h t1 = (-4.12345, 4.12345)
    custom texCoord2h[] t3 = [(-1.707, 1.707), (2.23, 4.45)]
    custom texCoord2h[] t4 = [(-1.707, 1.707), (2.23, 4.45), (1.707, -1.707), (-2.23, 4.45)]
    custom texCoord2h[] t5 = []
    custom texCoord2h t6 = (inf, -inf)
}

def MfScope "texCoord3d_tests"
{
    custom texCoord3d blocked = None
    custom texCoord3d t0 = (0, 1, 2)
    custom texCoord3d t1 = (-3.12345678910111, 0.707, 0.123)
    custom texCoord3d[] t3 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303)]
    custom texCoord3d[] t4 = [(-0.707, 0.707, 9.303), (1.23, 3.45, 9.303), (0.707, -0.707, 9.303), (-1.23, 3.45, 9.303)]
    custom texCoord3d[] t5 = []
    custom texCoord3d t6 = (inf, -inf, inf)
}

def MfScope "texCoord3f_tests"
{
    custom texCoord3f blocked = None
    custom texCoord3f t0 = (1, 2, 3)
    custom texCoord3f t1 = (-4.12345, 1.707, 2.123)
    custom texCoord3f[] t3 = [(-1.707, 1.707, 10.303), (2.23, 4.45, 10.303)]
    custom texCoord3f[] t4 = [(-1.707, 1.707, 10.303), (2.23, 4.45, 10.303), (1.707, -1.707, 10.303), (-2.23, 3.45, 10.303)]
    custom texCoord3f[] t5 = []
    custom texCoord3f t6 = (inf, -inf, inf)
}

def MfScope "texCoord3h_tests"
{
    custom texCoord3h blocked = None
    custom texCoord3h t0 = (1, 2, 3)
    custom texCoord3h t1 = (-4.12345, 1.707, 2.123)
    custom texCoord3h[] t3 = [(-1.707, 1.707, 10.303), (2.23, 4.45, 10.303)]
    custom texCoord3h[] t4 = [(-1.707, 1.707, 10.303), (2.23, 4.45, 10.303), (1.707, -1.707, 10.303), (-2.23, 3.45, 10.303)]
    custom texCoord3h[] t5 = []
    custom texCoord3h t6 = (inf, -inf, inf)
}

def MfScope "string_tests"
{
    custom string blocked = None
    custom string c0 = ""
    custom string c1 = ""
    custom string c2 = ""
    custom string c3 = ""
    custom string c4 = "foo"
    custom string c5 = "foo"
    custom string c6 = "foo"
    custom string c7 = "foo"
    custom string c8 = "fo\\"o"
    custom string c9 = "fo\\"o"
    custom string c10 = "fo'o"
    custom string c11 = "fo'o"
    custom string c12 = "fo\\"o"
    custom string c13 = "fo'o"
    custom string c14 = "fo'o''o\\"o\\"\\"o"
    custom string c15 = "fo\\"o"
    custom string c16 = "fo'o"
    custom string c17 = "fo'o''o\\"o\\"\\"o"
    custom string c18 = "fo\\"o"
    custom string c19 = "fo'o"
}

def MfScope "token_tests"
{
    custom token blocked = None
    custom token c0 = ""
    custom token c1 = ""
    custom token c2 = ""
    custom token c3 = ""
    custom token c4 = "foo"
    custom token c5 = "foo"
    custom token c6 = "foo"
    custom token c7 = "foo"
    custom token c8 = "fo\\"o"
    custom token c9 = "fo\\"o"
    custom token c10 = "fo'o"
    custom token c11 = "fo'o"
    custom token c12 = "fo\\"o"
    custom token c13 = "fo'o"
    custom token c14 = "fo'o''o\\"o\\"\\"o"
    custom token c15 = "fo\\"o"
    custom token c16 = "fo'o"
    custom token c17 = "fo'o''o\\"o\\"\\"o"
    custom token c18 = "fo\\"o"
    custom token c19 = "fo'o"
}

def MfScope "asset_path_tests"
{
    custom asset a0 = @relative.sdf@
    custom asset a1 = @./relative.sdf@
    custom asset a2 = @../relative.sdf@
    custom asset a3 = @subdir/relative.sdf@
    custom asset a4 = @/usr/anim/absolute.sdf@
    custom asset a5 = @//show/path.sdf@
    custom asset a6 = @///overlay/path.sdf@
    custom asset a7 = @//$STAGEDIR/path.sdf@
    custom asset blocked = None
}
