//
// Copyright 2020 benmalartre
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
#include "pxr/pxr.h"
#include "data.h"
#include "fileFormat.h"
#include "pxr/usd/sdf/fileIO.h"
#include "pxr/usd/sdf/fileIO_Common.h"
#include "pxr/usd/sdf/layer.h"
#include "pxr/usd/pcp/dynamicFileFormatContext.h"
#include "pxr/usd/ar/asset.h"
#include "pxr/usd/ar/resolver.h"
#include "pxr/base/trace/trace.h"
#include "pxr/base/tf/atomicOfstreamWrapper.h"
#include "pxr/base/tf/envSetting.h"
#include "pxr/base/tf/fileUtils.h"
#include "pxr/base/tf/registryManager.h"
#include "pxr/base/tf/staticData.h"
#include "pxr/base/arch/fileSystem.h"

#include <boost/assign.hpp>
#include <ostream>

#include <fstream>
#include <string>
#include <iostream>

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(
    UsdAnimXFileFormatTokens, 
    USD_ANIMX_FILE_FORMAT_TOKENS);

TF_REGISTRY_FUNCTION(TfType)
{
    SDF_DEFINE_FILE_FORMAT(UsdAnimXFileFormat, SdfFileFormat);
}

UsdAnimXFileFormat::UsdAnimXFileFormat()
    : SdfFileFormat(
        UsdAnimXFileFormatTokens->Id,
        UsdAnimXFileFormatTokens->Version,
        UsdAnimXFileFormatTokens->Target,
        UsdAnimXFileFormatTokens->Extension)
{
}

UsdAnimXFileFormat::~UsdAnimXFileFormat()
{
}

SdfAbstractDataRefPtr
UsdAnimXFileFormat::InitData(
    const FileFormatArguments &args) const
{
    std::cout << "USD ANIM X INIT DATA !!!" << std::endl;
    return UsdAnimXData::New();
}

bool
UsdAnimXFileFormat::CanRead(const std::string& filePath) const
{
    return true;
}

bool
UsdAnimXFileFormat::Read(
    SdfLayer *layer,
    const std::string &resolvedPath,
    bool metadataOnly) const
{
    if (!TF_VERIFY(layer)) {
        return false;
    }

    // Enforce that the layer is read only.
    layer->SetPermissionToSave(true);
    layer->SetPermissionToEdit(true);

    std::cout << "ANIM X READ FILE : " << resolvedPath << std::endl;

    SdfAbstractDataRefPtr data = InitData(layer->GetFileFormatArguments());
    UsdAnimXDataRefPtr animXData = TfStatic_cast<UsdAnimXDataRefPtr>(data);
    //animXData->Initialize(resolvedPath);
    /*

    UsdAnimXDataRefPtr animXData = TfStatic_cast<UsdAnimXDataRefPtr>(data);
    if (!animXData->Open(resolvedPath)) {
        return false;
    }
    */

    std::shared_ptr <ArAsset> asset = ArGetResolver().OpenAsset(resolvedPath);
    if (!asset) {
        TF_RUNTIME_ERROR("Failed to open file \"%s\"", resolvedPath.c_str());
        return false;
    }

    std::string error;
    animXData->Initialize(resolvedPath);
    _SetLayerData(layer, data);

    //_InitFromFile(const std::string& filename)
    
    
    /*
    if (!_ReadFromChars(layer, asset->GetBuffer().get(), asset->GetSize(),
                        metadataOnly, &error)) {
        TF_RUNTIME_ERROR("Failed to read from Draco file \"%s\": %s",
            resolvedPath.c_str(), error.c_str());
        return false;
    }
    return true;
    */
    return true;
}


bool 
UsdAnimXFileFormat::Write(const SdfLayer& layer, std::ostream& ostr,
    const std::string& comment) const
{
    std::cout << "ANIMX FILEFORMAT WRITE !!!" << std::endl;
    return false;
}

bool 
UsdAnimXFileFormat::WriteToStream(const SdfLayer& layer, std::ostream& ostr) const
{
    std::cout << "ANIMX FILEFORMAT WRITE TO STREAM !!!" << std::endl;
    return false;
}

bool 
UsdAnimXFileFormat::WriteToFile(
        const SdfLayer& layer,
        const std::string& filePath,
        const std::string& comment,
        const FileFormatArguments& args) const
{
    std::cout << "ANIMX FILEFORMAT WRITE TO FILE !!!" << std::endl;
    return false;
}

bool 
UsdAnimXFileFormat::ReadFromString(
        SdfLayer* layer,
        const std::string& str) const
{
    std::cout << "ANIMX FILEFORMAT READ FROM STRING !!!" << std::endl;
    return false;
}

bool 
UsdAnimXFileFormat::WriteToString(
        const SdfLayer& layer,
        std::string* str,
        const std::string& comment) const
{
    std::cout << "ANIMX FILEFORMAT WRITE TO STRING !!!" << std::endl;
    return false;
}

bool 
UsdAnimXFileFormat::WriteToStream(
        const SdfSpecHandle &spec,
        std::ostream& out,
        size_t indent) const
{
    std::cout << "ANIMX FILEFORMAT WRITE TO STREAM !!!" << std::endl;
    return false;
}


PXR_NAMESPACE_CLOSE_SCOPE



