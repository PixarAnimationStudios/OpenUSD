#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class "TestMultiApplyAPI" (
    doc = "Test multi-apply API schema"
)
{
    uniform bool multi:__INSTANCE_NAME__:bool_attr = 1 (
        doc = "Boolean attribute"
    )
    rel multi:__INSTANCE_NAME__:relationship (
        doc = "Relationship"
    )
    uniform token multi:__INSTANCE_NAME__:token_attr = "foo" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = "Token attribute"
    )
}

class "TestSingleApplyAPI" (
    doc = "Test single apply API schema"
)
{
    uniform bool single:bool_attr = 1 (
        doc = "Boolean attribute"
    )
    rel single:relationship (
        doc = "Relationship"
    )
    uniform token single:token_attr = "bar" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = "Token attribute"
    )
}

class "TestSingleCanApplyAPI" (
    doc = "Test single apply API schema with canOnlyApplyTo restrictions"
)
{
    uniform bool singleCan:bool_attr = 1 (
        doc = "Boolean attribute"
    )
    rel singleCan:relationship (
        doc = "Relationship"
    )
    uniform token singleCan:token_attr = "bar" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = "Token attribute"
    )
}

class "TestMultiCanApplyAPI" (
    doc = "Test multi-apply API schema with instance name and canOnlyApplyTo restrictions"
)
{
    uniform bool multi:__INSTANCE_NAME__:bool_attr = 1 (
        doc = "Boolean attribute"
    )
    rel multi:__INSTANCE_NAME__:relationship (
        doc = "Relationship"
    )
    uniform token multi:__INSTANCE_NAME__:token_attr = "foo" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = "Token attribute"
    )
}

class TestTypedSchema "TestTypedSchema" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestWithBuiltinAppliedSchema "TestWithBuiltinAppliedSchema" (
    apiSchemas = ["TestSingleApplyAPI", "TestMultiApplyAPI:builtin"]
    doc = "Test with built-in API schemas"
    hidden = false
)
{
    uniform bool multi:builtin:bool_attr = 0 (
        doc = "Override bool_attr from TestMultiApplyAPI:builtin"
    )
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestTypedSchemaForAutoApply "TestTypedSchemaForAutoApply" (
    apiSchemas = ["TestMultiApplyAPI:builtin"]
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestTypedSchemaForAutoApplyConcreteBase "TestTypedSchemaForAutoApplyConcreteBase" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestDerivedTypedSchemaForAutoApplyConcreteBase "TestDerivedTypedSchemaForAutoApplyConcreteBase" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class "TestTypedSchemaForAutoApplyAbstractBase" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestDerivedTypedSchemaForAutoApplyAbstractBase "TestDerivedTypedSchemaForAutoApplyAbstractBase" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class "TestNestedInnerSingleApplyAPI" (
    apiSchemas = ["TestSingleApplyAPI", "TestMultiApplyAPI:bar"]
    doc = "Test nested single apply API schema: inner schema"
)
{
    uniform int innerSingle:int_attr = 3 (
        doc = "Int attribute"
    )
    rel innerSingle:relationship (
        doc = "Relationship"
    )
    uniform token innerSingle:token_attr = "inner" (
        doc = "Token attribute"
    )
    token multi:bar:token_attr = "inner_override" (
        doc = "Override of TestMultiApplyAPI:bar token_attr"
    )
}

class "TestNestedOuterSingleApplyAPI" (
    apiSchemas = ["TestMultiApplyAPI:foo", "TestNestedInnerSingleApplyAPI"]
    doc = "Test nested single apply API schema: outer schema"
)
{
    uniform int outerSingle:int_attr = 4 (
        doc = "Int attribute"
    )
    rel outerSingle:relationship (
        doc = "Relationship"
    )
    uniform token outerSingle:token_attr = "outer" (
        doc = "Token attribute"
    )
    token single:token_attr = "outer_override" (
        doc = "Override of TestSingleApplyAPI token_attr"
    )
}

class "TestNestedInnerMultiApplyBaseAPI" (
    doc = "Test nested multi apply API schema: inner schema base class"
)
{
    uniform int innerMulti:__INSTANCE_NAME__:int_attr = 3 (
        doc = "Int attribute"
    )
    rel innerMulti:__INSTANCE_NAME__:relationship (
        doc = "Relationship"
    )
    uniform token innerMulti:__INSTANCE_NAME__:token_attr = "inner_base" (
        doc = "Token attribute"
    )
}

class "TestNestedInnerMultiApplyDerivedAPI" (
    apiSchemas = ["TestNestedInnerMultiApplyBaseAPI:__INSTANCE_NAME__"]
    doc = "Test nested multi apply API schema: inner schema derived"
)
{
    uniform int innerMulti:__INSTANCE_NAME__:derived:int_attr = 4 (
        doc = "Int attribute"
    )
    uniform token innerMulti:__INSTANCE_NAME__:token_attr = "inner_derived" (
        doc = "Override of TestNestedInnerMultiApplyBaseAPI token_attr"
    )
}

class "TestNestedOuterMultiApplyAPI" (
    apiSchemas = ["TestNestedInnerMultiApplyDerivedAPI:__INSTANCE_NAME__:builtin", "TestNestedInnerMultiApplyDerivedAPI:__INSTANCE_NAME__:outerMulti", "TestNestedInnerMultiApplyBaseAPI:__INSTANCE_NAME__"]
    doc = "Test nested multi apply API schema: outer schema"
)
{
    uniform int outerMulti:__INSTANCE_NAME__:int_attr = 5 (
        doc = "Int attribute"
    )
    rel outerMulti:__INSTANCE_NAME__:relationship (
        doc = "Relationship"
    )
    uniform token outerMulti:__INSTANCE_NAME__:token_attr = "outer" (
        doc = "Token attribute"
    )
}

class "TestNestedMultiApplyInSingleApplyAPI" (
    apiSchemas = ["TestNestedOuterMultiApplyAPI:foo", "TestNestedInnerMultiApplyDerivedAPI:bar"]
    doc = "Test single apply API with builtin nested multi apply API schema instances"
)
{
    uniform int innerMulti:bar:int_attr = 30 (
        doc = "Override of int attribute"
    )
    uniform int innerMulti:foo:builtin:derived:int_attr = 20 (
        doc = "Override of int attribute"
    )
    uniform int int_attr = 10 (
        doc = "Int attribute"
    )
}

class "TestNestedCycle1API" (
    apiSchemas = ["TestNestedCycle2API"]
    doc = "Test nested single apply API schema with a cycle #1"
)
{
    uniform token cycle1:token_attr = "cycle1" (
        doc = "Token attribute"
    )
    uniform int cycle:int_attr = 1 (
        doc = "Int attribute"
    )
}

class "TestNestedCycle2API" (
    apiSchemas = ["TestNestedCycle3API"]
    doc = "Test nested single apply API schema with a cycle #2"
)
{
    uniform token cycle2:token_attr = "cycle2" (
        doc = "Token attribute"
    )
    uniform int cycle:int_attr = 2 (
        doc = "Int attribute"
    )
}

class "TestNestedCycle3API" (
    apiSchemas = ["TestNestedCycle1API"]
    doc = "Test nested single apply API schema with a cycle #3"
)
{
    uniform token cycle3:token_attr = "cycle3" (
        doc = "Token attribute"
    )
    uniform int cycle:int_attr = 3 (
        doc = "Int attribute"
    )
}

class TestWithBuiltinNestedAppliedSchema "TestWithBuiltinNestedAppliedSchema" (
    apiSchemas = ["TestNestedOuterSingleApplyAPI", "TestNestedCycle1API"]
    doc = "Test with built-in nested API schemas"
    hidden = false
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class "TestAutoAppliedToAPI" (
    apiSchemas = ["TestMultiApplyAPI:builtin"]
    doc = "API that has other API schemas that auto apply to it"
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class "TestNestedAutoAppliedToAPI" (
    apiSchemas = ["TestMultiApplyAPI:foo"]
    doc = """
API that TestAutoAppliedToAPI auto applies to for testing that API schemas can 
be nested through auto apply"""
)
{
}

class TestNestedAutoAppliedToAPIAppliedToPrim "TestNestedAutoAppliedToAPIAppliedToPrim" (
    doc = """
Typed schema that TestNestedAutoAppliedToAPI auto applies to for testing that 
API schemas with auto applied API schemas can be correctly auto applied to prim
type schemas"""
)
{
}

class "TestNestedMultiApplyCycle1API" (
    apiSchemas = ["TestNestedMultiApplyCycle2API:__INSTANCE_NAME__:cycle1", "TestNestedMultiApplyCycle3API:__INSTANCE_NAME__"]
    doc = "Test nested multi apply API schema cycle"
)
{
    uniform token cycle1:__INSTANCE_NAME__:token_attr = "cycle1" (
        doc = "Token attribute"
    )
}

class "TestNestedMultiApplyCycle2API" (
    apiSchemas = ["TestNestedMultiApplyCycle3API:__INSTANCE_NAME__:cycle2", "TestNestedMultiApplyCycle1API:__INSTANCE_NAME__"]
    doc = "Test nested multi apply API schema cycle"
)
{
    uniform token cycle2:__INSTANCE_NAME__:token_attr = "cycle2" (
        doc = "Token attribute"
    )
}

class "TestNestedMultiApplyCycle3API" (
    apiSchemas = ["TestNestedMultiApplyCycle1API:__INSTANCE_NAME__:cycle3", "TestNestedMultiApplyCycle2API:__INSTANCE_NAME__"]
    doc = "Test nested multi apply API schema cycle"
)
{
    uniform token cycle3:__INSTANCE_NAME__:token_attr = "cycle3" (
        doc = "Token attribute"
    )
}

class TestPropTypeConflictsPrim "TestPropTypeConflictsPrim" (
    apiSchemas = ["TestPropTypeConflictBuiltinAPI"]
)
{
    int attr1 = 1 (
        doc = "From TestPropTypeConflictsPrim"
    )
    int attr2 = 2 (
        doc = "From TestPropTypeConflictsPrim"
    )
    int attr3 = 3 (
        doc = "From TestPropTypeConflictsPrim"
    )
    color3f attr5 = (1, 1, 1) (
        doc = "From TestPropTypeConflictsPrim"
    )
    int attr6 = 6 (
        doc = "From TestPropTypeConflictsPrim"
    )
    rel rel1 (
        doc = "From TestPropTypeConflictsPrim"
    )
    int rel2 (
        doc = "From TestPropTypeConflictsPrim"
    )
}

class "TestPropTypeConflictBuiltinAPI"
{
    double attr2 = 0 (
        doc = "From TestPropTypeConflictBuiltinAPI"
    )
    int attr4 = 4 (
        doc = "From TestPropTypeConflictBuiltinAPI"
    )
    int rel1 (
        doc = "From TestPropTypeConflictBuiltinAPI"
    )
    rel rel2 (
        doc = "From TestPropTypeConflictBuiltinAPI"
    )
}

class "TestPropTypeConflictAuthoredOneAPI"
{
    int attr1 = 0 (
        doc = "From TestPropTypeConflictAuthoredOneAPI"
    )
    double attr2 = 0 (
        doc = "From TestPropTypeConflictAuthoredOneAPI"
    )
    point3f attr5 = (0, 0, 0) (
        doc = "From TestPropTypeConflictAuthoredOneAPI"
    )
    int attr6 = 20 (
        doc = "From TestPropTypeConflictAuthoredOneAPI"
    )
    int rel1 (
        doc = "From TestPropTypeConflictAuthoredOneAPI"
    )
    rel rel2 (
        doc = "From TestPropTypeConflictAuthoredOneAPI"
    )
}

class "TestPropTypeConflictAuthoredTwoAPI"
{
    int attr3 = 10 (
        doc = "From TestPropTypeConflictAuthoredTwoAPI"
    )
    string attr4 = "foo" (
        doc = "From TestPropTypeConflictAuthoredTwoAPI"
    )
    float3 attr5 = (1, 2, 3) (
        doc = "From TestPropTypeConflictAuthoredTwoAPI"
    )
    int attr6 = 10 (
        doc = "From TestPropTypeConflictAuthoredTwoAPI"
    )
    rel rel1 (
        doc = "From TestPropTypeConflictAuthoredTwoAPI"
    )
    int rel2 (
        doc = "From TestPropTypeConflictAuthoredTwoAPI"
    )
}

class "TestPropTypeConflictNestedAuthoredAPI" (
    apiSchemas = ["TestPropTypeConflictAuthoredOneAPI"]
)
{
    int attr1 = 1 (
        doc = "From TestPropTypeConflictNestedAuthoredAPI"
    )
    int attr2 = 2 (
        doc = "From TestPropTypeConflictNestedAuthoredAPI"
    )
    int attr3 = 3 (
        doc = "From TestPropTypeConflictNestedAuthoredAPI"
    )
    int attr4 = 4 (
        doc = "From TestPropTypeConflictNestedAuthoredAPI"
    )
    color3f attr5 = (1, 1, 1) (
        doc = "From TestPropTypeConflictNestedAuthoredAPI"
    )
    token attr6 = "bar" (
        doc = "From TestPropTypeConflictNestedAuthoredAPI"
    )
    rel rel1 (
        doc = "From TestPropTypeConflictNestedAuthoredAPI"
    )
    int rel2 (
        doc = "From TestPropTypeConflictNestedAuthoredAPI"
    )
}

