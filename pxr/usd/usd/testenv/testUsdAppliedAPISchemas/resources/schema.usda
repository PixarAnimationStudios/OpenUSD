#usda 1.0
(
    "Test schema file for testUsdAppliedAPISchemas"
    subLayers = [
        @usd/schema.usda@
    ]
)

def "GLOBAL" (
    customData = {
        string libraryName      = "testUsdAppliedAPISchemas"
        string libraryPath      = "pxr/usd/usd"
        bool skipCodeGeneration = true
    }
)
{
}

class "TestMultiApplyAPI"
(
    inherits = </APISchemaBase>
    doc = """Test multi-apply API schema"""

    customData = {
        token apiSchemaType = "multipleApply"
        token propertyNamespacePrefix  = "multi"
    }
)
{
    uniform token token_attr = "foo" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = """Token attribute"""
    )
    uniform bool bool_attr = true (
        doc = """Boolean attribute"""
    )
    rel relationship (
        doc = """Relationship"""
    )
}

class "TestSingleApplyAPI"
(
    inherits = </APISchemaBase>
    customData = {
        string className = "SingleApplyAPI"
        token[] apiSchemaAutoApplyTo = [
            "TestTypedSchemaForAutoApplyConcreteBase", 
            "TestTypedSchemaForAutoApplyAbstractBase",
            "TestAutoAppliedToAPI"
        ] 
    }
    doc = """Test single apply API schema"""
)
{
    uniform token single:token_attr = "bar" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = """Token attribute"""
    )
    uniform bool single:bool_attr = true (
        doc = """Boolean attribute"""
    )
    rel single:relationship (
        doc = """Relationship"""
    )
}

class "TestSingleCanApplyAPI"
(
    inherits = </APISchemaBase>
    customData = {
        string className = "SingleCanApplyAPI"
        token[] apiSchemaCanOnlyApplyTo = [
            "TestTypedSchemaForAutoApply", 
            "TestTypedSchemaForAutoApplyConcreteBase", 
        ] 
    }
    doc = """Test single apply API schema with canOnlyApplyTo restrictions"""
)
{
    uniform token singleCan:token_attr = "bar" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = """Token attribute"""
    )
    uniform bool singleCan:bool_attr = true (
        doc = """Boolean attribute"""
    )
    rel singleCan:relationship (
        doc = """Relationship"""
    )
}

class "TestMultiCanApplyAPI"
(
    inherits = </APISchemaBase>
    doc = """Test multi-apply API schema with instance name and canOnlyApplyTo restrictions"""

    customData = {
        token apiSchemaType = "multipleApply"
        token propertyNamespacePrefix  = "multi"
        token[] apiSchemaAllowedInstanceNames = ["foo", "bar", "baz"]
        token[] apiSchemaCanOnlyApplyTo = [
            "TestTypedSchemaForAutoApply", 
            "TestTypedSchemaForAutoApplyAbstractBase"
        ] 
        dictionary apiSchemaInstances = {
            dictionary foo = {
                token[] apiSchemaCanOnlyApplyTo = [
                    "TestTypedSchemaForAutoApply", 
                    "TestTypedSchemaForAutoApplyConcreteBase"
                ] 
            }
            dictionary bar = {
                token[] apiSchemaCanOnlyApplyTo = [
                    "TestTypedSchemaForAutoApplyAbstractBase", 
                    "TestTypedSchemaForAutoApplyConcreteBase"
                ] 
            }
        }
    }
)
{
    uniform token token_attr = "foo" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = """Token attribute"""
    )
    uniform bool bool_attr = true (
        doc = """Boolean attribute"""
    )
    rel relationship (
        doc = """Relationship"""
    )
}

class TestTypedSchema "TestTypedSchema" (
    inherits = </Typed>
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )

    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestWithBuiltinAppliedSchema "TestWithBuiltinAppliedSchema" (
    inherits = </Typed>
    doc = """Test with built-in API schemas"""
    prepend apiSchemas = ["TestSingleApplyAPI", "TestMultiApplyAPI:builtin"]
    hidden = false
)
{
    uniform bool multi:builtin:bool_attr = false (
        doc = """Override bool_attr from TestMultiApplyAPI:builtin"""
    )
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )

    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestTypedSchemaForAutoApply "TestTypedSchemaForAutoApply" (
    inherits = </Typed>
    doc = "Testing typed schema"
    hidden = true
    prepend apiSchemas = ["TestMultiApplyAPI:builtin"]
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )

    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestTypedSchemaForAutoApplyConcreteBase "TestTypedSchemaForAutoApplyConcreteBase" (
    inherits = </Typed>
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )

    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestDerivedTypedSchemaForAutoApplyConcreteBase "TestDerivedTypedSchemaForAutoApplyConcreteBase" (
    inherits = </TestTypedSchemaForAutoApplyConcreteBase>
    doc = "Testing typed schema"
    hidden = true
)
{
}

class "TestTypedSchemaForAutoApplyAbstractBase" (
    inherits = </Typed>
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )

    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestDerivedTypedSchemaForAutoApplyAbstractBase "TestDerivedTypedSchemaForAutoApplyAbstractBase" (
    inherits = </TestTypedSchemaForAutoApplyAbstractBase>
    doc = "Testing typed schema"
    hidden = true
)
{
}

class "TestNestedInnerSingleApplyAPI"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestSingleApplyAPI",
                          "TestMultiApplyAPI:bar"]
    customData = {
        string className = "NestedInnerSingleApplyAPI"
    }
    doc = """Test nested single apply API schema: inner schema"""
)
{
    uniform token innerSingle:token_attr = "inner" (
        doc = """Token attribute"""
    )
    uniform int innerSingle:int_attr = 3 (
        doc = """Int attribute"""
    )
    rel innerSingle:relationship (
        doc = """Relationship"""
    )
    token multi:bar:token_attr = "inner_override" (
        doc = """Override of TestMultiApplyAPI:bar token_attr"""
    )
}

class "TestNestedOuterSingleApplyAPI"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestMultiApplyAPI:foo", 
                          "TestNestedInnerSingleApplyAPI"]
    customData = {
        string className = "NestedOuterSingleApplyAPI"
    }
    doc = """Test nested single apply API schema: outer schema"""
)
{
    uniform token outerSingle:token_attr = "outer" (
        doc = """Token attribute"""
    )
    uniform int outerSingle:int_attr = 4 (
        doc = """Int attribute"""
    )
    rel outerSingle:relationship (
        doc = """Relationship"""
    )
    token single:token_attr = "outer_override" (
        doc = """Override of TestSingleApplyAPI token_attr"""
    )

}

class "TestNestedInnerMultiApplyBaseAPI"
(
    inherits = </APISchemaBase>
    customData = {
        token apiSchemaType = "multipleApply"
        token propertyNamespacePrefix  = "innerMulti"
        string className = "NestedInnerMultiApplyBaseAPI"
    }
    doc = """Test nested multi apply API schema: inner schema base class"""
)
{
    uniform token token_attr = "inner_base" (
        doc = """Token attribute"""
    )
    uniform int int_attr = 3 (
        doc = """Int attribute"""
    )
    rel relationship (
        doc = """Relationship"""
    )
}

class "TestNestedInnerMultiApplyDerivedAPI"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedInnerMultiApplyBaseAPI"]
    customData = {
        token apiSchemaType = "multipleApply"
        token propertyNamespacePrefix  = "innerMulti"
        string className = "NestedInnerMultiApplyDerivedAPI"
    }
    doc = """Test nested multi apply API schema: inner schema derived"""
)
{
    uniform token token_attr = "inner_derived" (
        doc = """Override of TestNestedInnerMultiApplyBaseAPI token_attr"""
    )
    uniform int derived:int_attr = 4 (
        doc = """Int attribute"""
    )
}

class "TestNestedOuterMultiApplyAPI"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedInnerMultiApplyDerivedAPI:builtin", 
                  "TestNestedInnerMultiApplyDerivedAPI:outerMulti",
                  "TestNestedInnerMultiApplyBaseAPI"]
    customData = {
        token apiSchemaType = "multipleApply"
        token propertyNamespacePrefix  = "outerMulti"
        string className = "NestedOuterMultiApplyAPI"
    }
    doc = """Test nested multi apply API schema: outer schema"""
)
{
    uniform token token_attr = "outer" (
        doc = """Token attribute"""
    )
    uniform int int_attr = 5 (
        doc = """Int attribute"""
    )
    rel relationship (
        doc = """Relationship"""
    )
}

class "TestNestedMultiApplyInSingleApplyAPI"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedOuterMultiApplyAPI:foo", 
                  "TestNestedInnerMultiApplyDerivedAPI:bar"]
    customData = {
        string className = "NestedMultiApplyInSingleApplyAPI"
    }
    doc = """Test single apply API with builtin nested multi apply API schema instances"""
)
{
    uniform int int_attr = 10 (
        doc = """Int attribute"""
    )
    uniform int innerMulti:foo:builtin:derived:int_attr = 20 (
        doc = """Override of int attribute"""
    )
    uniform int innerMulti:bar:int_attr = 30 (
        doc = """Override of int attribute"""
    )
}

class "TestNestedCycle1API"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedCycle2API"]
    customData = {
        string className = "NestedCycle1API"
    }
    doc = """Test nested single apply API schema with a cycle #1"""
)
{
    uniform token cycle1:token_attr = "cycle1" (
        doc = """Token attribute"""
    )
    uniform int cycle:int_attr = 1 (
        doc = """Int attribute"""
    )
}

class "TestNestedCycle2API"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedCycle3API"]
    customData = {
        string className = "NestedCycle2API"
    }
    doc = """Test nested single apply API schema with a cycle #2"""
)
{
    uniform token cycle2:token_attr = "cycle2" (
        doc = """Token attribute"""
    )
    uniform int cycle:int_attr = 2 (
        doc = """Int attribute"""
    )
}

class "TestNestedCycle3API"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedCycle1API"]
    customData = {
        string className = "NestedCycle3API"
    }
    doc = """Test nested single apply API schema with a cycle #3"""
)
{
    uniform token cycle3:token_attr = "cycle3" (
        doc = """Token attribute"""
    )
    uniform int cycle:int_attr = 3 (
        doc = """Int attribute"""
    )
}

class TestWithBuiltinNestedAppliedSchema "TestWithBuiltinNestedAppliedSchema" (
    inherits = </Typed>
    doc = """Test with built-in nested API schemas"""
    prepend apiSchemas = ["TestNestedOuterSingleApplyAPI", "TestNestedCycle1API"]
    hidden = false
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )

    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class "TestAutoAppliedToAPI" (
    inherits = </APISchemaBase>
    doc = "API that has other API schemas that auto apply to it"
    prepend apiSchemas = ["TestMultiApplyAPI:builtin"]
    customData = {
        token[] apiSchemaAutoApplyTo = ["TestNestedAutoAppliedToAPI"] 
    }
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )

    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class "TestNestedAutoAppliedToAPI" (
    inherits = </APISchemaBase>
    doc = """
API that TestAutoAppliedToAPI auto applies to for testing that API schemas can 
be nested through auto apply"""
    prepend apiSchemas = ["TestMultiApplyAPI:foo"]
    customData = {
        token[] apiSchemaAutoApplyTo = ["TestNestedAutoAppliedToAPIAppliedToPrim"] 
    }
)
{
}

class TestNestedAutoAppliedToAPIAppliedToPrim "TestNestedAutoAppliedToAPIAppliedToPrim" (
    inherits = </Typed>
    doc = """
Typed schema that TestNestedAutoAppliedToAPI auto applies to for testing that 
API schemas with auto applied API schemas can be correctly auto applied to prim
type schemas"""
)
{
}

class "TestNestedMultiApplyCycle1API"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedMultiApplyCycle2API:cycle1",
                          "TestNestedMultiApplyCycle3API"]
    customData = {
        token apiSchemaType = "multipleApply"
        token propertyNamespacePrefix  = "cycle1"
        string className = "NestedMultiApplyCycle1API"
    }
    doc = """Test nested multi apply API schema cycle"""
)
{
    uniform token token_attr = "cycle1" (
        doc = """Token attribute"""
    )
}

class "TestNestedMultiApplyCycle2API"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedMultiApplyCycle3API:cycle2",
                          "TestNestedMultiApplyCycle1API"]
    customData = {
        token apiSchemaType = "multipleApply"
        token propertyNamespacePrefix  = "cycle2"
        string className = "NestedMultiApplyCycle2API"
    }
    doc = """Test nested multi apply API schema cycle"""
)
{
    uniform token token_attr = "cycle2" (
        doc = """Token attribute"""
    )
}

class "TestNestedMultiApplyCycle3API"
(
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestNestedMultiApplyCycle1API:cycle3",
                          "TestNestedMultiApplyCycle2API"]
    customData = {
        token apiSchemaType = "multipleApply"
        token propertyNamespacePrefix  = "cycle3"
        string className = "NestedMultiApplyCycle3API"
    }
    doc = """Test nested multi apply API schema cycle"""
)
{
    uniform token token_attr = "cycle3" (
        doc = """Token attribute"""
    )
}

class TestPropTypeConflictsPrim "TestPropTypeConflictsPrim" (
    inherits = </Typed>
    prepend apiSchemas = ["TestPropTypeConflictBuiltinAPI"]
)
{
    int attr1 = 1 ( doc = "From TestPropTypeConflictsPrim" )
    int attr2 = 2 ( doc = "From TestPropTypeConflictsPrim" )
    int attr3 = 3 ( doc = "From TestPropTypeConflictsPrim" )
    color3f attr5 = (1, 1, 1) ( doc = "From TestPropTypeConflictsPrim" )
    int attr6 = 6 ( doc = "From TestPropTypeConflictsPrim" )
    rel rel1 ( doc = "From TestPropTypeConflictsPrim" )
    int rel2 ( doc = "From TestPropTypeConflictsPrim" )
}

class "TestPropTypeConflictBuiltinAPI" (
    inherits = </APISchemaBase>
)
{
    double attr2 = 0.0 ( doc = "From TestPropTypeConflictBuiltinAPI" )
    int attr4 = 4 ( doc = "From TestPropTypeConflictBuiltinAPI" )
    int rel1 ( doc = "From TestPropTypeConflictBuiltinAPI" )
    rel rel2 ( doc = "From TestPropTypeConflictBuiltinAPI" )
}

class "TestPropTypeConflictAuthoredOneAPI" (
    inherits = </APISchemaBase>
)
{
    int attr1 = 0 ( doc = "From TestPropTypeConflictAuthoredOneAPI" )
    double attr2 = 0.0 ( doc = "From TestPropTypeConflictAuthoredOneAPI" )
    point3f attr5 = (0, 0, 0) ( doc = "From TestPropTypeConflictAuthoredOneAPI" )
    int attr6 = 20 ( doc = "From TestPropTypeConflictAuthoredOneAPI" )
    int rel1 ( doc = "From TestPropTypeConflictAuthoredOneAPI" )
    rel rel2 ( doc = "From TestPropTypeConflictAuthoredOneAPI" )
}

class "TestPropTypeConflictAuthoredTwoAPI" (
    inherits = </APISchemaBase>
    customData = {
        token[] apiSchemaAutoApplyTo = [
           "TestPropTypeConflictNestedAuthoredAPI"] 
    }
)
{
    int attr3 = 10 ( doc = "From TestPropTypeConflictAuthoredTwoAPI" )
    string attr4 = "foo" ( doc = "From TestPropTypeConflictAuthoredTwoAPI" )
    float3 attr5 = (1, 2, 3) ( doc = "From TestPropTypeConflictAuthoredTwoAPI" )
    int attr6 = 10 ( doc = "From TestPropTypeConflictAuthoredTwoAPI" )
    rel rel1 ( doc = "From TestPropTypeConflictAuthoredTwoAPI" )
    int rel2 ( doc = "From TestPropTypeConflictAuthoredTwoAPI" )
}

class "TestPropTypeConflictNestedAuthoredAPI" (
    inherits = </APISchemaBase>
    prepend apiSchemas = ["TestPropTypeConflictAuthoredOneAPI"]
)
{
    int attr1 = 1 ( doc = "From TestPropTypeConflictNestedAuthoredAPI" )
    int attr2 = 2 ( doc = "From TestPropTypeConflictNestedAuthoredAPI" )
    int attr3 = 3 ( doc = "From TestPropTypeConflictNestedAuthoredAPI" )
    int attr4 = 4 ( doc = "From TestPropTypeConflictNestedAuthoredAPI" )
    color3f attr5 = (1, 1, 1) ( doc = "From TestPropTypeConflictNestedAuthoredAPI" )
    token attr6 = "bar" ( doc = "From TestPropTypeConflictNestedAuthoredAPI" )
    rel rel1 ( doc = "From TestPropTypeConflictNestedAuthoredAPI" )
    int rel2 ( doc = "From TestPropTypeConflictNestedAuthoredAPI" )
}

