//
// Copyright 2016 Pixar
//
// Licensed under the terms set forth in the LICENSE.txt file available at
// https://openusd.org/license.
//
// GENERATED FILE.  DO NOT EDIT.
#include "pxr/external/boost/python/class.hpp"
#include "pxr/usd/usdContrived/tokens.h"

PXR_NAMESPACE_USING_DIRECTIVE

#define _ADD_TOKEN(cls, name) \
    cls.add_static_property(#name, +[]() { return UsdContrivedTokens->name.GetString(); });

void wrapUsdContrivedTokens()
{
    pxr_boost::python::class_<UsdContrivedTokensType, boost::noncopyable>
        cls("Tokens", pxr_boost::python::no_init);
    _ADD_TOKEN(cls, asset);
    _ADD_TOKEN(cls, assetArray);
    _ADD_TOKEN(cls, attrWithoutGeneratedAccessorAPI);
    _ADD_TOKEN(cls, binding);
    _ADD_TOKEN(cls, bool_);
    _ADD_TOKEN(cls, boolArray);
    _ADD_TOKEN(cls, color3d);
    _ADD_TOKEN(cls, color3dArray);
    _ADD_TOKEN(cls, color3f);
    _ADD_TOKEN(cls, color3fArray);
    _ADD_TOKEN(cls, color3h);
    _ADD_TOKEN(cls, color3hArray);
    _ADD_TOKEN(cls, color4d);
    _ADD_TOKEN(cls, color4dArray);
    _ADD_TOKEN(cls, color4f);
    _ADD_TOKEN(cls, color4fArray);
    _ADD_TOKEN(cls, color4h);
    _ADD_TOKEN(cls, color4hArray);
    _ADD_TOKEN(cls, cornerIndices);
    _ADD_TOKEN(cls, cornerSharpnesses);
    _ADD_TOKEN(cls, creaseLengths);
    _ADD_TOKEN(cls, double2);
    _ADD_TOKEN(cls, double2Array);
    _ADD_TOKEN(cls, double3);
    _ADD_TOKEN(cls, double3Array);
    _ADD_TOKEN(cls, double4);
    _ADD_TOKEN(cls, double4Array);
    _ADD_TOKEN(cls, double_);
    _ADD_TOKEN(cls, doubleArray);
    _ADD_TOKEN(cls, float2);
    _ADD_TOKEN(cls, float2Array);
    _ADD_TOKEN(cls, float3);
    _ADD_TOKEN(cls, float3Array);
    _ADD_TOKEN(cls, float4);
    _ADD_TOKEN(cls, float4Array);
    _ADD_TOKEN(cls, float_);
    _ADD_TOKEN(cls, floatArray);
    _ADD_TOKEN(cls, frame4d);
    _ADD_TOKEN(cls, frame4dArray);
    _ADD_TOKEN(cls, half);
    _ADD_TOKEN(cls, half2);
    _ADD_TOKEN(cls, half2Array);
    _ADD_TOKEN(cls, half3);
    _ADD_TOKEN(cls, half3Array);
    _ADD_TOKEN(cls, half4);
    _ADD_TOKEN(cls, half4Array);
    _ADD_TOKEN(cls, halfArray);
    _ADD_TOKEN(cls, holeIndices);
    _ADD_TOKEN(cls, int2);
    _ADD_TOKEN(cls, int2Array);
    _ADD_TOKEN(cls, int3);
    _ADD_TOKEN(cls, int3Array);
    _ADD_TOKEN(cls, int4);
    _ADD_TOKEN(cls, int4Array);
    _ADD_TOKEN(cls, int64);
    _ADD_TOKEN(cls, int64Array);
    _ADD_TOKEN(cls, int_);
    _ADD_TOKEN(cls, intArray);
    _ADD_TOKEN(cls, justDefault);
    _ADD_TOKEN(cls, libraryToken1);
    _ADD_TOKEN(cls, libraryToken2);
    _ADD_TOKEN(cls, matrix2d);
    _ADD_TOKEN(cls, matrix2dArray);
    _ADD_TOKEN(cls, matrix3d);
    _ADD_TOKEN(cls, matrix3dArray);
    _ADD_TOKEN(cls, matrix4d);
    _ADD_TOKEN(cls, matrix4dArray);
    _ADD_TOKEN(cls, myDouble);
    _ADD_TOKEN(cls, myUniformBool);
    _ADD_TOKEN(cls, myVaryingToken);
    _ADD_TOKEN(cls, myVaryingTokenArray);
    _ADD_TOKEN(cls, myVecfArray);
    _ADD_TOKEN(cls, namespacedProperty);
    _ADD_TOKEN(cls, newToken);
    _ADD_TOKEN(cls, normal3d);
    _ADD_TOKEN(cls, normal3dArray);
    _ADD_TOKEN(cls, normal3f);
    _ADD_TOKEN(cls, normal3fArray);
    _ADD_TOKEN(cls, normal3h);
    _ADD_TOKEN(cls, normal3hArray);
    _ADD_TOKEN(cls, overrideBaseFalseDerivedFalse);
    _ADD_TOKEN(cls, overrideBaseFalseDerivedNone);
    _ADD_TOKEN(cls, overrideBaseNoneDerivedFalse);
    _ADD_TOKEN(cls, overrideBaseTrueDerivedFalse);
    _ADD_TOKEN(cls, overrideBaseTrueDerivedNone);
    _ADD_TOKEN(cls, overrideBaseTrueDerivedTrue);
    _ADD_TOKEN(cls, pivotPosition);
    _ADD_TOKEN(cls, point3d);
    _ADD_TOKEN(cls, point3dArray);
    _ADD_TOKEN(cls, point3f);
    _ADD_TOKEN(cls, point3fArray);
    _ADD_TOKEN(cls, point3h);
    _ADD_TOKEN(cls, point3hArray);
    _ADD_TOKEN(cls, quatd);
    _ADD_TOKEN(cls, quatdArray);
    _ADD_TOKEN(cls, quatf);
    _ADD_TOKEN(cls, quatfArray);
    _ADD_TOKEN(cls, quath);
    _ADD_TOKEN(cls, quathArray);
    _ADD_TOKEN(cls, relCanShareApiNameWithAttr);
    _ADD_TOKEN(cls, riStatementsAttributesUserGofur_GeomOnHairdensity);
    _ADD_TOKEN(cls, schemaToken1);
    _ADD_TOKEN(cls, schemaToken2);
    _ADD_TOKEN(cls, string);
    _ADD_TOKEN(cls, stringArray);
    _ADD_TOKEN(cls, temp);
    _ADD_TOKEN(cls, test);
    _ADD_TOKEN(cls, test_MultipleApplyTemplate_);
    _ADD_TOKEN(cls, test_MultipleApplyTemplate_TestAttrOne);
    _ADD_TOKEN(cls, test_MultipleApplyTemplate_TestAttrTwo);
    _ADD_TOKEN(cls, testingAsset);
    _ADD_TOKEN(cls, testNewVersion);
    _ADD_TOKEN(cls, testNewVersion_MultipleApplyTemplate_TestAttrOne);
    _ADD_TOKEN(cls, testNewVersion_MultipleApplyTemplate_TestAttrTwo);
    _ADD_TOKEN(cls, testo);
    _ADD_TOKEN(cls, testo_MultipleApplyTemplate_);
    _ADD_TOKEN(cls, testo_MultipleApplyTemplate_TestAttrOne);
    _ADD_TOKEN(cls, testo_MultipleApplyTemplate_TestAttrTwo);
    _ADD_TOKEN(cls, token);
    _ADD_TOKEN(cls, tokenArray);
    _ADD_TOKEN(cls, transform);
    _ADD_TOKEN(cls, uchar);
    _ADD_TOKEN(cls, ucharArray);
    _ADD_TOKEN(cls, uint);
    _ADD_TOKEN(cls, uint64);
    _ADD_TOKEN(cls, uint64Array);
    _ADD_TOKEN(cls, uintArray);
    _ADD_TOKEN(cls, VariableTokenAllowed1);
    _ADD_TOKEN(cls, VariableTokenAllowed2);
    _ADD_TOKEN(cls, VariableTokenAllowed_3_);
    _ADD_TOKEN(cls, VariableTokenArrayAllowed1);
    _ADD_TOKEN(cls, VariableTokenArrayAllowed2);
    _ADD_TOKEN(cls, VariableTokenArrayAllowed_3_);
    _ADD_TOKEN(cls, VariableTokenDefault);
    _ADD_TOKEN(cls, vector3d);
    _ADD_TOKEN(cls, vector3dArray);
    _ADD_TOKEN(cls, vector3f);
    _ADD_TOKEN(cls, vector3fArray);
    _ADD_TOKEN(cls, vector3h);
    _ADD_TOKEN(cls, vector3hArray);
    _ADD_TOKEN(cls, Base);
    _ADD_TOKEN(cls, Derived);
    _ADD_TOKEN(cls, DerivedNonAppliedAPI);
    _ADD_TOKEN(cls, EmptyMultipleApplyAPI);
    _ADD_TOKEN(cls, MultipleApplyAPI);
    _ADD_TOKEN(cls, MultipleApplyAPI_1);
    _ADD_TOKEN(cls, NonAppliedAPI);
    _ADD_TOKEN(cls, PublicMultipleApplyAPI);
    _ADD_TOKEN(cls, SingleApplyAPI);
    _ADD_TOKEN(cls, SingleApplyAPI_1);
    _ADD_TOKEN(cls, TestNoVersion0);
    _ADD_TOKEN(cls, TestNoVersion0_2);
    _ADD_TOKEN(cls, TestPxHairman);
    _ADD_TOKEN(cls, TestPxHairman_1);
}
