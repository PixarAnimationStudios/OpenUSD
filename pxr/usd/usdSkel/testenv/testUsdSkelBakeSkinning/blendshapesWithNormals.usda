#usda 1.0
(
    startTimeCode = 1
    endTimeCode = 17
)

def SkelRoot "TestPlane"
{
    rel skel:skeleton = <Skel>
    rel skel:animationSource = <Skel/Anim>

    def Mesh "Mesh" (
        apiSchemas = ["BindingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 0)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 10, 11, 1, 1, 11, 12, 2, 2, 12, 13, 3, 3, 13, 14, 4, 4, 14, 15, 5, 5, 15, 16, 6, 6, 16, 17, 7, 7, 17, 18, 8, 8, 18, 19, 9, 10, 20, 21, 11, 11, 21, 22, 12, 12, 22, 23, 13, 13, 23, 24, 14, 14, 24, 25, 15, 15, 25, 26, 16, 16, 26, 27, 17, 17, 27, 28, 18, 18, 28, 29, 19, 20, 30, 31, 21, 21, 31, 32, 22, 22, 32, 33, 23, 23, 33, 34, 24, 24, 34, 35, 25, 25, 35, 36, 26, 26, 36, 37, 27, 27, 37, 38, 28, 28, 38, 39, 29, 30, 40, 41, 31, 31, 41, 42, 32, 32, 42, 43, 33, 33, 43, 44, 34, 34, 44, 45, 35, 35, 45, 46, 36, 36, 46, 47, 37, 37, 47, 48, 38, 38, 48, 49, 39, 40, 50, 51, 41, 41, 51, 52, 42, 42, 52, 53, 43, 43, 53, 54, 44, 44, 54, 55, 45, 45, 55, 56, 46, 46, 56, 57, 47, 47, 57, 58, 48, 48, 58, 59, 49, 50, 60, 61, 51, 51, 61, 62, 52, 52, 62, 63, 53, 53, 63, 64, 54, 54, 64, 65, 55, 55, 65, 66, 56, 56, 66, 67, 57, 57, 67, 68, 58, 58, 68, 69, 59, 60, 70, 71, 61, 61, 71, 72, 62, 62, 72, 73, 63, 63, 73, 74, 64, 64, 74, 75, 65, 65, 75, 76, 66, 66, 76, 77, 67, 67, 77, 78, 68, 68, 78, 79, 69, 70, 80, 81, 71, 71, 81, 82, 72, 72, 82, 83, 73, 73, 83, 84, 74, 74, 84, 85, 75, 75, 85, 86, 76, 76, 86, 87, 77, 77, 87, 88, 78, 78, 88, 89, 79, 80, 90, 91, 81, 81, 91, 92, 82, 82, 92, 93, 83, 83, 93, 94, 84, 84, 94, 95, 85, 85, 95, 96, 86, 86, 96, 97, 87, 87, 97, 98, 88, 88, 98, 99, 89]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "vertex"
        )
        point3f[] points = [(-0.5, -0.5, 0), (-0.3888889, -0.5, 0), (-0.2777778, -0.5, 0), (-0.16666666, -0.5, 0), (-0.055555552, -0.5, 0), (0.055555582, -0.5, 0), (0.16666669, -0.5, 0), (0.2777778, -0.5, 0), (0.3888889, -0.5, 0), (0.5, -0.5, 0), (-0.5, -0.3888889, 0), (-0.3888889, -0.3888889, 0), (-0.2777778, -0.3888889, 0), (-0.16666666, -0.3888889, 0), (-0.055555552, -0.3888889, 0), (0.055555582, -0.3888889, 0), (0.16666669, -0.3888889, 0), (0.2777778, -0.3888889, 0), (0.3888889, -0.3888889, 0), (0.5, -0.3888889, 0), (-0.5, -0.2777778, 0), (-0.3888889, -0.2777778, 0), (-0.2777778, -0.2777778, 0), (-0.16666666, -0.2777778, 0), (-0.055555552, -0.2777778, 0), (0.055555582, -0.2777778, 0), (0.16666669, -0.2777778, 0), (0.2777778, -0.2777778, 0), (0.3888889, -0.2777778, 0), (0.5, -0.2777778, 0), (-0.5, -0.16666666, 0), (-0.3888889, -0.16666666, 0), (-0.2777778, -0.16666666, 0), (-0.16666666, -0.16666666, 0), (-0.055555552, -0.16666666, 0), (0.055555582, -0.16666666, 0), (0.16666669, -0.16666666, 0), (0.2777778, -0.16666666, 0), (0.3888889, -0.16666666, 0), (0.5, -0.16666666, 0), (-0.5, -0.055555552, 0), (-0.3888889, -0.055555552, 0), (-0.2777778, -0.055555552, 0), (-0.16666666, -0.055555552, 0), (-0.055555552, -0.055555552, 0), (0.055555582, -0.055555552, 0), (0.16666669, -0.055555552, 0), (0.2777778, -0.055555552, 0), (0.3888889, -0.055555552, 0), (0.5, -0.055555552, 0), (-0.5, 0.055555582, 0), (-0.3888889, 0.055555582, 0), (-0.2777778, 0.055555582, 0), (-0.16666666, 0.055555582, 0), (-0.055555552, 0.055555582, 0), (0.055555582, 0.055555582, 0), (0.16666669, 0.055555582, 0), (0.2777778, 0.055555582, 0), (0.3888889, 0.055555582, 0), (0.5, 0.055555582, 0), (-0.5, 0.16666669, 0), (-0.3888889, 0.16666669, 0), (-0.2777778, 0.16666669, 0), (-0.16666666, 0.16666669, 0), (-0.055555552, 0.16666669, 0), (0.055555582, 0.16666669, 0), (0.16666669, 0.16666669, 0), (0.2777778, 0.16666669, 0), (0.3888889, 0.16666669, 0), (0.5, 0.16666669, 0), (-0.5, 0.2777778, 0), (-0.3888889, 0.2777778, 0), (-0.2777778, 0.2777778, 0), (-0.16666666, 0.2777778, 0), (-0.055555552, 0.2777778, 0), (0.055555582, 0.2777778, 0), (0.16666669, 0.2777778, 0), (0.2777778, 0.2777778, 0), (0.3888889, 0.2777778, 0), (0.5, 0.2777778, 0), (-0.5, 0.3888889, 0), (-0.3888889, 0.3888889, 0), (-0.2777778, 0.3888889, 0), (-0.16666666, 0.3888889, 0), (-0.055555552, 0.3888889, 0), (0.055555582, 0.3888889, 0), (0.16666669, 0.3888889, 0), (0.2777778, 0.3888889, 0), (0.3888889, 0.3888889, 0), (0.5, 0.3888889, 0), (-0.5, 0.5, 0), (-0.3888889, 0.5, 0), (-0.2777778, 0.5, 0), (-0.16666666, 0.5, 0), (-0.055555552, 0.5, 0), (0.055555582, 0.5, 0), (0.16666669, 0.5, 0), (0.2777778, 0.5, 0), (0.3888889, 0.5, 0), (0.5, 0.5, 0)]
        uniform token orientation = "leftHanded"
        uniform token subdivisionScheme = "none"

        uniform token[] skel:blendShapes = ["twirl_a", "twirl_b", "twirl_c", "twirl_d"]
        rel skel:blendShapeTargets = [
            <twirl_a>,
            <twirl_b>,
            <twirl_c>,
            <twirl_d>
        ]

        def BlendShape "twirl_a"
        {
            uniform int[] pointIndices = [
                1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 23, 24, 25, 26, 34, 35
            ]

            uniform point3f[] normalOffsets = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            uniform point3f[] inbetweens:half = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)] (weight = 0.5)
            uniform point3f[] inbetweens:half:normalOffsets = [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)]
        }
        def BlendShape "twirl_b"
        {
            uniform int[] pointIndices = [
                19, 28, 29, 37, 38, 39, 46, 47, 48, 49, 56, 57, 58, 59, 67, 68, 69, 78, 79, 89
           ]

            uniform point3f[] normalOffsets = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            uniform point3f[] inbetweens:half:normalOffsets = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)]
            uniform point3f[] inbetweens:half = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)] (weight = 0.5)
        }
        def BlendShape "twirl_c"
        {
            uniform int[] pointIndices = [
                64, 65, 73, 74, 75, 76, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98
            ]
            uniform point3f[] normalOffsets = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            uniform point3f[] inbetweens:half = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)] (weight = 0.5)
            uniform point3f[] inbetweens:half:normalOffsets = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)]
        }
        def BlendShape "twirl_d"
        {
            uniform int[] pointIndices = [
                10, 20, 21, 30, 31, 32, 40, 41, 42, 43, 50, 51, 52, 53, 60, 61, 62, 70, 71, 80
            ]
            uniform point3f[] normalOffsets = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            uniform point3f[] inbetweens:half = [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)] (weight = 0.5)
            uniform point3f[] inbetweens:half:normalOffsets = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0)]
        }
        
    }

    def Skeleton "Skel"
    {
        rel skel:animationSource = <Anim>

        def SkelAnimation "Anim"
        {
            uniform token[] blendShapes = ["twirl_a", "twirl_b", "twirl_c", "twirl_d"]
            float[] blendShapeWeights.timeSamples = {
                1: [0.0, 0.0, 0.0, 0.0],
                3: [0.5, 0.0, 0.0, 0.0],
                5: [1.0, 0.0, 0.0, 0.0],
                7: [0.0, 0.5, 0.0, 0.0],
                9: [0.0, 1.0, 0.0, 0.0],
                11: [0.0, 0.0, 0.5, 0.0],
                13: [0.0, 0.0, 1.0, 0.0],
                15: [0.0, 0.0, 0.0, 0.5],
                17: [0.0, 0.0, 0.0, 1.0],
            }
        }
    }
}
