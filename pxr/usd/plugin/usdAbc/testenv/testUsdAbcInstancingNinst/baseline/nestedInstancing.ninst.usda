#usda 1.0
(
    defaultPrim = "rootNode"
    endTimeCode = 24
    startTimeCode = 0
    upAxis = "Y"
)

def Xform "rootNode"
{
    def Xform "instance0" (
        references = </instance0>
    )
    {
    }

    def Xform "c"
    {
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 5, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "instance1" (
            references = </instance0>
        )
        {
        }
    }
}

over Xform "a" (
    customData = {
        string abcInstanceSourcePath = "/rootNode/instance0/a"
    }
)
{
    matrix4d xformOp:transform.timeSamples = {
        0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2, 0, 0, 1) ),
    }
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "aMesh"
    {
        float3[] extent.timeSamples = {
            0: [(-1, -1, -1), (1, 1, 1)],
            24: [(-1, -1, -1), (1, 1, 1)],
        }
        int[] faceVertexCounts.timeSamples = {
            0: [4, 4, 4, 4, 4, 4],
            24: [4, 4, 4, 4, 4, 4],
        }
        int[] faceVertexIndices.timeSamples = {
            0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
            24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
        }
        normal3f[] normals (
            interpolation = "faceVarying"
        )
        normal3f[] normals.timeSamples = {
            0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
            24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
        }
        uniform token orientation = "leftHanded"
        point3f[] points (
            interpolation = "vertex"
        )
        point3f[] points.timeSamples = {
            0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
            24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
        }
        float2[] primvars:uv (
            interpolation = "faceVarying"
        )
        float2[] primvars:uv.timeSamples = {
            0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
            24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
        }
        uniform token subdivisionScheme = "none"
    }

    def Mesh "b"
    {
        float3[] extent.timeSamples = {
            0: [(-1, -1, -1), (1, 1, 1)],
            24: [(-1, -1, -1), (1, 1, 1)],
        }
        int[] faceVertexCounts.timeSamples = {
            0: [4, 4, 4, 4, 4, 4],
            24: [4, 4, 4, 4, 4, 4],
        }
        int[] faceVertexIndices.timeSamples = {
            0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
            24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
        }
        normal3f[] normals (
            interpolation = "faceVarying"
        )
        normal3f[] normals.timeSamples = {
            0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
            24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
        }
        uniform token orientation = "leftHanded"
        point3f[] points (
            interpolation = "vertex"
        )
        point3f[] points.timeSamples = {
            0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
            24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
        }
        float2[] primvars:uv (
            interpolation = "faceVarying"
        )
        float2[] primvars:uv.timeSamples = {
            0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
            24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
        }
        uniform token subdivisionScheme = "none"
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "c"
        {
            float3[] extent.timeSamples = {
                0: [(-1, -1, -1), (1, 1, 1)],
                24: [(-1, -1, -1), (1, 1, 1)],
            }
            int[] faceVertexCounts.timeSamples = {
                0: [4, 4, 4, 4, 4, 4],
                24: [4, 4, 4, 4, 4, 4],
            }
            int[] faceVertexIndices.timeSamples = {
                0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
            }
            normal3f[] normals (
                interpolation = "faceVarying"
            )
            normal3f[] normals.timeSamples = {
                0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
            }
            uniform token orientation = "leftHanded"
            point3f[] points (
                interpolation = "vertex"
            )
            point3f[] points.timeSamples = {
                0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
            }
            float2[] primvars:uv (
                interpolation = "faceVarying"
            )
            float2[] primvars:uv.timeSamples = {
                0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
            }
            uniform token subdivisionScheme = "none"
            matrix4d xformOp:transform.timeSamples = {
                0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
            }
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

over Xform "instance0" (
    customData = {
        string abcInstanceSourcePath = "/rootNode/instance0"
    }
)
{
    def Xform "a" (
        references = </a>
    )
    {
    }

    def Xform "f"
    {
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 5, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "g" (
            references = </a>
        )
        {
        }
    }
}

