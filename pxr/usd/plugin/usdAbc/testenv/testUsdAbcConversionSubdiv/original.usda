#usda 1.0
(
    defaultPrim = "World"
    endTimeCode = 9
    startTimeCode = 1
    upAxis = "Z"
)

# This prim exists to test that we are truly transferring defaultPrim metadata,
# not just relying on the alembic fallback heuristic
def Xform "PreWorld"
{
}

def Xform "World" (
    kind = "group"
)
{
    def Xform "Lights" (
        kind = "model"
    )
    {
        float3[] extentsHint.timeSamples = {
            1: [(3.40282e+38, 3.40282e+38, 3.40282e+38), (-3.40282e+38, -3.40282e+38, -3.40282e+38)],
        }
        uniform bool important = 0
        string ri:attributes:user:ModelInstance = "Lights"
    }

    def Camera "main_cam" (
        kind = "camera"
    )
    {
        float circleOfConfusionSize = 0.026041666
        float circleOfConfusionSize.timeSamples = {
            2: 0.026041666,
            3: 0.26041666,
            4: 0.0026041667,
            5: 0.26041666,
            6: 0.0052083335,
            7: 0.026041666,
        }
        float4[] clippingPlanes = []
        float2 clippingRange = (10, 100000)
        matrix4d constraintTargets:Cloth = ( (0, -1, 0, 0), (1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
            constraintTargetIdentifier = "Cloth"
        )
        matrix4d constraintTargets:HeadXf = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
            constraintTargetIdentifier = "HeadXf"
        )
        matrix4d constraintTargets:Root = ( (0, -1, 0, 0), (1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
            constraintTargetIdentifier = "Root"
        )
        matrix4d constraintTargets:RootXf = ( (0, -1, 0, 0), (1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
            constraintTargetIdentifier = "RootXf"
        )
        matrix4d constraintTargets:RotPiv = ( (0, -1, 0, 0), (1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
            constraintTargetIdentifier = "RotPiv"
        )
        matrix4d constraintTargets:World = ( (0, -1, 0, 0), (1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
            constraintTargetIdentifier = "World"
        )
        float3[] extentsHint.timeSamples = {
            1: [(3.40282e+38, 3.40282e+38, 3.40282e+38), (-3.40282e+38, -3.40282e+38, -3.40282e+38)],
        }
        float focalLength = 100
        float focalLength.timeSamples = {
            1: 50,
            4: 50,
            5: 500,
            6: 10,
            7: 100,
            8: 50,
            9: 100,
        }
        float focusDistance = 2000
        float focusDistance.timeSamples = {
            2: 2000,
            3: 200,
            4: 20000,
            5: 2000,
        }
        float fStop = 0.125
        float fStop.timeSamples = {
            4: 0.125,
            5: 1,
            6: 0.03125,
            7: 0.125,
        }
        float horizontalAperture = 50
        float horizontalAperture.timeSamples = {
            2: 50,
            3: 500,
            4: 5,
            5: 500,
            6: 10,
            7: 50,
        }
        float horizontalApertureOffset = 10
        float horizontalApertureOffset.timeSamples = {
            1: 0,
            7: 0,
            8: 10,
        }
        uniform bool important = 0
        float lensSqueezeRatio = 2
        float lensSqueezeRatio.timeSamples = {
            1: 1,
            6: 1,
            7: 2,
            8: 1,
            9: 2,
        }
        token projection = "perspective"
        string ri:attributes:user:ModelInstance = "main_cam"
        uniform bool stereoscopic = 0
        float verticalAperture = 40
        float verticalAperture.timeSamples = {
            1: 20,
            2: 20,
            3: 200,
            4: 2,
            5: 200,
            6: 4,
            7: 40,
            8: 20,
            9: 40,
        }
        matrix4d xformOp:transform = ( (0, 1, 0, 0), (-1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "geom" (
        kind = "model"
    )
    {
        reorder nameChildren = ["Distance__2400", "Distance__2200", "Distance__2000_in_focus", "Distance__1800", "Distance__1600", "Distance__1400", "Distance__1200", "Distance__1000", "UpperLeftCorner", "UpperRightCorner", "LowerLeftCorner", "LowerRightCorner", "CenterCross", "UpCross", "DownCross", "LeftCross", "RightCross", "Square"]
        float3[] extentsHint.timeSamples = {
            1: [(-1100.5, 999.5, -500.5), (1100.5, 2400.5, 500.5)],
            7: [(-1100.5, 999.5, -500.5), (1100.5, 2400.5, 500.5)],
            8: [(-1100.5, 999.5, -500.5), (1125, 2400.5, 500.5)],
        }
        uniform bool important = 0
        string ri:attributes:user:ModelInstance = "geom"
        matrix4d xformOp:transform = ( (0, 1, 0, 0), (-1, 0, 0, 0), (0, 0, 1, 0), (0, 400, 0, 1) )
        matrix4d xformOp:transform.timeSamples = {
            1: ( (0, 1, 0, 0), (-1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            2: ( (0, 1, 0, 0), (-1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            3: ( (0, 1, 0, 0), (-0.1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            4: ( (0, 1, 0, 0), (-10, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            5: ( (0, 1, 0, 0), (-1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            7: ( (0, 1, 0, 0), (-1, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            8: ( (0, 1, 0, 0), (-1, 0, 0, 0), (0, 0, 1, 0), (0, 400, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "CenterCross"
        {
            def Mesh "UpLeft"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (75, 0, 75, 0), (0, 1, 0, 0), (-5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "UpRight"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (-75, 0, 75, 0), (0, -1, 0, 0), (5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Distance__1000"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-800, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "InnerGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 1)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (19.5979899497487, 0, 0, 0), (0, 1, 0, 0), (0, 0, 19.5979899497487, 0), (-74.9999999999997, 2000, -200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (59.8997493734336, 0, 0, 0), (0, 1, 0, 0), (0, 0, 59.8997493734336, 0), (-74.9999999999997, 2000, -200, 1) ),
                    2: ( (0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, 0), (-74.9999999999997, 2000, -200, 1) ),
                    3: ( (58.974358974359, 0, 0, 0), (0, 1, 0, 0), (0, 0, 58.974358974359, 0), (-74.9999999999997, 2000, -200, 1) ),
                    4: ( (59.9899974993748, 0, 0, 0), (0, 1, 0, 0), (0, 0, 59.9899974993748, 0), (-74.9999999999997, 2000, -200, 1) ),
                    5: ( (48.7179487179487, 0, 0, 0), (0, 1, 0, 0), (0, 0, 48.7179487179487, 0), (-74.9999999999997, 2000, -200, 1) ),
                    6: ( (67.983991995998, 0, 0, 0), (0, 1, 0, 0), (0, 0, 67.983991995998, 0), (-74.9999999999997, 2000, -200, 1) ),
                    7: ( (19.5979899497487, 0, 0, 0), (0, 1, 0, 0), (0, 0, 19.5979899497487, 0), (-74.9999999999997, 2000, -200, 1) ),
                    8: ( (59.8997493734336, 0, 0, 0), (0, 1, 0, 0), (0, 0, 59.8997493734336, 0), (-74.9999999999997, 2000, -200, 1) ),
                    9: ( (19.5979899497487, 0, 0, 0), (0, 1, 0, 0), (0, 0, 19.5979899497487, 0), (-74.9999999999997, 2000, -200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Object"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (240, 1000, -100, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (440, 1000, -100, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (440, 1000, -100, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (440, 1000, -100, 1) ),
                    7: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (440, 1000, -100, 1) ),
                    8: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (240, 1000, -100, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "OuterGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0.217638, 0.217638, 0.217638)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (180.402010050251, 0, 0, 0), (0, 1, 0, 0), (0, 0, 180.402010050251, 0), (-74.9999999999985, 2000.5, -200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (140.100250626566, 0, 0, 0), (0, 1, 0, 0), (0, 0, 140.100250626566, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                    2: ( (45.1002506265664, 0, 0, 0), (0, 1, 0, 0), (0, 0, 45.1002506265664, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                    3: ( (141.025641025641, 0, 0, 0), (0, 1, 0, 0), (0, 0, 141.025641025641, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                    4: ( (140.010002500625, 0, 0, 0), (0, 1, 0, 0), (0, 0, 140.010002500625, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                    5: ( (151.282051282051, 0, 0, 0), (0, 1, 0, 0), (0, 0, 151.282051282051, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                    6: ( (132.016008004002, 0, 0, 0), (0, 1, 0, 0), (0, 0, 132.016008004002, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                    7: ( (180.402010050251, 0, 0, 0), (0, 1, 0, 0), (0, 0, 180.402010050251, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                    8: ( (140.100250626566, 0, 0, 0), (0, 1, 0, 0), (0, 0, 140.100250626566, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                    9: ( (180.402010050251, 0, 0, 0), (0, 1, 0, 0), (0, 0, 180.402010050251, 0), (-74.9999999999985, 2000.5, -200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Distance__1200"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-400, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "InnerGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 1)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (29.7319932998325, 0, 0, 0), (0, 1, 0, 0), (0, 0, 29.7319932998325, 0), (-74.9999999999996, 2000, -200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (56.5998329156224, 0, 0, 0), (0, 1, 0, 0), (0, 0, 56.5998329156224, 0), (-74.9999999999996, 2000, -200, 1) ),
                    2: ( (0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, 0), (-74.9999999999996, 2000, -200, 1) ),
                    3: ( (55.982905982906, 0, 0, 0), (0, 1, 0, 0), (0, 0, 55.982905982906, 0), (-74.9999999999996, 2000, -200, 1) ),
                    4: ( (56.6599983329166, 0, 0, 0), (0, 1, 0, 0), (0, 0, 56.6599983329166, 0), (-74.9999999999996, 2000, -200, 1) ),
                    5: ( (49.1452991452991, 0, 0, 0), (0, 1, 0, 0), (0, 0, 49.1452991452991, 0), (-74.9999999999996, 2000, -200, 1) ),
                    6: ( (61.989327997332, 0, 0, 0), (0, 1, 0, 0), (0, 0, 61.989327997332, 0), (-74.9999999999996, 2000, -200, 1) ),
                    7: ( (29.7319932998325, 0, 0, 0), (0, 1, 0, 0), (0, 0, 29.7319932998325, 0), (-74.9999999999996, 2000, -200, 1) ),
                    8: ( (56.5998329156224, 0, 0, 0), (0, 1, 0, 0), (0, 0, 56.5998329156224, 0), (-74.9999999999996, 2000, -200, 1) ),
                    9: ( (29.7319932998325, 0, 0, 0), (0, 1, 0, 0), (0, 0, 29.7319932998325, 0), (-74.9999999999996, 2000, -200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Object"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (50, 1200, -120, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (210, 1200, -120, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (210, 1200, -120, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (210, 1200, -120, 1) ),
                    7: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (210, 1200, -120, 1) ),
                    8: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (50, 1200, -120, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "OuterGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0.217638, 0.217638, 0.217638)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (136.934673366834, 0, 0, 0), (0, 1, 0, 0), (0, 0, 136.934673366834, 0), (-74.9999999999999, 2000.5, -200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (110.066833751044, 0, 0, 0), (0, 1, 0, 0), (0, 0, 110.066833751044, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                    2: ( (30.9001670843776, 0, 0, 0), (0, 1, 0, 0), (0, 0, 30.9001670843776, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                    3: ( (110.683760683761, 0, 0, 0), (0, 1, 0, 0), (0, 0, 110.683760683761, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                    4: ( (110.00666833375, 0, 0, 0), (0, 1, 0, 0), (0, 0, 110.00666833375, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                    5: ( (117.521367521368, 0, 0, 0), (0, 1, 0, 0), (0, 0, 117.521367521368, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                    6: ( (104.677338669335, 0, 0, 0), (0, 1, 0, 0), (0, 0, 104.677338669335, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                    7: ( (136.934673366834, 0, 0, 0), (0, 1, 0, 0), (0, 0, 136.934673366834, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                    8: ( (110.066833751044, 0, 0, 0), (0, 1, 0, 0), (0, 0, 110.066833751044, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                    9: ( (136.934673366834, 0, 0, 0), (0, 1, 0, 0), (0, 0, 136.934673366834, 0), (-74.9999999999999, 2000.5, -200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Distance__1400"
        {
            def Mesh "InnerGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 1)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (36.9705671213209, 0, 0, 0), (0, 1, 0, 0), (0, 0, 36.9705671213209, 0), (-75, 2000, -200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (54.2427497314715, 0, 0, 0), (0, 1, 0, 0), (0, 0, 54.2427497314715, 0), (-75, 2000, -200, 1) ),
                    2: ( (0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, 0), (-75, 2000, -200, 1) ),
                    3: ( (53.8461538461538, 0, 0, 0), (0, 1, 0, 0), (0, 0, 53.8461538461538, 0), (-75, 2000, -200, 1) ),
                    4: ( (54.2814274997321, 0, 0, 0), (0, 1, 0, 0), (0, 0, 54.2814274997321, 0), (-75, 2000, -200, 1) ),
                    5: ( (49.4505494505495, 0, 0, 0), (0, 1, 0, 0), (0, 0, 49.4505494505495, 0), (-75, 2000, -200, 1) ),
                    6: ( (57.707425141142, 0, 0, 0), (0, 1, 0, 0), (0, 0, 57.707425141142, 0), (-75, 2000, -200, 1) ),
                    7: ( (36.9705671213209, 0, 0, 0), (0, 1, 0, 0), (0, 0, 36.9705671213209, 0), (-75, 2000, -200, 1) ),
                    8: ( (54.2427497314715, 0, 0, 0), (0, 1, 0, 0), (0, 0, 54.2427497314715, 0), (-75, 2000, -200, 1) ),
                    9: ( (36.9705671213209, 0, 0, 0), (0, 1, 0, 0), (0, 0, 36.9705671213209, 0), (-75, 2000, -200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Object"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (-70, 1400, -140, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (50, 1400, -140, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (50, 1400, -140, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (50, 1400, -140, 1) ),
                    7: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (50, 1400, -140, 1) ),
                    8: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (-70, 1400, -140, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "OuterGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0.217638, 0.217638, 0.217638)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (105.886575735822, 0, 0, 0), (0, 1, 0, 0), (0, 0, 105.886575735822, 0), (-75, 2000.5, -200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (88.6143931256713, 0, 0, 0), (0, 1, 0, 0), (0, 0, 88.6143931256713, 0), (-75, 2000.5, -200, 1) ),
                    2: ( (20.7572502685285, 0, 0, 0), (0, 1, 0, 0), (0, 0, 20.7572502685285, 0), (-75, 2000.5, -200, 1) ),
                    3: ( (89.010989010989, 0, 0, 0), (0, 1, 0, 0), (0, 0, 89.010989010989, 0), (-75, 2000.5, -200, 1) ),
                    4: ( (88.5757153574108, 0, 0, 0), (0, 1, 0, 0), (0, 0, 88.5757153574108, 0), (-75, 2000.5, -200, 1) ),
                    5: ( (93.4065934065934, 0, 0, 0), (0, 1, 0, 0), (0, 0, 93.4065934065934, 0), (-75, 2000.5, -200, 1) ),
                    6: ( (85.1497177160009, 0, 0, 0), (0, 1, 0, 0), (0, 0, 85.1497177160009, 0), (-75, 2000.5, -200, 1) ),
                    7: ( (105.886575735822, 0, 0, 0), (0, 1, 0, 0), (0, 0, 105.886575735822, 0), (-75, 2000.5, -200, 1) ),
                    8: ( (88.6143931256713, 0, 0, 0), (0, 1, 0, 0), (0, 0, 88.6143931256713, 0), (-75, 2000.5, -200, 1) ),
                    9: ( (105.886575735822, 0, 0, 0), (0, 1, 0, 0), (0, 0, 105.886575735822, 0), (-75, 2000.5, -200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Distance__1600"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-800, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "InnerGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (42.3994974874372, 0, 0, 0), (0, 1, 0, 0), (0, 0, 42.3994974874372, 0), (-75, 2000, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (52.4749373433584, 0, 0, 0), (0, 1, 0, 0), (0, 0, 52.4749373433584, 0), (-75, 2000, 200, 1) ),
                    2: ( (0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, 0), (-75, 2000, 200, 1) ),
                    3: ( (52.2435897435897, 0, 0, 0), (0, 1, 0, 0), (0, 0, 52.2435897435897, 0), (-75, 2000, 200, 1) ),
                    4: ( (52.4974993748437, 0, 0, 0), (0, 1, 0, 0), (0, 0, 52.4974993748437, 0), (-75, 2000, 200, 1) ),
                    5: ( (49.6794871794872, 0, 0, 0), (0, 1, 0, 0), (0, 0, 49.6794871794872, 0), (-75, 2000, 200, 1) ),
                    6: ( (54.4959979989995, 0, 0, 0), (0, 1, 0, 0), (0, 0, 54.4959979989995, 0), (-75, 2000, 200, 1) ),
                    7: ( (42.3994974874372, 0, 0, 0), (0, 1, 0, 0), (0, 0, 42.3994974874372, 0), (-75, 2000, 200, 1) ),
                    8: ( (52.4749373433584, 0, 0, 0), (0, 1, 0, 0), (0, 0, 52.4749373433584, 0), (-75, 2000, 200, 1) ),
                    9: ( (42.3994974874372, 0, 0, 0), (0, 1, 0, 0), (0, 0, 42.3994974874372, 0), (-75, 2000, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Object"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (140, 1600, 160, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (220, 1600, 160, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (220, 1600, 160, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (220, 1600, 160, 1) ),
                    7: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (220, 1600, 160, 1) ),
                    8: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (140, 1600, 160, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "OuterGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0.217638, 0.217638, 0.217638)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (82.6005025125628, 0, 0, 0), (0, 1, 0, 0), (0, 0, 82.6005025125628, 0), (-74.9999999999999, 2000.5, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (72.5250626566416, 0, 0, 0), (0, 1, 0, 0), (0, 0, 72.5250626566416, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                    2: ( (13.1500626566416, 0, 0, 0), (0, 1, 0, 0), (0, 0, 13.1500626566416, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                    3: ( (72.7564102564102, 0, 0, 0), (0, 1, 0, 0), (0, 0, 72.7564102564102, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                    4: ( (72.5025006251563, 0, 0, 0), (0, 1, 0, 0), (0, 0, 72.5025006251563, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                    5: ( (75.3205128205128, 0, 0, 0), (0, 1, 0, 0), (0, 0, 75.3205128205128, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                    6: ( (70.5040020010005, 0, 0, 0), (0, 1, 0, 0), (0, 0, 70.5040020010005, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                    7: ( (82.6005025125628, 0, 0, 0), (0, 1, 0, 0), (0, 0, 82.6005025125628, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                    8: ( (72.5250626566416, 0, 0, 0), (0, 1, 0, 0), (0, 0, 72.5250626566416, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                    9: ( (82.6005025125628, 0, 0, 0), (0, 1, 0, 0), (0, 0, 82.6005025125628, 0), (-74.9999999999999, 2000.5, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Distance__1800"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-400, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "InnerGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 1)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (46.6219988833054, 0, 0, 0), (0, 1, 0, 0), (0, 0, 46.6219988833054, 0), (-75.0000000000007, 2000, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (51.0999721526037, 0, 0, 0), (0, 1, 0, 0), (0, 0, 51.0999721526037, 0), (-75.0000000000007, 2000, 200, 1) ),
                    2: ( (0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, 0), (-75.0000000000007, 2000, 200, 1) ),
                    3: ( (50.997150997151, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50.997150997151, 0), (-75.0000000000007, 2000, 200, 1) ),
                    4: ( (51.1099997221528, 0, 0, 0), (0, 1, 0, 0), (0, 0, 51.1099997221528, 0), (-75.0000000000007, 2000, 200, 1) ),
                    5: ( (49.8575498575499, 0, 0, 0), (0, 1, 0, 0), (0, 0, 49.8575498575499, 0), (-75.0000000000007, 2000, 200, 1) ),
                    6: ( (51.9982213328887, 0, 0, 0), (0, 1, 0, 0), (0, 0, 51.9982213328887, 0), (-75.0000000000007, 2000, 200, 1) ),
                    7: ( (46.6219988833054, 0, 0, 0), (0, 1, 0, 0), (0, 0, 46.6219988833054, 0), (-75.0000000000007, 2000, 200, 1) ),
                    8: ( (51.0999721526037, 0, 0, 0), (0, 1, 0, 0), (0, 0, 51.0999721526037, 0), (-75.0000000000007, 2000, 200, 1) ),
                    9: ( (46.6219988833054, 0, 0, 0), (0, 1, 0, 0), (0, 0, 46.6219988833054, 0), (-75.0000000000007, 2000, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Object"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (70, 1800, 180, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (110, 1800, 180, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (110, 1800, 180, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (110, 1800, 180, 1) ),
                    7: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (110, 1800, 180, 1) ),
                    8: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (70, 1800, 180, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "OuterGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0.217638, 0.217638, 0.217638)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (64.4891122278057, 0, 0, 0), (0, 1, 0, 0), (0, 0, 64.4891122278057, 0), (-75, 2000.5, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (60.0111389585074, 0, 0, 0), (0, 1, 0, 0), (0, 0, 60.0111389585074, 0), (-75, 2000.5, 200, 1) ),
                    2: ( (7.2333611807296, 0, 0, 0), (0, 1, 0, 0), (0, 0, 7.2333611807296, 0), (-75, 2000.5, 200, 1) ),
                    3: ( (60.1139601139601, 0, 0, 0), (0, 1, 0, 0), (0, 0, 60.1139601139601, 0), (-75, 2000.5, 200, 1) ),
                    4: ( (60.0011113889583, 0, 0, 0), (0, 1, 0, 0), (0, 0, 60.0011113889583, 0), (-75, 2000.5, 200, 1) ),
                    5: ( (61.2535612535613, 0, 0, 0), (0, 1, 0, 0), (0, 0, 61.2535612535613, 0), (-75, 2000.5, 200, 1) ),
                    6: ( (59.1128897782224, 0, 0, 0), (0, 1, 0, 0), (0, 0, 59.1128897782224, 0), (-75, 2000.5, 200, 1) ),
                    7: ( (64.4891122278057, 0, 0, 0), (0, 1, 0, 0), (0, 0, 64.4891122278057, 0), (-75, 2000.5, 200, 1) ),
                    8: ( (60.0111389585074, 0, 0, 0), (0, 1, 0, 0), (0, 0, 60.0111389585074, 0), (-75, 2000.5, 200, 1) ),
                    9: ( (64.4891122278057, 0, 0, 0), (0, 1, 0, 0), (0, 0, 64.4891122278057, 0), (-75, 2000.5, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Distance__2000_in_focus"
        {
            def Mesh "Guide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (-75, 2000, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (-75, 2000, 200, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (-75, 2000, 200, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (-75, 2000, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Object"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (75, 2000, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (75, 2000, 200, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (75, 2000, 200, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (75, 2000, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Distance__2200"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (400, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "InnerGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 1)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (38.1452718136135, 0, 0, 0), (0, 1, 0, 0), (0, 0, 38.1452718136135, 0), (-75.0000000000002, 2000, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (41.8090681248576, 0, 0, 0), (0, 1, 0, 0), (0, 0, 41.8090681248576, 0), (-75.0000000000002, 2000, 200, 1) ),
                    2: ( (0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, 0), (-75.0000000000002, 2000, 200, 1) ),
                    3: ( (41.7249417249417, 0, 0, 0), (0, 1, 0, 0), (0, 0, 41.7249417249417, 0), (-75.0000000000002, 2000, 200, 1) ),
                    4: ( (41.8172724999432, 0, 0, 0), (0, 1, 0, 0), (0, 0, 41.8172724999432, 0), (-75.0000000000002, 2000, 200, 1) ),
                    5: ( (40.7925407925408, 0, 0, 0), (0, 1, 0, 0), (0, 0, 40.7925407925408, 0), (-75.0000000000002, 2000, 200, 1) ),
                    6: ( (42.5439992723635, 0, 0, 0), (0, 1, 0, 0), (0, 0, 42.5439992723635, 0), (-75.0000000000002, 2000, 200, 1) ),
                    7: ( (38.1452718136135, 0, 0, 0), (0, 1, 0, 0), (0, 0, 38.1452718136135, 0), (-75.0000000000002, 2000, 200, 1) ),
                    8: ( (41.8090681248576, 0, 0, 0), (0, 1, 0, 0), (0, 0, 41.8090681248576, 0), (-75.0000000000002, 2000, 200, 1) ),
                    9: ( (38.1452718136135, 0, 0, 0), (0, 1, 0, 0), (0, 0, 38.1452718136135, 0), (-75.0000000000002, 2000, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Object"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (160, 2200, 220, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (120, 2200, 220, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (120, 2200, 220, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (120, 2200, 220, 1) ),
                    7: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (120, 2200, 220, 1) ),
                    8: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (160, 2200, 220, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "OuterGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0.217638, 0.217638, 0.217638)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (52.7638190954774, 0, 0, 0), (0, 1, 0, 0), (0, 0, 52.7638190954774, 0), (-75, 2000.5, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (49.1000227842333, 0, 0, 0), (0, 1, 0, 0), (0, 0, 49.1000227842333, 0), (-75, 2000.5, 200, 1) ),
                    2: ( (5.91820460241513, 0, 0, 0), (0, 1, 0, 0), (0, 0, 5.91820460241513, 0), (-75, 2000.5, 200, 1) ),
                    3: ( (49.1841491841492, 0, 0, 0), (0, 1, 0, 0), (0, 0, 49.1841491841492, 0), (-75, 2000.5, 200, 1) ),
                    4: ( (49.0918184091477, 0, 0, 0), (0, 1, 0, 0), (0, 0, 49.0918184091477, 0), (-75, 2000.5, 200, 1) ),
                    5: ( (50.1165501165501, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50.1165501165501, 0), (-75, 2000.5, 200, 1) ),
                    6: ( (48.3650916367275, 0, 0, 0), (0, 1, 0, 0), (0, 0, 48.3650916367275, 0), (-75, 2000.5, 200, 1) ),
                    7: ( (52.7638190954774, 0, 0, 0), (0, 1, 0, 0), (0, 0, 52.7638190954774, 0), (-75, 2000.5, 200, 1) ),
                    8: ( (49.1000227842333, 0, 0, 0), (0, 1, 0, 0), (0, 0, 49.1000227842333, 0), (-75, 2000.5, 200, 1) ),
                    9: ( (52.7638190954774, 0, 0, 0), (0, 1, 0, 0), (0, 0, 52.7638190954774, 0), (-75, 2000.5, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Distance__2400"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (800, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "InnerGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 1)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (28.2663316582915, 0, 0, 0), (0, 1, 0, 0), (0, 0, 28.2663316582915, 0), (-74.9999999999998, 2000, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (34.9832915622389, 0, 0, 0), (0, 1, 0, 0), (0, 0, 34.9832915622389, 0), (-74.9999999999998, 2000, 200, 1) ),
                    2: ( (0, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, 0), (-74.9999999999998, 2000, 200, 1) ),
                    3: ( (34.8290598290598, 0, 0, 0), (0, 1, 0, 0), (0, 0, 34.8290598290598, 0), (-74.9999999999998, 2000, 200, 1) ),
                    4: ( (34.9983329165625, 0, 0, 0), (0, 1, 0, 0), (0, 0, 34.9983329165625, 0), (-74.9999999999998, 2000, 200, 1) ),
                    5: ( (33.1196581196581, 0, 0, 0), (0, 1, 0, 0), (0, 0, 33.1196581196581, 0), (-74.9999999999998, 2000, 200, 1) ),
                    6: ( (36.3306653326663, 0, 0, 0), (0, 1, 0, 0), (0, 0, 36.3306653326663, 0), (-74.9999999999998, 2000, 200, 1) ),
                    7: ( (28.2663316582915, 0, 0, 0), (0, 1, 0, 0), (0, 0, 28.2663316582915, 0), (-74.9999999999998, 2000, 200, 1) ),
                    8: ( (34.9832915622389, 0, 0, 0), (0, 1, 0, 0), (0, 0, 34.9832915622389, 0), (-74.9999999999998, 2000, 200, 1) ),
                    9: ( (28.2663316582915, 0, 0, 0), (0, 1, 0, 0), (0, 0, 28.2663316582915, 0), (-74.9999999999998, 2000, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Object"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                matrix4d xformOp:transform = ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (300, 2400, 240, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (220, 2400, 240, 1) ),
                    2: ( (2.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2.5, 0), (220, 2400, 240, 1) ),
                    3: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (220, 2400, 240, 1) ),
                    7: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (220, 2400, 240, 1) ),
                    8: ( (50, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50, 0), (300, 2400, 240, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "OuterGuide"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0.217638, 0.217638, 0.217638)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (55.0670016750419, 0, 0, 0), (0, 1, 0, 0), (0, 0, 55.0670016750419, 0), (-75, 2000.5, 200, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (48.3500417710944, 0, 0, 0), (0, 1, 0, 0), (0, 0, 48.3500417710944, 0), (-75, 2000.5, 200, 1) ),
                    2: ( (8.76670843776107, 0, 0, 0), (0, 1, 0, 0), (0, 0, 8.76670843776107, 0), (-75, 2000.5, 200, 1) ),
                    3: ( (48.5042735042735, 0, 0, 0), (0, 1, 0, 0), (0, 0, 48.5042735042735, 0), (-75, 2000.5, 200, 1) ),
                    4: ( (48.3350004167709, 0, 0, 0), (0, 1, 0, 0), (0, 0, 48.3350004167709, 0), (-75, 2000.5, 200, 1) ),
                    5: ( (50.2136752136752, 0, 0, 0), (0, 1, 0, 0), (0, 0, 50.2136752136752, 0), (-75, 2000.5, 200, 1) ),
                    6: ( (47.002668000667, 0, 0, 0), (0, 1, 0, 0), (0, 0, 47.002668000667, 0), (-75, 2000.5, 200, 1) ),
                    7: ( (55.0670016750419, 0, 0, 0), (0, 1, 0, 0), (0, 0, 55.0670016750419, 0), (-75, 2000.5, 200, 1) ),
                    8: ( (48.3500417710944, 0, 0, 0), (0, 1, 0, 0), (0, 0, 48.3500417710944, 0), (-75, 2000.5, 200, 1) ),
                    9: ( (55.0670016750419, 0, 0, 0), (0, 1, 0, 0), (0, 0, 55.0670016750419, 0), (-75, 2000.5, 200, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "DownCross"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -400, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "UpLeft"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (75, 0, 75, 0), (0, 1, 0, 0), (-5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "UpRight"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (-75, 0, 75, 0), (0, -1, 0, 0), (5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "LeftCross"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-1000, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "UpLeft"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (75, 0, 75, 0), (0, 1, 0, 0), (-5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "UpRight"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (-75, 0, 75, 0), (0, -1, 0, 0), (5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "LowerLeftCorner"
        {
            def Mesh "Green"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (100, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (-950, 2000, -350, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Red"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (200, 0, 0, 0), (0, 1, 0, 0), (0, 0, 200, 0), (-1000.5, 2000.5, -400.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "LowerRightCorner"
        {
            def Mesh "Green"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (100, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (950, 2000, -350, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Red"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (200, 0, 0, 0), (0, 1, 0, 0), (0, 0, 200, 0), (1000.5, 2000.5, -400.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "RightCross"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1000, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "UpLeft"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (75, 0, 75, 0), (0, 1, 0, 0), (-5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "UpRight"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (-75, 0, 75, 0), (0, -1, 0, 0), (5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "Square"
        {
            def Mesh "Square"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0, 0, 1)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (200, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (-200, 2000, 0, 1) )
                matrix4d xformOp:transform.timeSamples = {
                    1: ( (100, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (-200, 2000, 0, 1) ),
                    6: ( (100, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (-200, 2000, 0, 1) ),
                    7: ( (200, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (-200, 2000, 0, 1) ),
                    8: ( (100, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (-200, 2000, 0, 1) ),
                    9: ( (200, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (-200, 2000, 0, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "UpCross"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 400, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "UpLeft"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (75, 0, 75, 0), (0, 1, 0, 0), (-5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "UpRight"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (-75, 0, 75, 0), (0, -1, 0, 0), (5, 0, 5, 0), (0, 2000, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "UpperLeftCorner"
        {
            def Mesh "Green"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (100, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (-950, 2000, 350, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Red"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (200, 0, 0, 0), (0, 1, 0, 0), (0, 0, 200, 0), (-1000.5, 2000.5, 400.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "UpperRightCorner"
        {
            def Mesh "Green"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(0, 1, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (100, 0, 0, 0), (0, 1, 0, 0), (0, 0, 100, 0), (950, 2000, 350, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "Red"
            {
                int[] cornerIndices = [0, 1, 2, 3, 4, 5, 6, 7]
                float[] cornerSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
                int[] creaseIndices = [0, 1, 3, 2, 0, 4, 5, 7, 6, 4, 1, 5, 0, 4, 2, 6, 3, 7]
                int[] creaseLengths = [5, 5, 2, 2, 2, 2]
                float[] creaseSharpnesses = [1000, 1000, 1000, 1000, 1000, 1000]
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 4, 6, 2, 0, 1, 5, 4, 4, 5, 7, 6, 3, 7, 5, 1, 6, 7, 3, 2, 2, 3, 1, 0]
                token interpolateBoundary = "none"
                point3f[] points = [(-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5)]
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [1]
                matrix4d xformOp:transform = ( (200, 0, 0, 0), (0, 1, 0, 0), (0, 0, 200, 0), (1000.5, 2000.5, 400.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }
}

