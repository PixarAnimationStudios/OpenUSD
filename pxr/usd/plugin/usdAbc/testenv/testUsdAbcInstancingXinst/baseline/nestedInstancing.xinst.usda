#usda 1.0
(
    defaultPrim = "rootNode"
    endTimeCode = 24
    startTimeCode = 0
    upAxis = "Y"
)

def Xform "rootNode"
{
    def Xform "instance0"
    {
        def Mesh "a"
        {
            float3[] extent.timeSamples = {
                0: [(-1, -1, -1), (1, 1, 1)],
                24: [(-1, -1, -1), (1, 1, 1)],
            }
            int[] faceVertexCounts.timeSamples = {
                0: [4, 4, 4, 4, 4, 4],
                24: [4, 4, 4, 4, 4, 4],
            }
            int[] faceVertexIndices.timeSamples = {
                0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
            }
            normal3f[] normals (
                interpolation = "faceVarying"
            )
            normal3f[] normals.timeSamples = {
                0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
            }
            uniform token orientation = "leftHanded"
            point3f[] points (
                interpolation = "vertex"
            )
            point3f[] points.timeSamples = {
                0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
            }
            float2[] primvars:uv (
                interpolation = "faceVarying"
            )
            float2[] primvars:uv.timeSamples = {
                0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
            }
            uniform token subdivisionScheme = "none"
            matrix4d xformOp:transform.timeSamples = {
                0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2, 0, 0, 1) ),
            }
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "b"
            {
                float3[] extent.timeSamples = {
                    0: [(-1, -1, -1), (1, 1, 1)],
                    24: [(-1, -1, -1), (1, 1, 1)],
                }
                int[] faceVertexCounts.timeSamples = {
                    0: [4, 4, 4, 4, 4, 4],
                    24: [4, 4, 4, 4, 4, 4],
                }
                int[] faceVertexIndices.timeSamples = {
                    0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                    24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                }
                normal3f[] normals (
                    interpolation = "faceVarying"
                )
                normal3f[] normals.timeSamples = {
                    0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                    24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                }
                uniform token orientation = "leftHanded"
                point3f[] points (
                    interpolation = "vertex"
                )
                point3f[] points.timeSamples = {
                    0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                    24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                }
                float2[] primvars:uv (
                    interpolation = "faceVarying"
                )
                float2[] primvars:uv.timeSamples = {
                    0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                    24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                }
                uniform token subdivisionScheme = "none"
                matrix4d xformOp:transform.timeSamples = {
                    0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "c"
                {
                    float3[] extent.timeSamples = {
                        0: [(-1, -1, -1), (1, 1, 1)],
                        24: [(-1, -1, -1), (1, 1, 1)],
                    }
                    int[] faceVertexCounts.timeSamples = {
                        0: [4, 4, 4, 4, 4, 4],
                        24: [4, 4, 4, 4, 4, 4],
                    }
                    int[] faceVertexIndices.timeSamples = {
                        0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                        24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                    }
                    normal3f[] normals (
                        interpolation = "faceVarying"
                    )
                    normal3f[] normals.timeSamples = {
                        0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                        24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                    }
                    uniform token orientation = "leftHanded"
                    point3f[] points (
                        interpolation = "vertex"
                    )
                    point3f[] points.timeSamples = {
                        0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                        24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                    }
                    float2[] primvars:uv (
                        interpolation = "faceVarying"
                    )
                    float2[] primvars:uv.timeSamples = {
                        0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                        24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                    }
                    uniform token subdivisionScheme = "none"
                    matrix4d xformOp:transform.timeSamples = {
                        0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
                    }
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "f"
        {
            matrix4d xformOp:transform.timeSamples = {
                0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 5, 0, 1) ),
            }
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "g"
            {
                float3[] extent.timeSamples = {
                    0: [(-1, -1, -1), (1, 1, 1)],
                    24: [(-1, -1, -1), (1, 1, 1)],
                }
                int[] faceVertexCounts.timeSamples = {
                    0: [4, 4, 4, 4, 4, 4],
                    24: [4, 4, 4, 4, 4, 4],
                }
                int[] faceVertexIndices.timeSamples = {
                    0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                    24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                }
                normal3f[] normals (
                    interpolation = "faceVarying"
                )
                normal3f[] normals.timeSamples = {
                    0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                    24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                }
                uniform token orientation = "leftHanded"
                point3f[] points (
                    interpolation = "vertex"
                )
                point3f[] points.timeSamples = {
                    0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                    24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                }
                float2[] primvars:uv (
                    interpolation = "faceVarying"
                )
                float2[] primvars:uv.timeSamples = {
                    0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                    24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                }
                uniform token subdivisionScheme = "none"
                matrix4d xformOp:transform.timeSamples = {
                    0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2, 0, 0, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "b"
                {
                    float3[] extent.timeSamples = {
                        0: [(-1, -1, -1), (1, 1, 1)],
                        24: [(-1, -1, -1), (1, 1, 1)],
                    }
                    int[] faceVertexCounts.timeSamples = {
                        0: [4, 4, 4, 4, 4, 4],
                        24: [4, 4, 4, 4, 4, 4],
                    }
                    int[] faceVertexIndices.timeSamples = {
                        0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                        24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                    }
                    normal3f[] normals (
                        interpolation = "faceVarying"
                    )
                    normal3f[] normals.timeSamples = {
                        0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                        24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                    }
                    uniform token orientation = "leftHanded"
                    point3f[] points (
                        interpolation = "vertex"
                    )
                    point3f[] points.timeSamples = {
                        0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                        24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                    }
                    float2[] primvars:uv (
                        interpolation = "faceVarying"
                    )
                    float2[] primvars:uv.timeSamples = {
                        0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                        24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                    }
                    uniform token subdivisionScheme = "none"
                    matrix4d xformOp:transform.timeSamples = {
                        0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
                    }
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Mesh "c"
                    {
                        float3[] extent.timeSamples = {
                            0: [(-1, -1, -1), (1, 1, 1)],
                            24: [(-1, -1, -1), (1, 1, 1)],
                        }
                        int[] faceVertexCounts.timeSamples = {
                            0: [4, 4, 4, 4, 4, 4],
                            24: [4, 4, 4, 4, 4, 4],
                        }
                        int[] faceVertexIndices.timeSamples = {
                            0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                            24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                        }
                        normal3f[] normals (
                            interpolation = "faceVarying"
                        )
                        normal3f[] normals.timeSamples = {
                            0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                            24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                        }
                        uniform token orientation = "leftHanded"
                        point3f[] points (
                            interpolation = "vertex"
                        )
                        point3f[] points.timeSamples = {
                            0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                            24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                        }
                        float2[] primvars:uv (
                            interpolation = "faceVarying"
                        )
                        float2[] primvars:uv.timeSamples = {
                            0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                            24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                        }
                        uniform token subdivisionScheme = "none"
                        matrix4d xformOp:transform.timeSamples = {
                            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
                        }
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }
            }
        }
    }

    def Xform "c"
    {
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 5, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "instance1"
        {
            def Mesh "a"
            {
                float3[] extent.timeSamples = {
                    0: [(-1, -1, -1), (1, 1, 1)],
                    24: [(-1, -1, -1), (1, 1, 1)],
                }
                int[] faceVertexCounts.timeSamples = {
                    0: [4, 4, 4, 4, 4, 4],
                    24: [4, 4, 4, 4, 4, 4],
                }
                int[] faceVertexIndices.timeSamples = {
                    0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                    24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                }
                normal3f[] normals (
                    interpolation = "faceVarying"
                )
                normal3f[] normals.timeSamples = {
                    0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                    24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                }
                uniform token orientation = "leftHanded"
                point3f[] points (
                    interpolation = "vertex"
                )
                point3f[] points.timeSamples = {
                    0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                    24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                }
                float2[] primvars:uv (
                    interpolation = "faceVarying"
                )
                float2[] primvars:uv.timeSamples = {
                    0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                    24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                }
                uniform token subdivisionScheme = "none"
                matrix4d xformOp:transform.timeSamples = {
                    0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2, 0, 0, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "b"
                {
                    float3[] extent.timeSamples = {
                        0: [(-1, -1, -1), (1, 1, 1)],
                        24: [(-1, -1, -1), (1, 1, 1)],
                    }
                    int[] faceVertexCounts.timeSamples = {
                        0: [4, 4, 4, 4, 4, 4],
                        24: [4, 4, 4, 4, 4, 4],
                    }
                    int[] faceVertexIndices.timeSamples = {
                        0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                        24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                    }
                    normal3f[] normals (
                        interpolation = "faceVarying"
                    )
                    normal3f[] normals.timeSamples = {
                        0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                        24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                    }
                    uniform token orientation = "leftHanded"
                    point3f[] points (
                        interpolation = "vertex"
                    )
                    point3f[] points.timeSamples = {
                        0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                        24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                    }
                    float2[] primvars:uv (
                        interpolation = "faceVarying"
                    )
                    float2[] primvars:uv.timeSamples = {
                        0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                        24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                    }
                    uniform token subdivisionScheme = "none"
                    matrix4d xformOp:transform.timeSamples = {
                        0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
                    }
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Mesh "c"
                    {
                        float3[] extent.timeSamples = {
                            0: [(-1, -1, -1), (1, 1, 1)],
                            24: [(-1, -1, -1), (1, 1, 1)],
                        }
                        int[] faceVertexCounts.timeSamples = {
                            0: [4, 4, 4, 4, 4, 4],
                            24: [4, 4, 4, 4, 4, 4],
                        }
                        int[] faceVertexIndices.timeSamples = {
                            0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                            24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                        }
                        normal3f[] normals (
                            interpolation = "faceVarying"
                        )
                        normal3f[] normals.timeSamples = {
                            0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                            24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                        }
                        uniform token orientation = "leftHanded"
                        point3f[] points (
                            interpolation = "vertex"
                        )
                        point3f[] points.timeSamples = {
                            0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                            24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                        }
                        float2[] primvars:uv (
                            interpolation = "faceVarying"
                        )
                        float2[] primvars:uv.timeSamples = {
                            0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                            24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                        }
                        uniform token subdivisionScheme = "none"
                        matrix4d xformOp:transform.timeSamples = {
                            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
                        }
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }
            }

            def Xform "f"
            {
                matrix4d xformOp:transform.timeSamples = {
                    0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 5, 0, 1) ),
                }
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "g"
                {
                    float3[] extent.timeSamples = {
                        0: [(-1, -1, -1), (1, 1, 1)],
                        24: [(-1, -1, -1), (1, 1, 1)],
                    }
                    int[] faceVertexCounts.timeSamples = {
                        0: [4, 4, 4, 4, 4, 4],
                        24: [4, 4, 4, 4, 4, 4],
                    }
                    int[] faceVertexIndices.timeSamples = {
                        0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                        24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                    }
                    normal3f[] normals (
                        interpolation = "faceVarying"
                    )
                    normal3f[] normals.timeSamples = {
                        0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                        24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                    }
                    uniform token orientation = "leftHanded"
                    point3f[] points (
                        interpolation = "vertex"
                    )
                    point3f[] points.timeSamples = {
                        0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                        24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                    }
                    float2[] primvars:uv (
                        interpolation = "faceVarying"
                    )
                    float2[] primvars:uv.timeSamples = {
                        0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                        24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                    }
                    uniform token subdivisionScheme = "none"
                    matrix4d xformOp:transform.timeSamples = {
                        0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2, 0, 0, 1) ),
                    }
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Mesh "b"
                    {
                        float3[] extent.timeSamples = {
                            0: [(-1, -1, -1), (1, 1, 1)],
                            24: [(-1, -1, -1), (1, 1, 1)],
                        }
                        int[] faceVertexCounts.timeSamples = {
                            0: [4, 4, 4, 4, 4, 4],
                            24: [4, 4, 4, 4, 4, 4],
                        }
                        int[] faceVertexIndices.timeSamples = {
                            0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                            24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                        }
                        normal3f[] normals (
                            interpolation = "faceVarying"
                        )
                        normal3f[] normals.timeSamples = {
                            0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                            24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                        }
                        uniform token orientation = "leftHanded"
                        point3f[] points (
                            interpolation = "vertex"
                        )
                        point3f[] points.timeSamples = {
                            0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                            24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                        }
                        float2[] primvars:uv (
                            interpolation = "faceVarying"
                        )
                        float2[] primvars:uv.timeSamples = {
                            0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                            24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                        }
                        uniform token subdivisionScheme = "none"
                        matrix4d xformOp:transform.timeSamples = {
                            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
                        }
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Mesh "c"
                        {
                            float3[] extent.timeSamples = {
                                0: [(-1, -1, -1), (1, 1, 1)],
                                24: [(-1, -1, -1), (1, 1, 1)],
                            }
                            int[] faceVertexCounts.timeSamples = {
                                0: [4, 4, 4, 4, 4, 4],
                                24: [4, 4, 4, 4, 4, 4],
                            }
                            int[] faceVertexIndices.timeSamples = {
                                0: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                                24: [0, 4, 6, 2, 5, 1, 3, 7, 0, 1, 5, 4, 6, 7, 3, 2, 1, 0, 2, 3, 4, 5, 7, 6],
                            }
                            normal3f[] normals (
                                interpolation = "faceVarying"
                            )
                            normal3f[] normals.timeSamples = {
                                0: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                                24: [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)],
                            }
                            uniform token orientation = "leftHanded"
                            point3f[] points (
                                interpolation = "vertex"
                            )
                            point3f[] points.timeSamples = {
                                0: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                                24: [(-1, -1, -1), (1, -1, -1), (-1, 1, -1), (1, 1, -1), (-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1)],
                            }
                            float2[] primvars:uv (
                                interpolation = "faceVarying"
                            )
                            float2[] primvars:uv.timeSamples = {
                                0: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                                24: [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)],
                            }
                            uniform token subdivisionScheme = "none"
                            matrix4d xformOp:transform.timeSamples = {
                                0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, 0, 0, 1) ),
                            }
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }
                }
            }
        }
    }
}

