#!/pxrpythonsubst
#
# Copyright 2021 Pixar
#
# Licensed under the Apache License, Version 2.0 (the "Apache License")
# with the following modification; you may not use this file except in
# compliance with the Apache License and the following modification to it:
# Section 6. Trademarks. is deleted and replaced with:
#
# 6. Trademarks. This License does not grant permission to use the trade
#    names, trademarks, service marks, or product names of the Licensor
#    and its affiliates, except as required to comply with Section 4(c) of
#    the License and to reproduce the content of the NOTICE file.
#
# You may obtain a copy of the Apache License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Apache License with the above modification is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the Apache License for the specific
# language governing permissions and limitations under the Apache License.
#
"""
This script generates dynamic schema.usda, generatedSchema.usda and
plugInfo.json. The dynamic schema.usda is generated by parsing appropriate
sdrNodes provided in a config file. Along with providing sdrNodes types and
identifier, the config file also provides a list of subLayers which the auto
populated schema.usda should subLayer.

The script takes 3 arguments:
    - a json config, providing sourceType and sdrNodeIdentifiers
    - a destination directory. Note that a schema.usda with appropriate GLOBAL
      prim providing a libraryName in its customData, must be present at this
      location. This is also the location where generatedSchema.usda,
      plugInfo.json will get exported.
    - an optional noreadme to ignore generating a README.md providing brief 
      explaination of the contents of the directory.

This script will run usdGenSchema on the auto populated schema.usda.
"""

from argparse import ArgumentParser, RawTextHelpFormatter
from textwrap import dedent
import os, sys, json
from subprocess import call
from pxr import Sdf, Tf, UsdUtils, Sdr

USD_GEN_SCHEMA = "usdGenSchema"

def _GetUsdGenSchemaCmd():
    # Adopting logic from usddiff.py
    from distutils.spawn import find_executable
    import platform

    cmd = find_executable(USD_GEN_SCHEMA)
    
    # usdGenSchema is found in PATH
    if cmd:
        return cmd
    else:
        # try to find usdGenSchema from installed directory of this script
        cmd = find_executable(USD_GEN_SCHEMA, 
                path=os.path.abspath(os.path.dirname(sys.argv[0])))
        if cmd:
            return cmd

    if (platform.system() == 'Windows'):
        # find_executable under Windows only returns *.EXE files
        # so we need to traverse PATH.
        for path in os.environ['PATH'].split(os.pathsep):
            base = os.path.join(path, USD_GEN_SCHEMA)
            # We need to test for usdGenSchema.cmd first because on Windows, 
            # the USD executables are wrapped due to lack of N*IX style shebang 
            # support on Windows.
            for ext in ['.cmd', '']:
                cmd = base + ext
                if os.access(cmd, os.X_OK):
                    return cmd
    return None

def _ConfigureSchemaLayer(schemaLayer, schemaSubLayers):
    # - add sublayers
    # - set isDynamic  customData to true
    subLayers = schemaLayer.subLayerPaths
    subLayersList = list(subLayers)
    subLayersList.extend(schemaSubLayers)
    schemaLayer.subLayerPaths = list(set(subLayersList))

    globalPrim = schemaLayer.GetPrimAtPath('/GLOBAL')
    if not globalPrim:
        Tf.RaiseRuntimeError("Missing /GLOBAL prim in schema.usda.")

    if not globalPrim.customData:
        Tf.RaiseRuntimeError("customData must be defined on the /GLOBAL prim")

    customDataDict = dict(globalPrim.customData)
    if 'libraryName' not in customDataDict:
        Tf.RaiseRuntimeError("customData on /GLOBAL prim must provide a " \
            "libraryName.")
    customDataDict['isDynamic'] = True
    globalPrim.customData = customDataDict

    schemaLayer.Save()


if __name__ == '__main__':
    # Parse command line

    # config file provides:
    parser = ArgumentParser(description='''
    This script generates dynamic schema.usda, generatedSchema.usda and 
    plugInfo.json. The dynamic schema.usda is generated by parsing appropriate
    sdrNodes provided in a config file. Along with providing sdrNodes types and
    identifier, the config file also provides a list of subLayers which the auto
    populated schema.usda should subLayer.

    The script takes 3 arguments:
        - a json config, providing sourceType, sdrNodeIdentifiers and sublayers.
        - a destination directory. Note that a schema.usda with appropriate 
          GLOBAL prim providing a libraryName in its customData, must be 
          present at this location. This is also the location where 
          generatedSchema.usda, plugInfo.json will get exported.
        - an optional noreadme to ignore generating a README.md providing brief 
          explaination of the contents of the directory.

    This script will run usdGenSchema on the auto populated schema.usda.
    
    The schema.usda populated specifications from the provided sdrNodes using
    UsdUtils.UpdateSchemaWithSdrNode and isDynamic metadata will be set to true 
    for this schema.usda.

    UsdUtils.UpdateSchemaWithSdrNode is responsible for:
    %s
    ''' %(UsdUtils.UpdateSchemaWithSdrNode.__doc__), 
    formatter_class=RawTextHelpFormatter)
    parser.add_argument('dynamicSchemaConfig',
            nargs='?',
            type=str,
            default='./dynamicSchemaConfig.json',
            help=dedent('''
            A json config providing SourceType and SdrIdentifiers identifying
            sdrNodes for which dynamic schema will be generated. And also
            optionally providing a list of sublayers which the schema.usda will
            sublayer. [Default: %(default)s]').
            Example json config file:
                {
                        "sdrNodes": 
                        {
                            "SourceType": [
                                "sdrIdentifier1",
                                "sdrIdentifier2",
                                "sdrIdentifier3"
                            ]
                        }
                        "sublayers": [
                            "usd/schema.usda", 
                            "usdGeom/schema.usda", 
                            "usdLux/schema.usda"
                            ]
                }
            '''))
    parser.add_argument('schemaGenerationPath',
            nargs='?',
            type=str,
            default='.',
            help=dedent('''
            The target directory where the code should be generated. The script
            assumes a basic schema.usda is defined at this location with a 
            GLOBAL prim configured with appropriate libraryName.
            [Default: %(default)s]
            '''))
    parser.add_argument('--noreadme',
            default=False,
            action='store_true',
            help=dedent('''
            When specified a README.md will not be created in the schemaGenerationPath
            explaining the source of the contents of this directory.
            '''))

    args = parser.parse_args()
    schemaGenerationPath = os.path.abspath(args.schemaGenerationPath)
    dynamicSchemaConfig = os.path.abspath(args.dynamicSchemaConfig)
    writeReadme = not args.noreadme

    if not os.path.isfile(dynamicSchemaConfig):
        Tf.RaiseRuntimeError("(%s) json config does not exist" \
                %(dynamicSchemaConfig))

    # Parse json config to extract sdrNodes and schema sublayers
    try:
        with open(dynamicSchemaConfig) as json_file:
            config = json.load(json_file)
    except ValueError as ve:
        Tf.RaiseRuntimeError("Error loading (%s), value error: (%s)" \
                %(dynamicSchemaConfig, ve))

    if not isinstance(config, dict):
        Tf.Warn("Invalid json config provided, expecting a dictionary")
        sys.exit(1)

    sdrNodesToParse = []

    if config.has_key("sdrNodes"):
        sdrRegistry = Sdr.Registry()
        for sourceType in config['sdrNodes'].keys():
            for nodeId in config['sdrNodes'][sourceType]:
                node = sdrRegistry.GetShaderNodeByNameAndType(nodeId,
                        sourceType)
                if node:
                    sdrNodesToParse.append(node)
                else:
                    Tf.Warn("Invalid Node (%s:%s) provided." %(sourceType,
                        nodeId))
    else:
        Tf.Warn("No sdr nodes provided to generate a dynamic schema")
        sys.exit(1)

    if not sdrNodesToParse:
        Tf.Warn("No valid sdr nodes provided to generate a dynamic schema")
        sys.exit(1)

    schemaSubLayers = []
    if config.has_key("sublayers"):
        schemaSubLayers = config['sublayers']

    schemaLayerPath = os.path.join(schemaGenerationPath, "schema.usda")
    schemaLayer = Sdf.Layer.FindOrOpen(schemaLayerPath)
    if not schemaLayer:
        Tf.RaiseRuntimeError("Missing schema.usda at path (%s)." \
                %(schemaLayerPath))


    # configure schema.usda
    # fill in sublayers
    # set isDynamic metadata to true
    _ConfigureSchemaLayer(schemaLayer, schemaSubLayers)

    # for each sdrNode call updateSchemaFromSdrNode with schema.usda
    for sdrNode in sdrNodesToParse:
        UsdUtils.UpdateSchemaWithSdrNode(schemaLayer, sdrNode)

    usdGenSchemaCmd = _GetUsdGenSchemaCmd()
    if not usdGenSchemaCmd:
        Tf.RaiseRuntimeError("%s not found. Make sure %s is in the PATH." \
                %(USD_GEN_SCHEMA))

    call(usdGenSchemaCmd, cwd=schemaGenerationPath)

    if writeReadme:
        readMeFile = os.path.join(schemaGenerationPath, "README.md")
        description = dedent("""
            The files ("schema.usda", "generatedSchema.usda" and
            "plugInfo.json") in this directory are auto generated using 
            usdgendynamicschemafromsdr utility.

            A dynamic schema.usda is populated using sdrNodes which are 
            specified in a json config. usdGenSchema is then run on this auto
            populated dynamic schema to output a generatedSchema.usda and
            plugInfo.json.
            """)
        with open(readMeFile, "w") as file:
            file.write(description)
    
