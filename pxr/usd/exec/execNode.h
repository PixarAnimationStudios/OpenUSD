//
// Unlicensed 2022 benmalartre
//

#ifndef EXEC_NODE_H
#define EXEC_NODE_H

/// \file exec/execNode.h

#include "pxr/pxr.h"
#include "pxr/usd/exec/api.h"
#include "pxr/base/tf/staticTokens.h"
#include "pxr/usd/ndr/node.h"
#include "pxr/usd/exec/declare.h"

PXR_NAMESPACE_OPEN_SCOPE

// Note: Metadata keys that are generated by parsers should start with
// "__EXEC__" to reduce the risk of collision with metadata actually in the
// node.
#define EXEC_NODE_METADATA_TOKENS   \
    ((Category, "category"))       \
    ((Role, "role"))               \
    ((Help, "help"))               \
    ((Label, "label"))             \
    ((Primvars, "primvars"))       \

// Note: The concept of context is defined on NdrNode and can be queried with
// the GetContext() method. Exec categorizes nodes by the context in which they
// are used inside of a engine.
#define EXEC_NODE_CONTEXT_TOKENS       \
    ((Topology, "topology"))           \
    ((Deformation, "deformation"))     \
    ((Simulation, "simulation"))       

#define EXEC_NODE_ROLE_TOKENS         \
    ((Get, "get"))           \
    ((Set, "set"))           \
    ((Modify, "modify"))     \
    ((Create, "create"))     \
    ((Delete, "delete"))     

TF_DECLARE_PUBLIC_TOKENS(ExecNodeMetadata, EXEC_API, EXEC_NODE_METADATA_TOKENS);
TF_DECLARE_PUBLIC_TOKENS(ExecNodeContext, EXEC_API, EXEC_NODE_CONTEXT_TOKENS);
TF_DECLARE_PUBLIC_TOKENS(ExecNodeRole, EXEC_API, EXEC_NODE_ROLE_TOKENS);

/// \class ExecNode
///
/// A specialized version of `NdrNode` which holds execution information.
///
class ExecNode : public NdrNode
{
public:
    /// Constructor.
    EXEC_API
    ExecNode(const NdrIdentifier& identifier,
             const NdrVersion& version,
             const std::string& name,
             const TfToken& family,
             const TfToken& context,
             const TfToken& sourceType,
             const std::string& definitionURI,
             const std::string& implementationURI,
             NdrPropertyUniquePtrVec&& properties,
             const NdrTokenMap& metadata = NdrTokenMap(),
             const std::string &sourceCode = std::string());

    /// \name Inputs and Outputs
    /// An input or output is also generically referred to as a "property".
    /// @{

    /// Get a input property by name. `nullptr` is returned if an input
    /// with the given name does not exist.
    EXEC_API
    ExecPropertyConstPtr GetExecInput(const TfToken& inputName) const;

    /// Get a output property by name. `nullptr` is returned if an output
    /// with the given name does not exist.
    EXEC_API
    ExecPropertyConstPtr GetExecOutput(const TfToken& outputName) const;


    /// Returns the first input that is tagged as the default input.
    /// A default input and its value can be used to acquire a fallback value
    /// for a node when the node is considered 'disabled' or otherwise
    /// incapable of producing an output value.
    EXEC_API
    ExecPropertyConstPtr GetDefaultInput() const;

    /// @}


    /// \name Metadata
    /// The metadata returned here is a direct result of what the parser plugin
    /// is able to determine about the node. See the documentation for a
    /// specific parser plugin to get help on what the parser is looking for to
    /// populate these values.
    /// @{

    /// The label assigned to this node, if any. Distinct from the name
    /// returned from `GetName()`. In the context of a UI, the label value
    /// might be used as the display name for the node instead of the name.
    EXEC_API
    const TfToken& GetLabel() const { return _label; }

    /// The category assigned to this node, if any. Distinct from the family
    /// returned from `GetFamily()`.
    EXEC_API
    const TfToken& GetCategory() const { return _category; }

    /// Returns the role of this node. This is used to annotate the role that 
    /// the node plays inside a network. We can tag certain
    /// nodes to indicate their role within a shading network. We currently
    /// tag primvar reading nodes, texture reading nodes and nodes that access
    /// volume fields (like extinction or scattering). This is done to identify
    /// resources used by a shading network.
    EXEC_API
    std::string GetRole() const;

    /// The help message assigned to this node, if any.
    EXEC_API
    std::string GetHelp() const;

    /// The list of primvars this node knows it requires / uses.
    /// For example, a node may require the primvar to function
    /// correctly.
    EXEC_API
    const NdrTokenVec& GetPrimvars() const { return _primvars; }

    /// @}



protected:
    // Processed primvar metadata. `_primvars` contains the names of primvars
    // consumed by this node, whereas `_primvarNamingProperties` contains the
    // names of string input properties whose values provide the names of
    // additional primvars consumed by this node.
    NdrTokenVec _primvars;

    // Tokenized metadata
    TfToken _label;
    TfToken _category;

    ExecPropertyMap _execInputs;
    ExecPropertyMap _execOutputs;

private:
    // Initializes `_primvars` and `_primvarNamingProperties`
    void _InitializePrimvars();
};

PXR_NAMESPACE_CLOSE_SCOPE

#endif // EXEC_NODE_H
