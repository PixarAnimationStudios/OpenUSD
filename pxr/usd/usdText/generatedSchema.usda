#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class TextStyle "TextStyle" (
    doc = "Class for single line single style text."
)
{
    uniform bool bold = 0 (
        doc = "Bold."
    )
    uniform float charSpacing = 1 (
        doc = "The charspacing."
    )
    uniform bool italic = 0 (
        doc = "Italic."
    )
    uniform float obliqueAngle = 0 (
        doc = "The oblique."
    )
    uniform string overlineType = "none" (
        allowedTokens = ["none", "normal"]
        doc = "The OverlineType."
    )
    uniform string strikethroughType = "none" (
        allowedTokens = ["none", "normal", "doubleLines"]
        doc = "The StrikethroughType."
    )
    uniform int textHeight (
        doc = "Size."
    )
    uniform float textWidthFactor = 1 (
        doc = "WidthFactor."
    )
    uniform string typeface (
        doc = "The typeface."
    )
    uniform string underlineType = "none" (
        allowedTokens = ["none", "normal"]
        doc = "The UnderlineType."
    )
    uniform int weight = 0 (
        doc = "Weight."
    )
}

class TextLayout "TextLayout" (
    doc = "Class for decorated single line single style text."
)
{
    uniform token direction = "defaultDir" (
        allowedTokens = ["defaultDir", "leftToRight", "rightToLeft", "topToBottom", "bottomToTop"]
        doc = "The direction of the text."
    )
}

class ColumnStyle "ColumnStyle" (
    doc = "Class for style of a column."
)
{
    uniform token blockAlignment = "top" (
        allowedTokens = ["top", "center", "bottom"]
        doc = "The text alignment in the block."
    )
    uniform float columnHeight = 0 (
        doc = "The height of the column."
    )
    uniform float columnWidth = 0 (
        doc = "The width of the column."
    )
    uniform token direction = "defaultDir" (
        allowedTokens = ["defaultDir", "leftToRight", "rightToLeft", "topToBottom", "bottomToTop"]
        doc = '''The direction of the text in the block. "leftToRight" and "rightToLeft" are valid only when 
                 linesFlowDirection is "topToBottom" or "bottomToTop". "topToBottom" and "bottomToTop" are
                 valid only when linesFlowDirection is "leftToRight" or "rightToLeft".'''
    )
    uniform token linesFlowDirection = "topToBottom" (
        allowedTokens = ["topToBottom", "bottomToTop", "leftToRight", "rightToLeft"]
        doc = "The direction that the lines flow."
    )
    uniform float4 margins = (0, 0, 0, 0) (
        doc = """The margins at the four direction. The order is left margin, right margin,
        top margin and bottom margin."""
    )
    uniform float2 offset = (0, 0) (
        doc = "The 2D offset from the position of the text primitive."
    )
}

class ParagraphStyle "ParagraphStyle" (
    doc = "Class for style of a paragraph."
)
{
    uniform float firstLineIndent = 0 (
        doc = "The left indent in the first line."
    )
    uniform float leftIndent = 0 (
        doc = "The left indent in a normal line."
    )
    uniform float lineSpace = 0 (
        doc = "The space between lines."
    )
    uniform token lineSpaceType = "atLeast" (
        allowedTokens = ["exactly", "atLeast", "multiple"]
        doc = "The type of the lineSpace value."
    )
    uniform token paragraphAlignment = "left" (
        allowedTokens = ["left", "right", "center", "justify", "distributed"]
        doc = "The text alignment in the paragraph."
    )
    uniform float paragraphSpace = 0 (
        doc = "The space after the paragraph."
    )
    uniform float rightIndent = 0 (
        doc = "The right indent in each line."
    )
    uniform float[] tabStopPositions (
        doc = "The positions for each tabstop."
    )
    uniform token[] tabStopTypes (
        allowedTokens = ["leftTab", "rightTab", "centerTab", "decimalTab"]
        doc = "The tabstop types."
    )
}

class "TextStyleAPI" (
    doc = "."
)
{
}

class "ColumnStyleAPI" (
    doc = "."
)
{
}

class "ParagraphStyleAPI" (
    doc = "."
)
{
}

class SimpleText "SimpleText" (
    doc = "Class for single line single style text."
)
{
    uniform bool doubleSided = 0 (
        doc = """Although some renderers treat all parametric or polygonal
        surfaces as if they were effectively laminae with outward-facing
        normals on both sides, some renderers derive significant optimizations
        by considering these surfaces to have only a single outward side,
        typically determined by control-point winding order and/or 
        orientation.  By doing so they can perform \"backface culling\" to
        avoid drawing the many polygons of most closed surfaces that face away
        from the viewer.
        
        However, it is often advantageous to model thin objects such as paper
        and cloth as single, open surfaces that must be viewable from both
        sides, always.  Setting a gprim's doubleSided attribute to 
        \\c true instructs all renderers to disable optimizations such as
        backface culling for the gprim, and attempt (not all renderers are able
        to do so, but the USD reference GL renderer always will) to provide
        forward-facing normals on each side of the surface for lighting
        calculations."""
    )
    float3[] extent (
        doc = """Extent is a three dimensional range measuring the geometric
        extent of the authored gprim in its own local space (i.e. its own
        transform not applied), without accounting for any shader-induced
        displacement. If __any__ extent value has been authored for a given 
        Boundable, then it should be authored at every timeSample at which 
        geometry-affecting properties are authored, to ensure correct 
        evaluation via ComputeExtent(). If __no__ extent value has been 
        authored, then ComputeExtent() will call the Boundable's registered 
        ComputeExtentFunction(), which may be expensive, which is why we 
        strongly encourage proper authoring of extent.
        \\sa ComputeExtent()
        \\sa \\ref UsdGeom_Boundable_Extent.
        
        An authored extent on a prim which has children is expected to include
        the extent of all children, as they will be pruned from BBox computation
        during traversal."""
    )
    uniform token orientation = "rightHanded" (
        allowedTokens = ["rightHanded", "leftHanded"]
        doc = """Orientation specifies whether the gprim's surface normal 
        should be computed using the right hand rule, or the left hand rule.
        Please see for a deeper explanation and
        generalization of orientation to composed scenes with transformation
        hierarchies."""
    )
    uniform color3f primvars:backgroundColor (
        doc = "Background color for the text."
    )
    uniform float primvars:backgroundOpacity = 0 (
        doc = "Background opacity for the text."
    )
    color3f[] primvars:displayColor (
        doc = '''It is useful to have an "official" colorSet that can be used
        as a display or modeling color, even in the absence of any specified
        shader for a gprim.  DisplayColor serves this role; because it is a
        UsdGeomPrimvar, it can also be used as a gprim override for any shader
        that consumes a displayColor parameter.'''
    )
    float[] primvars:displayOpacity (
        doc = """Companion to displayColor that specifies opacity, broken
        out as an independent attribute rather than an rgba color, both so that
        each can be independently overridden, and because shaders rarely consume
        rgba parameters."""
    )
    uniform token primvars:textMetricsUnit = "worldUnit" (
        allowedTokens = ["worldUnit", "publishingPoint", "pixel"]
        doc = "The unit for the text related metrics, such as the unit of textHeight."
    )
    rel proxyPrim (
        doc = '''The proxyPrim relationship allows us to link a
        prim whose purpose is "render" to its (single target)
        purpose="proxy" prim.  This is entirely optional, but can be
        useful in several scenarios:
        
        - In a pipeline that does pruning (for complexity management)
        by deactivating prims composed from asset references, when we
        deactivate a purpose="render" prim, we will be able to discover
        and additionally deactivate its associated purpose="proxy" prim,
        so that preview renders reflect the pruning accurately.
        
        - DCC importers may be able to make more aggressive optimizations
        for interactive processing and display if they can discover the proxy
        for a given render prim.
        
        - With a little more work, a Hydra-based application will be able
        to map a picked proxy prim back to its render geometry for selection.

        \\note It is only valid to author the proxyPrim relationship on
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = """Purpose is a classification of geometry into categories that 
        can each be independently included or excluded from traversals of prims 
        on a stage, such as rendering or bounding-box computation traversals.

        See for more detail about how 
        purpose is computed and used."""
    )
    uniform string renderer = "" (
        doc = "The id of the textRenderer."
    )
    uniform string textData (
        doc = "The text string data."
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" 
        visibility that is supported by most DCC apps.  Visibility is 
        animatable, allowing a sub-tree of geometry to be present for some 
        segment of a shot, and absent from others; unlike the action of 
        deactivating geometry prims, invisible geometry is still 
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the
        order in which they should be pushed onto a transform stack while
        visiting a UsdStage's prims in a graph traversal that will effect
        the desired positioning for this prim and its descendant prims.
        
        You should rarely, if ever, need to manipulate this attribute directly.
        It is managed by the AddXformOp(), SetResetXformStack(), and
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and
        GetLocalTransformation()."""
    )
}

class MarkupText "MarkupText" (
    doc = "Class for multiple lines or multiple styles text."
)
{
    uniform bool doubleSided = 0 (
        doc = """Although some renderers treat all parametric or polygonal
        surfaces as if they were effectively laminae with outward-facing
        normals on both sides, some renderers derive significant optimizations
        by considering these surfaces to have only a single outward side,
        typically determined by control-point winding order and/or 
        orientation.  By doing so they can perform \"backface culling\" to
        avoid drawing the many polygons of most closed surfaces that face away
        from the viewer.
        
        However, it is often advantageous to model thin objects such as paper
        and cloth as single, open surfaces that must be viewable from both
        sides, always.  Setting a gprim's doubleSided attribute to 
        \\c true instructs all renderers to disable optimizations such as
        backface culling for the gprim, and attempt (not all renderers are able
        to do so, but the USD reference GL renderer always will) to provide
        forward-facing normals on each side of the surface for lighting
        calculations."""
    )
    float3[] extent (
        doc = """Extent is a three dimensional range measuring the geometric
        extent of the authored gprim in its own local space (i.e. its own
        transform not applied), without accounting for any shader-induced
        displacement. If __any__ extent value has been authored for a given 
        Boundable, then it should be authored at every timeSample at which 
        geometry-affecting properties are authored, to ensure correct 
        evaluation via ComputeExtent(). If __no__ extent value has been 
        authored, then ComputeExtent() will call the Boundable's registered 
        ComputeExtentFunction(), which may be expensive, which is why we 
        strongly encourage proper authoring of extent.
        \\sa ComputeExtent()
        \\sa \\ref UsdGeom_Boundable_Extent.
        
        An authored extent on a prim which has children is expected to include
        the extent of all children, as they will be pruned from BBox computation
        during traversal."""
    )
    uniform token markupLanguage = "noMarkup" (
        allowedTokens = ["noMarkup", "mtext"]
        doc = "The markup language."
    )
    uniform string markupString (
        doc = "The markup string data."
    )
    uniform token orientation = "rightHanded" (
        allowedTokens = ["rightHanded", "leftHanded"]
        doc = """Orientation specifies whether the gprim's surface normal 
        should be computed using the right hand rule, or the left hand rule.
        Please see for a deeper explanation and
        generalization of orientation to composed scenes with transformation
        hierarchies."""
    )
    uniform color3f primvars:backgroundColor (
        doc = "Background color for the text."
    )
    uniform float primvars:backgroundOpacity = 0 (
        doc = "Background opacity for the text."
    )
    color3f[] primvars:displayColor (
        doc = '''It is useful to have an "official" colorSet that can be used
        as a display or modeling color, even in the absence of any specified
        shader for a gprim.  DisplayColor serves this role; because it is a
        UsdGeomPrimvar, it can also be used as a gprim override for any shader
        that consumes a displayColor parameter.'''
    )
    float[] primvars:displayOpacity (
        doc = """Companion to displayColor that specifies opacity, broken
        out as an independent attribute rather than an rgba color, both so that
        each can be independently overridden, and because shaders rarely consume
        rgba parameters."""
    )
    uniform token primvars:textMetricsUnit = "worldUnit" (
        allowedTokens = ["worldUnit", "publishingPoint", "pixel"]
        doc = "The unit for the text related metrics, such as the unit of textHeight."
    )
    rel proxyPrim (
        doc = '''The proxyPrim relationship allows us to link a
        prim whose purpose is "render" to its (single target)
        purpose="proxy" prim.  This is entirely optional, but can be
        useful in several scenarios:
        
        - In a pipeline that does pruning (for complexity management)
        by deactivating prims composed from asset references, when we
        deactivate a purpose="render" prim, we will be able to discover
        and additionally deactivate its associated purpose="proxy" prim,
        so that preview renders reflect the pruning accurately.
        
        - DCC importers may be able to make more aggressive optimizations
        for interactive processing and display if they can discover the proxy
        for a given render prim.
        
        - With a little more work, a Hydra-based application will be able
        to map a picked proxy prim back to its render geometry for selection.

        \\note It is only valid to author the proxyPrim relationship on
        prims whose purpose is "render".'''
    )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
        doc = """Purpose is a classification of geometry into categories that 
        can each be independently included or excluded from traversals of prims 
        on a stage, such as rendering or bounding-box computation traversals.

        See for more detail about how 
        purpose is computed and used."""
    )
    uniform string renderer = "" (
        doc = "The id of the textRenderer."
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
        doc = '''Visibility is meant to be the simplest form of "pruning" 
        visibility that is supported by most DCC apps.  Visibility is 
        animatable, allowing a sub-tree of geometry to be present for some 
        segment of a shot, and absent from others; unlike the action of 
        deactivating geometry prims, invisible geometry is still 
        available for inspection, for positioning, for defining volumes, etc.'''
    )
    uniform token[] xformOpOrder (
        doc = """Encodes the sequence of transformation operations in the
        order in which they should be pushed onto a transform stack while
        visiting a UsdStage's prims in a graph traversal that will effect
        the desired positioning for this prim and its descendant prims.
        
        You should rarely, if ever, need to manipulate this attribute directly.
        It is managed by the AddXformOp(), SetResetXformStack(), and
        SetXformOpOrder(), and consulted by GetOrderedXformOps() and
        GetLocalTransformation()."""
    )
}

