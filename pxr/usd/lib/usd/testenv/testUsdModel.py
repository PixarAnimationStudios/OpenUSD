#!/pxrpythonsubst

from pxr import Usd, Sdf, Kind
from Mentor.Runtime import *

# Configure mentor so assertions terminate execution.
SetAssertMode(MTR_EXIT_TEST)

allFormats = ['usd' + x for x in 'abc']

def TestModelKind():
    for fmt in allFormats:
        s = Usd.Stage.CreateInMemory('TestModelKind.'+fmt)
        p = s.DefinePrim('/World', 'Xform')
        model = Usd.ModelAPI(p)
        AssertEqual(model.GetKind(), '')
        AssertFalse(model.IsModel())
        AssertFalse(model.IsGroup())

        model.SetKind(Kind.Tokens.component)
        AssertEqual(model.GetKind(), Kind.Tokens.component)
        AssertTrue(model.IsModel())
        AssertFalse(model.IsGroup())

        model.SetKind(Kind.Tokens.assembly)
        AssertEqual(model.GetKind(), Kind.Tokens.assembly)
        AssertTrue(model.IsModel())
        AssertTrue(model.IsGroup())

        model.SetKind(Kind.Tokens.subcomponent)
        AssertEqual(model.GetKind(), Kind.Tokens.subcomponent)
        AssertFalse(model.IsModel())
        AssertFalse(model.IsGroup())

def TestModelHierarchy():
    for fmt in allFormats:
        s = Usd.Stage.CreateInMemory('TestModelHierarchy.'+fmt)
        x = s.DefinePrim('/X', 'Scope')
        y = s.DefinePrim('/X/Y', 'Scope')
        z = s.DefinePrim('/X/Y/Z', 'Scope')

        AssertFalse(x.IsModel())
        AssertFalse(y.IsModel())
        AssertFalse(z.IsModel())

        xm = Usd.ModelAPI(x)
        ym = Usd.ModelAPI(y)
        zm = Usd.ModelAPI(z)

        # X is not a model. Hence, Y can't be a model, even if it has kind set
        # to 'component'.
        ym.SetKind(Kind.Tokens.component)
        AssertFalse(ym.IsModel())

        # Setting X's kind to component, causes it to be a model, but Y still 
        # remains a non-model as component below another component violates the 
        # model hierarchy.
        xm.SetKind(Kind.Tokens.component)
        AssertTrue(xm.IsModel())
        AssertFalse(ym.IsModel())

        # Setting X's kind to assembly fixes the model hierarchy and causes 
        # X to be a model group and Y to be a model.
        xm.SetKind(Kind.Tokens.assembly)
        AssertTrue(xm.IsModel())
        AssertTrue(xm.IsGroup())
        AssertTrue(ym.IsModel())
        AssertFalse(ym.IsGroup())

        # A component below a component violates model hierarchy.
        zm.SetKind(Kind.Tokens.component)
        AssertFalse(zm.IsModel())

        # A subcomponent also isn't considered to be a model.
        zm.SetKind(Kind.Tokens.subcomponent)
        AssertFalse(zm.IsModel())

def TestAssetInfo():
    for fmt in allFormats:
        s = Usd.Stage.CreateInMemory('TestAssetInfo.'+fmt)
        p = s.DefinePrim('/World', 'Xform')
        model = Usd.ModelAPI(p)

        AssertEqual(model.GetAssetInfo(), {})

        model.SetAssetName('PaperCup')
        AssertEqual(model.GetAssetName(), 'PaperCup')

        model.SetAssetVersion('10a')
        AssertEqual(model.GetAssetVersion(), '10a')

        model.SetAssetIdentifier('PaperCup/usd/PaperCup.usd')
        AssertEqual(model.GetAssetIdentifier(), 'PaperCup/usd/PaperCup.usd')

        pad = Sdf.AssetPathArray([Sdf.AssetPath('Paper/usd/Paper.usd'), 
                Sdf.AssetPath('Cup/usd/Cup.usd')])
        model.SetPayloadAssetDependencies(pad)
        AssertEqual(model.GetPayloadAssetDependencies(), pad)

        expectedAssetInfo = {
            'identifier': Sdf.AssetPath('PaperCup/usd/PaperCup.usd'), 
            'name': 'PaperCup', 
            'version': '10a',
            'payloadAssetDependencies':
            Sdf.AssetPathArray([Sdf.AssetPath('Paper/usd/Paper.usd'),
                                Sdf.AssetPath('Cup/usd/Cup.usd')])
        }
        AssertEqual(model.GetAssetInfo(), expectedAssetInfo)

        stageContents = s.ExportToString()

        AssertTrue('string name = "PaperCup"' in stageContents)
        AssertTrue('asset identifier = @PaperCup/usd/PaperCup.usd@'
                   in stageContents)
        AssertTrue('asset[] payloadAssetDependencies = '
                   '[@Paper/usd/Paper.usd@, @Cup/usd/Cup.usd@]'
                   in stageContents)
        AssertTrue('string version = "10a"' in stageContents)

# This test attempts to exercise some features of generated schemas that
# we cannot test in any other way at this level.  Ideally we would be able
# to build and test the files generated by testUsdSchemaGen, but that's not
# currently possible.
def TestModelAPI():
    for fmt in allFormats:
        s = Usd.Stage.CreateInMemory('TestModelAPI.'+fmt)
        p = s.DefinePrim('/World', 'Xform')
        model = Usd.ModelAPI(p)
        AssertEqual(model.GetKind(), '')
        AssertFalse(model.IsModel())
        AssertFalse(model.IsGroup())

        model.SetKind(Kind.Tokens.group)

        # Testing that initializing a schema from another schema works
        newSchema = Usd.ModelAPI(model)
        AssertEqual(newSchema.GetKind(), model.GetKind())

if __name__ == '__main__':
    TestModelKind()
    TestModelHierarchy()
    TestAssetInfo()
    TestModelAPI()
    ExitTest()
