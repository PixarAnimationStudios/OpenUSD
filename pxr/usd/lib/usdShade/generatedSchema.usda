#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED.  DO NOT EDIT."
)

class PShader "PShader"
{
    color3f displayColor
    float displayOpacity
    uniform string shaderProtocol
    uniform string shaderType
    asset sloPath
}

class Subgraph "Subgraph" (
    doc = '''A subgraph is a container for shading nodes, as well as other 
    subgraphs. It has a public input interface and provides a list of public 
    outputs, called terminals.

    <b>Subgraph Interfaces</b>
    
    One of the most important functions of a Subgraph is to host the "interface"
    with which clients of already-built shading networks will interact.  Please
    see "Interface Attributes" for a detailed
    explanation of what the interface provides, and how to construct and
    use it to effectively share/instance shader networks.

    <b>Terminals</b>

    Analogous to the public interface, these are relationships that each point 
    to a single internal shader output.
    '''
)
{
}

class Material "Material" (
    doc = """A Material provides a container into which multiple \"render targets\"
    can add data that defines a \"shading material\" for a renderer.  Typically
    this consists of one or more UsdRelationship properties that target
    other prims of type Shader - though a target/client is free to add
    any data that is suitable.  We <b>strongly advise</b> that all targets
    adopt the convention that all properties be prefixed with a namespace
    that identifies the target, e.g. \"rel ri:surface = </Shaders/mySurf>\".
    
    <b>Binding Materials</b>
    
    In the UsdShading model, geometry expresses a binding to a single Material or
    to a set of Materials partitioned by face-sets defined on the geometry;
    it is legal to bind a Material at the root (or other sub-prim) of a model,
    and then bind a different Material to individual gprims, but the meaning of
    inheritance and \"ancestral overriding\" of Material bindings is left to each
    render-target to determine.  Since UsdGeom has no concept of shading,
    we provide the API for binding and unbinding geometry here, on UsdShadeMaterial.
    Please see Bind(), Unbind(), GetBindingRel(), GetBoundMaterial().
    
    <b>Material Variation</b>
    
    The entire power of Usd variantSets and all the other composition 
    operators can be brought to bear on encoding shading variation.  
    UsdShadeMaterial provides facilities for a particular way of building
    \"Material variants\" in which neither the identity of the Materials themselves
    nor the geometry Material-bindings need to change - instead we vary the
    targetted networks, interface values, and even parameter values within
    a single variantSet.  
    See \"Authoring Material Variations\" for more.
    
    <b>Authoring Materials for Referenced Re-use</b>
    
    The shading networks that a Material may target can live anywhere in a layer's
    namespace.  However, it is advantageous to place all of the shaders that 
    \"belong\" to the Material under it in namespace, particularly when building
    \"shading libraries/palettes\" that you intend to reference into other,
    composite, more specialized Materials.  This is because Usd references compose
    all descendant prims of the reference target into the referencer's namespace.
    This means that all of the library Material's shader network will come along 
    with the Material when the Material gets referenced as a sub-component of another
    Material.
    
    """
)
{
}

class Look "Look" (
    doc = """\\deprecated Deprecated in favor of Material.

    A Look provides a container into which multiple \"render targets\"
    can add data that defines a \"shading look\" for a renderer.  Typically
    this consists of one or more UsdRelationship properties that target
    other prims of type Shader - though a target/client is free to add
    any data that is suitable.  We <b>strongly advise</b> that all targets
    adopt the convention that all properties be prefixed with a namespace
    that identifies the target, e.g. \"rel ri:surface = </Shaders/mySurf>\".
    
    <b>Binding Looks</b>
    
    In the UsdShading model, geometry expresses a binding to a single Look or
    to a set of Looks partitioned by face-sets defined on the geometry;
    it is legal to bind a Look at the root (or other sub-prim) of a model,
    and then bind a different Look to individual gprims, but the meaning of
    inheritance and \"ancestral overriding\" of Look bindings is left to each
    render-target to determine.  Since UsdGeom has no concept of shading,
    we provide the API for binding and unbinding geometry here, on UsdShadeLook.
    Please see Bind(), Unbind(), GetBindingRel(), GetBoundLook().
    
    <b>Look Variation</b>
    
    The entire power of Usd variantSets and all the other composition 
    operators can be brought to bear on encoding shading variation.  
    UsdShadeLook provides facilities for a particular way of building
    \"Look variants\" in which neither the identity of the Looks themselves
    nor the geometry Look-bindings need to change - instead we vary the
    targetted networks, interface values, and even parameter values within
    a single variantSet.  
    See \"Authoring Look Variations\" for more.
    
    <b>Authoring Looks for Referenced Re-use</b>
    
    The shading networks that a Look may target can live anywhere in a layer's
    namespace.  However, it is advantageous to place all of the shaders that 
    \"belong\" to the Look under it in namespace, particularly when building
    \"shading libraries/palettes\" that you intend to reference into other,
    composite, more specialized Looks.  This is because Usd references compose
    all descendant prims of the reference target into the referencer's namespace.
    This means that all of the library Look's shader network will come along 
    with the Look when the Look gets referenced as a sub-component of another
    Look.
    
    """
)
{
}

class Shader "Shader" (
    doc = '''Base class for all usd shaders. This is not target specific,
    although usually each render target will derive its own, renderer-specific
    shader object types from this base.
    
    Shader objects generally (but need not) represent a one-to-one 
    correspondence with shader objects of some kind in the target renderer.
    The purpose of representing them in Usd is two-fold:
    - To represent, via "connections" the topology of the shading network
    that must be reconstructed in the renderer.
    - To present a (partial or full) interface of typed parameters whose
    values can be set and overridden in Usd, to be provided later at 
    render-time as parameter values to the actual render shader objects.
    
    Facilities for both of these missions are largely encapsulated in the
    UsdShadeParameter schema.'''
)
{
    uniform token info:id (
        doc = """The id is an identifier for the type or purpose of the 
        shader. E.g.: Texture or FractalFloat. 
        The use of this id will depend on the renderer: some will turn it
        into an actual shader path, some will use it to generate dynamically
        a shader source code.
        """
    )
}

