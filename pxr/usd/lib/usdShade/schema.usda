#usda 1.0
(
    "This file describes the USD Shader schemata for code generation."
    subLayers = [
        @usd/schema.usda@
    ]
)

over "GLOBAL" (
    customData = {
        string libraryName      = "usdShade"
        string libraryPath      = "pxr/usd/usdShade"
        dictionary libraryTokens = {
            dictionary materialBinding = {
                string value = "material:binding"
                string doc = """
                The relationship name on non-shading prims to
                denote a binding to a UsdShadeMaterial.
                """
            }
            dictionary lookBinding = {
                string value = "look:binding"
                string doc = """The relationship name on non shading prims to
                denote a binding to a UsdShadeLook. This is a deprecated
                relationship and is superceded by material:binding.
                """
            }
            dictionary materialVariant = {
                string doc = """The variant name of material variation
                described on a UsdShadeMaterial.
                """
            }
            dictionary materialBind = {
                string doc = """The name of the GeomSubset family used to 
                identify face subsets defined for the purpose of binding 
                materials to facesets.
                """
            }
            dictionary derivesFrom  = {
                string doc = """A legacy relationship name specifying a
                specializes composition on a UsdShadeMaterial.
                """
            }
            dictionary surface = {
                string doc = """Describes the surface relationship terminal on
                a UsdShadeMaterial. Used to find the terminal UsdShadeShader
                describing the surface of a UsdShadeMaterial.
                """
            }
            dictionary displacement = {
                string doc = """Describes the displacement relationship
                terminal on a UsdShadeMaterial. Used to find the terminal
                UsdShadeShader describing the displacement of a
                UsdShadeMaterial.
                """
            }
            dictionary full = {
                string doc= """Possible value for 'connectability' metadata on 
                a UsdShadeInput. When connectability of an input is set to 
                "full", it implies that it can be connected to any input or 
                output.
                """
            }
            dictionary interfaceOnly = {
                string doc= """Possible value for 'connectability' metadata on 
                a UsdShadeInput. It implies that the input can only connect to 
                a NodeGraph Input (which represents an interface override, not 
                a render-time dataflow connection), or another Input whose 
                connectability is also 'interfaceOnly'.
                """
            }
            dictionary connectedSourceFor = {
                string value = "connectedSourceFor:"
                string doc = """The prefix on UsdShadeShader relationships
                associated with a Parameter.

                This prefixed relationship has a suffix matching the associated
                attribute name, and denotes a logical shader connection between
                UsdShadeShaders.
                """
            }
            dictionary outputs = {
                string value = "outputs:"
                string doc = """The prefix on shading attributes
                denoting an output.
                """
            }
            dictionary inputs = {
                string value = "inputs:"
                string doc = """The prefix on shading attributes
                denoting an input.
                """
            }
            dictionary interface = {
                string value = "interface:"
                string doc = """(DEPRECATED) The prefix on UsdShadeNodeGraph 
                attributes denoting an interface attribute.
                """
            }
            dictionary interfaceRecipientsOf = {
                string value = "interfaceRecipientsOf:"
                string doc = """(DEPRECATED) The prefix on UsdShadeNodeGraph
                relationships denoting the target of an interface attribute.
                """
            }
        }
    }
)
{
}

class NodeGraph "NodeGraph" (
    inherits = </Typed>
    doc = """A node-graph is a container for shading nodes, as well as other 
    node-graphs. It has a public input interface and provides a list of public 
    outputs.

    <b>Node Graph Interfaces</b>
    
    One of the most important functions of a node-graph is to host the "interface"
    with which clients of already-built shading networks will interact.  Please
    see \\ref UsdShadeNodeGraph_Interfaces "Interface Inputs" for a detailed
    explanation of what the interface provides, and how to construct and
    use it, to effectively share/instance shader networks.

    <b>Node Graph Outputs</b>

    These behave like outputs on a shader and are typically connected to an 
    output on a shader inside the node-graph.
    """
    customData = {
        string extraIncludes = """
#include <utility>
#include "pxr/usd/usd/editTarget.h"
#include "pxr/usd/usd/relationship.h"
#include "pxr/usd/usdShade/input.h"
#include "pxr/usd/usdShade/output.h"
"""
    }
) {

}


class Material "Material" (
    inherits = </NodeGraph>
    doc = """A Material provides a container into which multiple "render targets"
    can add data that defines a "shading material" for a renderer.  Typically
    this consists of one or more UsdRelationship properties that target
    other prims of type \\em Shader - though a target/client is free to add
    any data that is suitable.  We <b>strongly advise</b> that all targets
    adopt the convention that all properties be prefixed with a namespace
    that identifies the target, e.g. "rel ri:surface = </Shaders/mySurf>".
    
    <b>Binding Materials</b>
    
    In the UsdShading model, geometry expresses a binding to a single Material or
    to a set of Materials partitioned by face-sets defined on the geometry;
    it is legal to bind a Material at the root (or other sub-prim) of a model,
    and then bind a different Material to individual gprims, but the meaning of
    inheritance and "ancestral overriding" of Material bindings is left to each
    render-target to determine.  Since UsdGeom has no concept of shading,
    we provide the API for binding and unbinding geometry here, on UsdShadeMaterial.
    Please see Bind(), Unbind(), GetBindingRel(), GetBoundMaterial().
    
    <b>Material Variation</b>
    
    The entire power of Usd variantSets and all the other composition 
    operators can be brought to bear on encoding shading variation.  
    UsdShadeMaterial provides facilities for a particular way of building
    "Material variants" in which neither the identity of the Materials themselves
    nor the geometry Material-bindings need to change - instead we vary the
    targetted networks, interface values, and even parameter values within
    a single variantSet.  
    See \\ref UsdShadeMaterial_Variations "Authoring Material Variations" for more.
    
    <b>Authoring Materials for Referenced Re-use</b>
    
    The shading networks that a Material may target can live anywhere in a layer's
    namespace.  However, it is advantageous to place all of the shaders that 
    "belong" to the Material under it in namespace, particularly when building
    "shading libraries/palettes" that you intend to reference into other,
    composite, more specialized Materials.  This is because Usd references compose
    all descendant prims of the reference target into the referencer's namespace.
    This means that all of the library Material's shader network will come along 
    with the Material when the Material gets referenced as a sub-component of another
    Material.
    
    """
    customData = {
        string extraIncludes = """
#include "pxr/usd/usd/variantSets.h"
#include "pxr/usd/usdGeom/subset.h"
#include "pxr/usd/usdGeom/faceSetAPI.h"
"""
    }
) {
}

class Look "Look" (
    inherits = </Material>
    doc = """\\deprecated Deprecated in favor of Material.

    A Look provides a container into which multiple "render targets"
    can add data that defines a "shading look" for a renderer.  Typically
    this consists of one or more UsdRelationship properties that target
    other prims of type \\em Shader - though a target/client is free to add
    any data that is suitable.  We <b>strongly advise</b> that all targets
    adopt the convention that all properties be prefixed with a namespace
    that identifies the target, e.g. "rel ri:surface = </Shaders/mySurf>".
    
    <b>Binding Looks</b>
    
    In the UsdShading model, geometry expresses a binding to a single Look or
    to a set of Looks partitioned by face-sets defined on the geometry;
    it is legal to bind a Look at the root (or other sub-prim) of a model,
    and then bind a different Look to individual gprims, but the meaning of
    inheritance and "ancestral overriding" of Look bindings is left to each
    render-target to determine.  Since UsdGeom has no concept of shading,
    we provide the API for binding and unbinding geometry here, on UsdShadeLook.
    Please see Bind(), Unbind(), GetBindingRel(), GetBoundLook().
    
    <b>Look Variation</b>
    
    The entire power of Usd variantSets and all the other composition 
    operators can be brought to bear on encoding shading variation.  
    UsdShadeLook provides facilities for a particular way of building
    "Look variants" in which neither the identity of the Looks themselves
    nor the geometry Look-bindings need to change - instead we vary the
    targetted networks, interface values, and even parameter values within
    a single variantSet.  
    See \\ref UsdShadeLook_Variations "Authoring Look Variations" for more.
    
    <b>Authoring Looks for Referenced Re-use</b>
    
    The shading networks that a Look may target can live anywhere in a layer's
    namespace.  However, it is advantageous to place all of the shaders that 
    "belong" to the Look under it in namespace, particularly when building
    "shading libraries/palettes" that you intend to reference into other,
    composite, more specialized Looks.  This is because Usd references compose
    all descendant prims of the reference target into the referencer's namespace.
    This means that all of the library Look's shader network will come along 
    with the Look when the Look gets referenced as a sub-component of another
    Look.
    
    """
    customData = {
        string extraIncludes = """
#include "pxr/usd/usd/variantSets.h"
#include "pxr/usd/usdGeom/faceSetAPI.h"
"""
    }
) {
}

class Shader "Shader" (
    inherits = </Typed>
    doc = """Base class for all usd shaders. This is not target specific,
    although usually each render target will derive its own, renderer-specific
    shader object types from this base.
    
    Shader objects generally (but need not) represent a one-to-one 
    correspondence with shader objects of some kind in the target renderer.
    The purpose of representing them in Usd is two-fold:
    \\li To represent, via "connections" the topology of the shading network
    that must be reconstructed in the renderer. Facilities for authoring and 
    manipulating connections are encapsulated in the Has-A schema 
    \ref UsdShadeConnectableAPI.
    \\li To present a (partial or full) interface of typed input parameters 
    whose values can be set and overridden in Usd, to be provided later at 
    render-time as parameter values to the actual render shader objects. Shader 
    input parameters are encapsulated in the property schema UsdShadeInput.
    """ 
    customData = {
        string extraIncludes = """
#include "pxr/usd/usdShade/input.h"
#include "pxr/usd/usdShade/output.h"
    """
    }
) {
    uniform token info:id (
        doc = """The id is an identifier for the type or purpose of the 
        shader. E.g.: Texture or FractalFloat. 
        The use of this id will depend on the renderer: some will turn it
        into an actual shader path, some will use it to generate dynamically
        a shader source code.
        """
        customData = {
            string apiName = "id"
        }
    )
}

class "ConnectableAPI"
(
    doc = """UsdShadeConnectableAPI is an API schema that provides a common
    interface for creating outputs and making connections between shading 
    parameters and outputs.
    """ 
    customData = {
        string extraIncludes = """
#include "pxr/usd/usdShade/shader.h"
#include "pxr/usd/usdShade/nodeGraph.h"
    """
    }
)
{
}
