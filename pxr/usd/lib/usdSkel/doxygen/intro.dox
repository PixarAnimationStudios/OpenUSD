/*!

\page UsdSkel_Intro UsdSkel Introduction

\section UsdSkel_ScopeAndIntent Overview and Purpose

It is a goal of UsdSkel to provide both a robust means of interchange
for clients like game studios, as well as to provide the foundation for
performant, scalable interchange of large-scale crowds, wherein undeformed
geometry and skeletal animations directly feed preview and final-quality
render engines, pulling from sequencing libraries of animations.

Additionally, our interests are not exclusively around the problem of the
interchange of skinned meshes. The interchange of an *animated skeleton* is
also important, as there are many contexts where the interchange of joint
animations is the only concern.

At a very high level, the interchange of skinned models involves identifying
the following properties:

- The **topology** of a skeleton that drives a model.
- The **animated joints transforms** corresponding to a skeleton.
- A **rest pose** of a skeleton (a requirement of some DCC apps,
  as well as a debugging aid).
- A set of **joint influences** on each geometry primitive, describing
  how to skin the primitive.
- The set of **skinnable prims** that should be skinned by a given skeleton.


The aim of UsdSkel is to provide a robust, modular and scalable encoding of
these properties. Further, it is desired that skinned models may be encoded
without requiring restructuring of a scene graph, such that the same
<a href="https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-CompositionArcs">composition arcs</a>
apply to primitives, regardless of whether those primitives consist of normal
baked meshes, or UsdSkel-skinned primitives.

\subsection UsdSkel_IsNot What UsdSkel Is Not

UsdSkel does *not* signal an intent to provide general rigging and execution
behaviors as core USD features. We strongly believe that such features are
beyond the scope of USD's core concerns.

In other words, UsdSkel neither currently encodes nor has plans to later
support inverse kinematics (of any form), or any additional deformers.


\section UsdSkel_Term Terminology

Before discussing any concepts in detail, it's important to establish some
common terminology:

- \anchor UsdSkel_Term_Skeleton **Skeleton**:

  An encoding of the topological aspects of skinning, defined in terms
  of an ordered set of _Joints_.

  A _Skeleton_ itself is a shared unit, and does not itself describe any
  animation.

  A _Skeleton_ also defines a _Rest Pose_, which provides fallback 
  values for a sparse _Animation_, and which is also used in computing
  the change in joint transformation, as is needed for skinning.

- \anchor UsdSkel_Term_SkeletonTopology **Skeleton Topology**:
  
  The distinct components of a _Skeleton_ that describe a joint hierarchy.

- **Animation**:

  An encoding of the motion of a _Skeleton's_ _Joints_ over time. 
  A skeleton is animated by application of an _Animation_.

- \anchor UsdSkel_Term_SkeletonInstance **Skeleton Instance**:

  This refers to the notion of a bound _Skeleton_ which may also
  have an _Animation_.
  In UsdSkel, we consider each _skel:skeleton_ binding relationship,
  as set through the UsdSkelBindingAPI schema, as identifying a
  _Skeleton Instance_.

- **Binding**:
  
  An encoding of the binding of a _Skeleton_ to a geometry hierarchy.
  This encoding additionally binds an _Animation Source_ into the hierarchy.
  which applies against a _Skeleton_ to drive skinning.

- \anchor UsdSkel_Term_JointInfluences **Joint Influences**:
  
  The set of joint weights and indices used by skinning algorithms to
  describe how each point is influenced by the change in joint transformations.
  Sometimes influences are rigid, so influences are described as 
  influencing **components** rather than points.

\section UsdSkel_SkinnablePrims What Can Be Skinned?

UsdSkel makes an attempt at encoding skinning information in a way that
generalizes to many types of prims, rather than a strict subset of known types.
However, ultimately, the set of primitives that can be skinned will vary
depending on the client.

As a general rule, if a primitive's type inherits from UsdGeomBoundable,
and if both that primitive and all of its ancestors inherit from
UsdGeomImageable, then that primitive is considered by UsdSkel to be a valid
_candidate_ for skinning. When clients iterate over the set of
_skinnable primitives_ -- for example, as returned from
UsdSkelCache::ComputeSkinnedPrims -- it is the client's responsibility to
check the resulting types and determine whether or not they know how to skin
each candidate primitive.

\section UsdSkel_TransformSpaces Transforms and Transform Spaces

There are a few special transform spaces and transforms that will frequently be
referenced:

- **Joint-Local Space**:

  The local transform space of each joint.

- **Skeleton Space**:

  The object space of an animated _Skeleton_. This space does not contain the
  transformation that positions the root of the _Skeleton_
  (and bound geometry) in the world, and therefore serves as the canonical
  space in which to apply joint animations.
  Whereas some APIs assume World space for many computed quantities,
  we require data to be encoded no "higher" than _Skeleton Space_, so that
  animations will not break if transformations are altered on ancestor
  prims of the skinned geometry.

- **Animation Transform**
  
  The root transform of an _Animation_.

- **Skeleton Instance Transform**

  The transform defined on a _Skeleton Instance_.
  This is concatenated against a skeleton's _Animation Transform_ when
  computing a complete local-to-world transform of a skeleton instance.

- \anchor UsdSkel_Transforms_GeomBindTransform **Geom Bind Transform**:

  The transform that positions a skinned primitive in its binding state
  into _Skeleton Space_.

- **Skinning Transform**:

  The transform that describes a joint's change in transformation in
  _Skeleton Space_, from its _Rest Pose_ transform to its animated transform.
  I.e., `inv(jointSkelSpaceRestTransform)*jointSkelSpaceAnimTransform`.

For the sake of planned animation blending capabilities, UsdSkel stores
all joint transforms in _Joint Local Space_.

To clarify the description of these spaces, a _Skeleton Space_ joint
transform is computed from a _Joint Local_ transform as follows:

\code
    jointSkelSpaceTransform = jointLocalSpaceTransform * parentJointSkelSpaceTransform
\endcode

Where the _parentJointSkelSpaceTransform_ is an identity matrix for root joints,
or _jointSkelSpaceTransform_ of the parent joint otherwise.

The _World Space_ transform of a joint is computed as:

\code
    jointWorldSpaceTransform = jointLocalSpaceTransform *
        parentJointSkelSpaceTransform * skelInstanceLocalToWorldTransform
\endcode

Where _skelInstanceLocalToWorldTransform_ is computed as:
\code
    skelInstanceLocalToWorldTransform = animTransform * skelInstanceTransform
\endcode
    

<b>Computing a Posed Point</b>

In linear blend skinning, the _Skeleton Space_ position of a skinned point is
computed as:

\code
    skelSpacePoint = geomBindTransform.Transform(localSpacePoint)
    p = (0,0,0)
    for jointIndex,jointWeight in jointInfluencesForPoint:
        p += skinningTransforms[jointIndex].Transform(skelSpacePoint)*jointWeight
\endcode

Where _localSpacePoint_ is a point of a skinned primitive, given in the local
space of that primitive.

*/
