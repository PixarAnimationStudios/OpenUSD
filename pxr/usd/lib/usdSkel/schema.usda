#usda 1.0
(
    """ This file contains a schema for supporting skeletal animations in USD.
    """
    subLayers = [
        @usdGeom/schema.usda@
    ]
) 

over "GLOBAL" (
    customData = {
        string libraryName       = "usdSkel"
        string libraryPath       = "pxr/usd/usdSkel"
    }
) {
}



class SkelRoot "SkelRoot" (
    inherits = </Boundable>
    doc = """Transformable prim type used to identify a scope beneath which
    skeletally-posed primitives are defined.

    A SkelRoot must be defined at or above a skinned primitive for any skinning
    behaviors in UsdSkel.

    See the extented \\ref UsdSkel_SkelRoot "Skel Root Schema" documentation for
    more information."""
    customData = {
        string className = "Root"
    }
) {
}


class Skeleton "Skeleton" (
    inherits = </Imageable>
    doc="""Describes a skeleton. A Skeleton is responsible both for establishing
    the _topology_ of a skeleton, as well as for identifying a rest pose.

    See the extended \\ref UsdSkel_Skeleton "Skeleton Schema" documentation for
    more information.
    """
    customData = {
        string extraIncludes = """
#include "pxr/usd/usdSkel/topology.h" """
    }
) {
    uniform token[] joints (
        doc = """An array of path tokens identifying the set of joints that make
        up the skeleton, and their order. Each token in the array must be valid
        when parsed as an SdfPath. The parent-child relationships of the
        corresponding paths determine the parent-child relationships of each
        joint."""
    )

    uniform matrix4d[] restTransforms (
        doc = """Specifies rest transforms of each joint in 
        **joint-local space**, in the ordering imposed by *joints*.
        Joint transforms should all be given as orthogonal, affine
        transformations."""
    )
}


class PackedJointAnimation "PackedJointAnimation" (
    inherits = </Xformable>
    doc="""Describes a vectorized collection of joint animations.

    See the extended \\ref UsdSkel_PackedJointAnimation "Packed Joint Animation"
    documentation for more information.
    """
) {
    uniform token[] joints (
        doc = """Array of tokens identifying which joints this animation's
        data applies to. The tokens for joints correspond to the tokens of
        Skeleton primitives. The order of the joints as listed here may
        vary from the order of joints on the Skeleton itself."""
    )

    float3[] translations (
        doc = """Joint-local translations of all affected joints. Array length 
        should match the size of the *joints* attribute."""
    )
    
    quatf[] rotations (
        doc = """Joint-local unit quaternion rotations of all affected joints, 
        in 32-bit precision. Array length should match the size of the 
        *joints* attribute."""
    )

    half3[] scales (
        doc = """Joint-local scales of all affected joints, in
        16 bit precision. Array length should match the size of the *joints* 
        attribute."""
    )
}


class "BindingAPI" (
    doc="""Provides API for authoring and extracting all the skinning-related
    data that lives in the "geometry hierarchy" of prims and models that want
    to be skeletally deformed.

    See the extended \\ref UsdSkel_BindingAPI "UsdSkelBindingAPI schema"
    documentation for more about bindings and how they apply in a scene graph.
    """
    customData = {
        string extraIncludes = """
#include "pxr/usd/usdGeom/primvar.h" """
    }
)
{
    rel skel:animationSource (
        customData = {
            string apiName = "animationSource"
        }       
        doc = """Animation source to be bound to this prim and its 
        descendants. An animationSource has no effect until the next
        _skel:skeleton_ binding applied either at the same prim that
        the animationSource is defined on, or at the binding of an
        ancestor prim. An animationSource does not affect a skeleton
        bound on an ancestor scope.
        """
    )

    rel skel:skeleton (
        customData = {
            string apiName = "skeleton"
        }       
        doc = """Skeleton to be bound to this prim and its descendents that
        possess a mapping and weighting to the joints of the identified
        Skeleton."""
    )

    matrix4d primvars:skel:geomBindTransform (
        customData = {
            string apiName = "geomBindTransform"
        } 
        doc = """Encodes the transform that positions gprims in the space in
        which it is bound to a Skeleton.  If the transform is identical for a
        group of gprims that share a common ancestor, the transform may be
        authored on the ancestor, to "inherit" down to all the leaf gprims.
        The *geomBindTransform* is defined as moving a gprim from its own
        object space (untransformed by the gprim's own transform) out into
        Skeleton space. If this transform is unset, an identity transform
        is used instead."""
    )

    uniform token[] skel:joints (
        customData = {
            string apiName = "joints"
        }       
        doc = """An (optional) array of tokens defining the list of
        joints to which jointIndices apply. If not defined, jointIndices applies
        to the ordered list of joints defined in the bound Skeleton's *joints*
        attribute."""  
    )

    int[] primvars:skel:jointIndices (
        customData = {
            string apiName = "jointIndices"
        }       
        doc = """Indices into the *joints* attribute of the closest
        (in namespace) bound Skeleton that affect each point of a PointBased
        gprim. The primvar can have either *constant* or *vertex* interpolation.
        This primvar's *elementSize* will determine how many joint influences
        apply to each point. Indices must point be valid. Null influences should
        be defined by setting values in jointWeights to zero.
        See UsdGeomPrimvar for more information on interpolation and
        elementSize."""
    )

    float[] primvars:skel:jointWeights (
        customData = {
            string apiName = "jointWeights"
        }       
        doc = """Weights for the joints that affect each point of a PointBased
        gprim. The primvar can have either *constant* or *vertex* interpolation.
        This primvar's *elementSize* will determine how many joints influences
        apply to each point. The length, interpolation, and elementSize of
        *jointWeights* must match that of *jointIndices*. See UsdGeomPrimvar
        for more information on interpolation and elementSize."""
    )
}
