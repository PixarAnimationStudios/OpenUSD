#usda 1.0
(
    defaultPrim = "Sphere"
    endFrame = 1
    startFrame = 1
)

def Xform "Sphere" (
    kind = "model"
)
{
    custom bool presto:dynamicUnroll = 1

    def Mesh "pSphere1"
    {
        Vec3f[] extent = [(-7.10811, -7.10811, -7.10811), (7.10811, 7.10811, 7.10811)]

        rel faceSet:look:binding = [
            </Sphere/Looks/initialShadingGroup>,
            </Sphere/Looks/lambert2SG>,
            </Sphere/Looks/lambert3SG>,
        ]
        int[] faceSet:look:faceCounts = [4, 8, 4]
        int[] faceSet:look:faceCounts.timeSamples = {
            1: [4, 4, 8],
            2: [8, 4, 4],
            3: [4, 8, 4]
        }
        int[] faceSet:look:faceIndices = [12, 13, 14, 15, 0, 1, 2, 3, 8, 9, 10, 11, 4, 5, 6, 7]
        int[] faceSet:look:faceIndices.timeSamples = {
            1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            2: [12, 13, 14, 15, 0, 1, 2, 3, 8, 9, 10, 11, 4, 5, 6, 7],
            3: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        }
        uniform bool faceSet:look:isPartition = 1

        rel faceSet:badPartition:binding = [
            </Sphere/Looks/lambert2SG>,
            </Sphere/Looks/lambert3SG>,
        ]
        int[] faceSet:badPartition:faceCounts = [4, 4]
        # Note that 0 appears twice in faceIndices.
        int[] faceSet:badPartition:faceIndices = [0, 1, 2, 3, 4, 5, 6, 0]
        uniform bool faceSet:badPartition:isPartition = 1

        rel faceSet:missingIndices:binding = [
            </Sphere/Looks/lambert2SG>,
            </Sphere/Looks/lambert3SG>,
        ]
        int[] faceSet:missingIndices:faceCounts = [4, 4]
        # There are only 7 face indices. Sum of faceCounts is 8.
        int[] faceSet:missingIndices:faceIndices = [0, 1, 2, 3, 4, 5, 6]
        uniform bool faceSet:missingIndices:isPartition = 1

        rel faceSet:validVaryingFaceCounts:binding = [
            </Sphere/Looks/lambert2SG>,
            </Sphere/Looks/lambert3SG>,
        ]
        int[] faceSet:validVaryingFaceCounts:faceCounts = [4, 4]
        int[] faceSet:validVaryingFaceCounts:faceCounts.timeSamples = {
            1: [3, 5],
            2: [2, 6],
            3: [4, 4]
        }
        int[] faceSet:validVaryingFaceCounts:faceIndices = [0, 1, 2, 3, 4, 5, 6, 7]
        int[] faceSet:validVaryingFaceCounts:faceIndices.timeSamples = {
            1: [0, 1, 2, 3, 4, 5, 6, 7],
            2: [0, 1, 2, 3, 4, 5, 6, 7],
            3: [0, 1, 2, 3, 4, 5, 6, 7]
        }
        uniform bool faceSet:validVaryingFaceCounts:isPartition = 1

        rel faceSet:invalidVaryingFaceCounts:binding = [
            </Sphere/Looks/lambert2SG>,
            </Sphere/Looks/lambert3SG>,
        ]
        int[] faceSet:invalidVaryingFaceCounts:faceCounts = [4, 4]
        int[] faceSet:invalidVaryingFaceCounts:faceCounts.timeSamples = {
            1: [3, 5],
            2: [9],
            3: [4, 4]
        }
        int[] faceSet:invalidVaryingFaceCounts:faceIndices = [0, 1, 2, 3, 4, 5, 6, 7]
        int[] faceSet:invalidVaryingFaceCounts:faceIndices.timeSamples = {
            1: [0, 1, 2, 3, 4, 5, 6, 7],
            2: [0, 1, 2, 3, 4, 5, 6, 7, 8],
            3: [0, 1, 2, 3, 4, 5, 6, 7],
        }
        uniform bool faceSet:invalidVaryingFaceCounts:isPartition = 1

        rel faceSet:bindingMismatch:binding = [
            </Sphere/Looks/initialShadingGroup>,
            </Sphere/Looks/lambert2SG>,
            </Sphere/Looks/lambert3SG>,
        ]
        int[] faceSet:bindingMismatch:faceCounts = [4, 4]
        int[] faceSet:bindingMismatch:faceIndices = [0, 1, 2, 3, 4, 5, 6, 7]
        uniform bool faceSet:bindingMismatch:isPartition = 1
        
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 5, 4, 1, 2, 6, 5, 2, 3, 7, 6, 3, 0, 4, 7, 4, 5, 9, 8, 5, 6, 10, 9, 6, 7, 11, 10, 7, 4, 8, 11, 1, 0, 12, 2, 1, 12, 3, 2, 12, 0, 3, 12, 8, 9, 13, 9, 10, 13, 10, 11, 13, 11, 8, 13]
        PointFloat[] points = [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-07, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-07, -1.37981e-22), (-3.10705e-07, -7.10811, 1.57832e-15), (7.10811, 0, 0), (6.59105e-07, 5.02619, 5.02619), (-5.02619, 4.39403e-07, 5.02619), (-2.19702e-07, -5.02619, 5.02619), (5.02619, 1.11604e-15, 5.02619), (0, -1.57832e-15, -7.10811), (0, 1.57832e-15, 7.10811)]
        Vec2f[] primvars:st = [(0, 0.25), (0.25, 0.25), (0.25, 0.5), (0, 0.5), (0.25, 0.25), (0.5, 0.25), (0.5, 0.5), (0.25, 0.5), (0.5, 0.25), (0.75, 0.25), (0.75, 0.5), (0.5, 0.5), (0.75, 0.25), (1, 0.25), (1, 0.5), (0.75, 0.5), (0, 0.5), (0.25, 0.5), (0.25, 0.75), (0, 0.75), (0.25, 0.5), (0.5, 0.5), (0.5, 0.75), (0.25, 0.75), (0.5, 0.5), (0.75, 0.5), (0.75, 0.75), (0.5, 0.75), (0.75, 0.5), (1, 0.5), (1, 0.75), (0.75, 0.75), (0.25, 0.25), (0, 0.25), (0.125, 0), (0.5, 0.25), (0.25, 0.25), (0.375, 0), (0.75, 0.25), (0.5, 0.25), (0.625, 0), (1, 0.25), (0.75, 0.25), (0.875, 0), (0, 0.75), (0.25, 0.75), (0.125, 1), (0.25, 0.75), (0.5, 0.75), (0.375, 1), (0.5, 0.75), (0.75, 0.75), (0.625, 1), (0.75, 0.75), (1, 0.75), (0.875, 1)] (
            interpolation = "faceVarying"
        )
        Vec3d xformOp:translate = (0.191260557342787, 0.0415678998936819, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Scope "Looks"
    {
        def Look "initialShadingGroup"
        {
            ColorFloat interface:displayColor = (0.00902149, 1, 0.0393514)
            float interface:displayOpacity
            ColorFloat interface:transparency
            rel ri:interfaceRecipientsOf:displayColor = </Sphere/Looks/initialShadingGroup/initialShadingGroup_lambert.diffuseColor>
            rel ri:interfaceRecipientsOf:transparency = </Sphere/Looks/initialShadingGroup/initialShadingGroup_lambert.transmissionColor>

            def RisBxdf "initialShadingGroup_lambert"
            {
                ColorFloat diffuseColor
                asset info:filePath = @PxrDiffuse@
                ColorFloat transmissionColor
            }
        }

        def Look "lambert2SG"
        {
            ColorFloat interface:displayColor = (0.0592683, 0.167102, 0.7593)
            float interface:displayOpacity
            ColorFloat interface:transparency
            rel ri:interfaceRecipientsOf:displayColor = </Sphere/Looks/lambert2SG/lambert2SG_lambert.diffuseColor>
            rel ri:interfaceRecipientsOf:transparency = </Sphere/Looks/lambert2SG/lambert2SG_lambert.transmissionColor>

            def RisBxdf "lambert2SG_lambert"
            {
                ColorFloat diffuseColor
                asset info:filePath = @PxrDiffuse@
                ColorFloat transmissionColor
            }
        }

        def Look "lambert3SG"
        {
            ColorFloat interface:displayColor = (0.835528, 0, 0)
            float interface:displayOpacity
            ColorFloat interface:transparency
            rel ri:interfaceRecipientsOf:displayColor = </Sphere/Looks/lambert3SG/lambert3SG_lambert.diffuseColor>
            rel ri:interfaceRecipientsOf:transparency = </Sphere/Looks/lambert3SG/lambert3SG_lambert.transmissionColor>

            def RisBxdf "lambert3SG_lambert"
            {
                ColorFloat diffuseColor
                asset info:filePath = @PxrDiffuse@
                ColorFloat transmissionColor
            }
        }
    }
}

