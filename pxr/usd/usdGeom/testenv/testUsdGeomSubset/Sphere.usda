#usda 1.0
(
    defaultPrim = "Sphere"
    endFrame = 1
    startFrame = 1
)

def Xform "Sphere" (
    kind = "component"
)
{
    def Mesh "SimpleEdges"
    {
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [0, 1, 5, 4, 0, 1, 2, 3]
        PointFloat[] points = [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-07, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-07, -1.37981e-22)]
    }

    def TetMesh "TetMesh"
    {
        # Tetrahedron subsets

        uniform token subsetFamily:tetrahedron_materialBind:familyType = "partition"
        uniform token subsetFamily:tetrahedron_validPartition:familyType = "partition"

        uniform token subsetFamily:tetrahedron_badPartition1:familyType = "partition"
        uniform token subsetFamily:tetrahedron_badPartition2:familyType = "partition"
        uniform token subsetFamily:tetrahedron_badPartition3:familyType = "partition"

        uniform token subsetFamily:tetrahedron_validNonOverlapping:familyType = "nonOverlapping"
        uniform token subsetFamily:tetrahedron_invalidNonOverlapping:familyType = "nonOverlapping"

        uniform token subsetFamily:tetrahedron_validUnrestricted:familyType = "unrestricted"
        uniform token subsetFamily:tetrahedron_invalidUnrestricted:familyType = "unrestricted"

        # Face subsets

        uniform token subsetFamily:face_materialBind:familyType = "partition"
        uniform token subsetFamily:face_validPartition:familyType = "partition"

        uniform token subsetFamily:face_badPartition1:familyType = "partition"
        uniform token subsetFamily:face_badPartition2:familyType = "partition"
        uniform token subsetFamily:face_badPartition3:familyType = "partition"

        uniform token subsetFamily:face_validNonOverlapping:familyType = "nonOverlapping"
        uniform token subsetFamily:face_invalidNonOverlapping:familyType = "nonOverlapping"

        uniform token subsetFamily:face_validUnrestricted:familyType = "unrestricted"
        uniform token subsetFamily:face_invalidUnrestricted:familyType = "unrestricted"
        
        int4[] tetVertexIndices = [(0, 1, 5, 4), (1, 2, 6, 5), (2, 3, 7, 6), (3, 0, 4, 7), (4, 5, 9, 8), (5, 6, 10, 9), (6, 7, 11, 10), (7, 4, 8, 11), (1, 0, 12, 2), (1, 12, 3, 2), (12, 0, 3, 13), (8, 9, 13, 10), (10, 13, 12, 11), (13, 11, 8, 10)]
        int3[] surfaceFaceVertexIndices = [(0, 4, 5), (7, 4, 11), (2, 3, 6), (3, 4, 0), (2, 7, 3), (8, 10, 13), (13, 12, 11), (4, 8, 11), (10, 12, 13), (0, 1, 4), (3, 7, 4), (10, 13, 11), (0, 5, 1), (1, 2, 12)]
        PointFloat[] points = [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-07, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-07, -1.37981e-22), (-3.10705e-07, -7.10811, 1.57832e-15), (7.10811, 0, 0), (6.59105e-07, 5.02619, 5.02619), (-5.02619, 4.39403e-07, 5.02619), (-2.19702e-07, -5.02619, 5.02619), (5.02619, 1.11604e-15, 5.02619), (0, -1.57832e-15, -7.10811), (0, 1.57832e-15, 7.10811)]

        def GeomSubset "tetrahedron_green" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_materialBind"
            int[] indices = [12, 13]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3],
                2: [12, 13],
                3: [0, 1, 2, 3]
            }
            rel material:binding =  </Sphere/Looks/initialShadingGroup>
        }


        def GeomSubset "tetrahedron_blue" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_materialBind"
            int[] indices = [0, 1, 2, 3, 8, 9, 10, 11]
            rel material:binding =  </Sphere/Looks/lambert2SG>
            int[] indices.timeSamples = {
                1: [4, 5, 6, 7, 8, 9, 10, 11],
                2: [0, 1, 2, 3, 8, 9, 10, 11],
                3: [4, 5, 6, 7, 8, 9, 10, 11]
            }
        }


        def GeomSubset "tetrahedron_red" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_materialBind"
            int[] indices = [4, 5, 6, 7]
            rel material:binding =  </Sphere/Looks/lambert3SG>
            int[] indices.timeSamples = {
                1: [12, 13],
                2: [4, 5, 6, 7],
                3: [12, 13]
            }
        }


        def GeomSubset "tetrahedron_invalidIndices" 
        # Indices 16 at frame 2 and -1 at frame 3 are invalid.
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_invalidIndices"
            int[] indices = [4, 5, 6, 7]
            int[] indices.timeSamples = {
                1: [12, 13],
                2: [4, 5, 6, 7, 16],
                3: [-1, 12, 13]
            }
        }

        def GeomSubset "tetrahedron_validNonOverlapping_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validNonOverlapping"
            int[] indices = [0, 2, 4, 6, 8, 10, 12]            
            int[] indices.timeSamples = {
                1: [1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "tetrahedron_validNonOverlapping_2"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validNonOverlapping"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "tetrahedron_invalidNonOverlapping_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_invalidNonOverlapping"
            int[] indices = [0, 2, 4, 6, 8, 10, 12]            
            int[] indices.timeSamples = {
                1: [1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "tetrahedron_invalidNonOverlapping_2"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_invalidNonOverlapping"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "tetrahedron_validUnrestricted_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validUnrestricted"
            # index 0 is overlapping
            int[] indices = [0, 2, 4, 6, 8, 10, 12]
            int[] indices.timeSamples = {
                # index 13 is not included in timeSamples.
                1: [0, 1, 3, 5, 7, 9, 11]
            }
        }

        def GeomSubset "tetrahedron_validUnrestricted_2"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validUnrestricted"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "tetrahedron_invalidUnrestricted_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_invalidUnrestricted"
            # out of bound index - 14
            int[] indices = [0, 2, 4, 6, 8, 10, 12, 14]            
            int[] indices.timeSamples = {
                # negative index
                1: [-1, 1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "tetrahedron_invalidUnrestricted_2"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_invalidUnrestricted"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "tetrahedron_badPartition1_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_badPartition1"
            int[] indices = [4, 5, 6, 7]            
            int[] indices.timeSamples = {
                1: [12, 13]
            }
        }

        def GeomSubset "tetrahedron_badPartition1_2"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_badPartition1"
            int[] indices = [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
            }
        }

        def GeomSubset "tetrahedron_badPartition2_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_badPartition2"
            # mising indices 8-13
            int[] indices = [0, 1, 2, 3, 4, 5, 6, 7]
        }

        def GeomSubset "tetrahedron_badPartition3_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_badPartition3"
            # duplicate indices 0 and 5
            int[] indices = [0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 5]
        }


        def GeomSubset "tetrahedron_validPartition_1"
        {       
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validPartition"
            int[] indices = [0, 1, 2, 3, 4, 5]
            int[] indices.timeSamples = {
                1: [11, 12, 13],
                3: [0, 1, 2, 3, 4, 5]
            }
        }

        def GeomSubset "tetrahedron_validPartition_2"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validPartition"
            int[] indices = [6, 7, 8, 9, 10]
            int[] indices.timeSamples = {
                1: [6, 7, 8, 9, 10],
                2: [0, 1, 2, 3, 4, 5],
                3: [11, 12, 13]
            }
        }

        def GeomSubset "tetrahedron_validPartition_3"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validPartition"
            int[] indices = [11, 12, 13]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3, 4, 5],
                2: [6, 7, 8, 9, 10]
            }
        }

        def GeomSubset "tetrahedron_onlyNegativeIndices"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_onlyNegativeIndices"
            int[] indices = [-1, -2, -3, -4, -5]
        }

        def GeomSubset "tetrahedron_emptyIndicesSomeTimes"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_emptyIndicesSomeTimes"
            int[] indices.timeSamples = {
                0: [],
                1: [0, 1, 2, 3],
                2: []
            }
        }

        def GeomSubset "tetrahedron_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_emptyIndicesAtAllTimes"
        }

        def GeomSubset "face_green" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "face_materialBind"
            int[] indices = [12, 13]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3],
                2: [12, 13],
                3: [0, 1, 2, 3]
            }
            rel material:binding =  </Sphere/Looks/initialShadingGroup>
        }


        def GeomSubset "face_blue" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "face_materialBind"
            int[] indices = [0, 1, 2, 3, 8, 9, 10, 11]
            rel material:binding =  </Sphere/Looks/lambert2SG>
            int[] indices.timeSamples = {
                1: [4, 5, 6, 7, 8, 9, 10, 11],
                2: [0, 1, 2, 3, 8, 9, 10, 11],
                3: [4, 5, 6, 7, 8, 9, 10, 11]
            }
        }


        def GeomSubset "face_red" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "face_materialBind"
            int[] indices = [4, 5, 6, 7]
            rel material:binding =  </Sphere/Looks/lambert3SG>
            int[] indices.timeSamples = {
                1: [12, 13],
                2: [4, 5, 6, 7],
                3: [12, 13]
            }
        }


        def GeomSubset "face_invalidIndices" 
        # Indices 16 at frame 2 and -1 at frame 3 are invalid.
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidIndices"
            int[] indices = [4, 5, 6, 7]
            int[] indices.timeSamples = {
                1: [12, 13],
                2: [4, 5, 6, 7, 16],
                3: [-1, 12, 13]
            }
        }

        def GeomSubset "face_validNonOverlapping_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validNonOverlapping"
            int[] indices = [0, 2, 4, 6, 8, 10, 12]            
            int[] indices.timeSamples = {
                1: [1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "face_validNonOverlapping_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validNonOverlapping"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "face_invalidNonOverlapping_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidNonOverlapping"
            int[] indices = [0, 2, 4, 6, 8, 10, 12]            
            int[] indices.timeSamples = {
                1: [1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "face_invalidNonOverlapping_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidNonOverlapping"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "face_validUnrestricted_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validUnrestricted"
            # index 0 is overlapping
            int[] indices = [0, 2, 4, 6, 8, 10, 12]
            int[] indices.timeSamples = {
                # index 13 is not included in timeSamples.
                1: [0, 1, 3, 5, 7, 9, 11]
            }
        }

        def GeomSubset "face_validUnrestricted_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validUnrestricted"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "face_invalidUnrestricted_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidUnrestricted"
            # out of bound index - 14
            int[] indices = [0, 2, 4, 6, 8, 10, 12, 14]            
            int[] indices.timeSamples = {
                # negative index
                1: [-1, 1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "face_invalidUnrestricted_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidUnrestricted"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "face_badPartition1_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_badPartition1"
            int[] indices = [4, 5, 6, 7]            
            int[] indices.timeSamples = {
                1: [12, 13]
            }
        }

        def GeomSubset "face_badPartition1_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_badPartition1"
            int[] indices = [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
            }
        }

        def GeomSubset "face_badPartition2_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_badPartition2"
            # mising indices 8-13
            int[] indices = [0, 1, 2, 3, 4, 5, 6, 7]
        }

        def GeomSubset "face_badPartition3_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_badPartition3"
            # duplicate indices 0 and 5
            int[] indices = [0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 5]
        }


        def GeomSubset "face_validPartition_1"
        {       
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices = [0, 1, 2, 3, 4, 5]
            int[] indices.timeSamples = {
                1: [11, 12, 13],
                3: [0, 1, 2, 3, 4, 5]
            }
        }

        def GeomSubset "face_validPartition_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices = [6, 7, 8, 9, 10]
            int[] indices.timeSamples = {
                1: [6, 7, 8, 9, 10],
                2: [0, 1, 2, 3, 4, 5],
                3: [11, 12, 13]
            }
        }

        def GeomSubset "face_validPartition_3"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices = [11, 12, 13]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3, 4, 5],
                2: [6, 7, 8, 9, 10]
            }
        }

        def GeomSubset "face_onlyNegativeIndices"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_onlyNegativeIndices"
            int[] indices = [-1, -2, -3, -4, -5]
        }

        def GeomSubset "face_emptyIndicesSomeTimes"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_emptyIndicesSomeTimes"
            int[] indices.timeSamples = {
                0: [],
                1: [0, 1, 2, 3],
                2: []
            }
        }

        def GeomSubset "face_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_emptyIndicesAtAllTimes"
        }
    }

    def TetMesh "VaryingTetMesh"
    {
        uniform token subsetFamily:tetrahedron_validPartition:familyType = "partition"
        uniform token subsetFamily:face_validPartition:familyType = "partition"

        int4[] tetVertexIndices.timeSamples = {
            1: [(0, 1, 2, 3)],
            2: [(0, 1, 2, 3), (4, 5, 6, 7)],
            3: [(0, 1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11)]
        }

        int3[] surfaceFaceVertexIndices.timeSamples = {
            1: [(1, 2, 3), (0, 3, 2), (0, 1, 3), (0, 2, 1)],
            2: [(1, 2, 3), (0, 3, 2), (0, 1, 3), (0, 2, 1), (5, 6, 7), (4, 7, 6), (4, 5, 7), (4, 6, 5)],
            3: [(1, 2, 3), (0, 3, 2), (0, 1, 3), (0, 2, 1), (5, 6, 7), (4, 7, 6), (4, 5, 7), (4, 6, 5), (9, 10, 11), (8, 11, 10), (8, 9, 11), (8, 10, 9)]
        }

        PointFloat[] points.timeSamples = {
            1: [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619)],
            2: [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-07, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-07, -1.37981e-22), (-3.10705e-07, -7.10811, 1.57832e-15), (7.10811, 0, 0)],
            3: [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-07, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-07, -1.37981e-22), (-3.10705e-07, -7.10811, 1.57832e-15), (7.10811, 0, 0), (6.59105e-07, 5.02619, 5.02619), (-5.02619, 4.39403e-07, 5.02619), (-2.19702e-07, -5.02619, 5.02619), (5.02619, 1.11604e-15, 5.02619)]
        }

        def GeomSubset "tetrahedron_validPartition_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validPartition"
            int[] indices.timeSamples = {
                1: [0],
                2: [],
                3: [0]
            }
        }

        def GeomSubset "tetrahedron_validPartition_2"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [0, 1],
                3: [1]
            }
        }

        def GeomSubset "tetrahedron_validPartition_3"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [],
                3: [2]
            }
        }

        def GeomSubset "tetrahedron_invalidNoDefaultTimeElements"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_invalidNoDefaultTimeElements"
            int[] indices = [0]
            int[] indices.timeSamples = {
                1: [0],
                2: [1],
                3: [2]
            }
        }

        def GeomSubset "face_validPartition_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3],
                2: [],
                3: [0, 1, 2, 3]
            }
        }

        def GeomSubset "face_validPartition_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [0, 1, 2, 3, 4, 5, 6, 7],
                3: [4, 5, 6, 7]
            }
        }

        def GeomSubset "face_validPartition_3"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [],
                3: [8, 9, 10, 11]
            }
        }

        def GeomSubset "face_invalidNoDefaultTimeElements"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidNoDefaultTimeElements"
            int[] indices = [0, 1, 2, 3]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3],
                2: [4, 5, 6, 7],
                3: [8, 9, 10, 11]
            }
        }
    }

    def TetMesh "NullTetMesh"
    {
        uniform token subsetFamily:tetrahedron_invalidPartition:familyType = "partition"
        uniform token subsetFamily:face_invalidPartition:familyType = "partition"

        def GeomSubset "tetrahedron_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_emptyIndicesAtAllTimes"
        }

        def GeomSubset "tetrahedron_invalidPartition_1"
        {
            uniform token elementType = "tetrahedron"
            uniform token familyName = "tetrahedron_invalidPartition"
            int[] indices = [0, 1, 2, 3]
        }

        def GeomSubset "face_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_emptyIndicesAtAllTimes"
        }

        def GeomSubset "face_invalidPartition_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidPartition"
            int[] indices = [0, 1, 2, 3]
        }
    }
    
    def Mesh "pSphere1" 
    {
        Vec3f[] extent = [(-7.10811, -7.10811, -7.10811), (7.10811, 7.10811, 7.10811)]

        # Face subsets

        uniform token subsetFamily:face_materialBind:familyType = "partition"
        uniform token subsetFamily:face_validPartition:familyType = "partition"

        uniform token subsetFamily:face_badPartition1:familyType = "partition"
        uniform token subsetFamily:face_badPartition2:familyType = "partition"
        uniform token subsetFamily:face_badPartition3:familyType = "partition"

        uniform token subsetFamily:face_validNonOverlapping:familyType = "nonOverlapping"
        uniform token subsetFamily:face_invalidNonOverlapping:familyType = "nonOverlapping"

        uniform token subsetFamily:face_validUnrestricted:familyType = "unrestricted"
        uniform token subsetFamily:face_invalidUnrestricted:familyType = "unrestricted"

        # Point subsets

        uniform token subsetFamily:point_physicsAttachment:familyType = "partition"
        uniform token subsetFamily:point_validPartition:familyType = "partition"

        uniform token subsetFamily:point_badPartition1:familyType = "partition"
        uniform token subsetFamily:point_badPartition2:familyType = "partition"
        uniform token subsetFamily:point_badPartition3:familyType = "partition"

        uniform token subsetFamily:point_validNonOverlapping:familyType = "nonOverlapping"
        uniform token subsetFamily:point_invalidNonOverlapping:familyType = "nonOverlapping"

        uniform token subsetFamily:point_validUnrestricted:familyType = "unrestricted"
        uniform token subsetFamily:point_invalidUnrestricted:familyType = "unrestricted"

        # Edge subsets

        uniform token subsetFamily:edge_physicsAttachment:familyType = "partition"
        uniform token subsetFamily:edge_validPartition:familyType = "partition"

        uniform token subsetFamily:edge_badPartition1:familyType = "partition"
        uniform token subsetFamily:edge_badPartition2:familyType = "partition"
        uniform token subsetFamily:edge_badPartition3:familyType = "partition"

        uniform token subsetFamily:edge_validNonOverlapping:familyType = "nonOverlapping"
        uniform token subsetFamily:edge_invalidNonOverlapping:familyType = "nonOverlapping"

        uniform token subsetFamily:edge_validUnrestricted:familyType = "unrestricted"
        uniform token subsetFamily:edge_invalidUnrestricted:familyType = "unrestricted"

        def GeomSubset "face_green" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "face_materialBind"
            int[] indices = [12, 13, 14, 15]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3],
                2: [12, 13, 14, 15],
                3: [0, 1, 2, 3]
            }
            rel material:binding =  </Sphere/Looks/initialShadingGroup>
        }


        def GeomSubset "face_blue" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "face_materialBind"
            int[] indices = [0, 1, 2, 3, 8, 9, 10, 11]
            rel material:binding =  </Sphere/Looks/lambert2SG>
            int[] indices.timeSamples = {
                1: [4, 5, 6, 7, 8, 9, 10, 11],
                2: [0, 1, 2, 3, 8, 9, 10, 11],
                3: [4, 5, 6, 7, 8, 9, 10, 11]
            }
        }


        def GeomSubset "face_red" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "face_materialBind"
            int[] indices = [4, 5, 6, 7]
            rel material:binding =  </Sphere/Looks/lambert3SG>
            int[] indices.timeSamples = {
                1: [12, 13, 14, 15],
                2: [4, 5, 6, 7],
                3: [12, 13, 14, 15]
            }
        }


        def GeomSubset "face_invalidIndices" 
        # Indices 16 at frame 2 and -1 at frame 3 are invalid.
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidIndices"
            int[] indices = [4, 5, 6, 7]
            int[] indices.timeSamples = {
                1: [12, 13, 14, 15],
                2: [4, 5, 6, 7, 16],
                3: [-1, 12, 13, 14, 15]
            }
        }

        def GeomSubset "face_validNonOverlapping_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validNonOverlapping"
            int[] indices = [0, 2, 4, 6, 8, 10, 12, 14]            
            int[] indices.timeSamples = {
                1: [1, 3, 5, 7, 9, 11, 13, 15]
            }
        }

        def GeomSubset "face_validNonOverlapping_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validNonOverlapping"
            int[] indices = [1, 3, 5, 7, 9, 11, 13, 15]
            int[] indices.timeSamples = {
                2: [0, 2, 4, 6, 8, 10, 12, 14]
            }
        }

        def GeomSubset "face_invalidNonOverlapping_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidNonOverlapping"
            int[] indices = [0, 2, 4, 6, 8, 10, 12, 14]            
            int[] indices.timeSamples = {
                1: [1, 3, 5, 7, 9, 11, 13, 15]
            }
        }

        def GeomSubset "face_invalidNonOverlapping_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidNonOverlapping"
            int[] indices = [1, 3, 5, 7, 9, 11, 13, 15]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 4, 6, 8, 10, 12, 14]
            }
        }

        def GeomSubset "face_validUnrestricted_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validUnrestricted"
            # index 0 is overlapping
            int[] indices = [0, 2, 4, 6, 8, 10, 12, 14, 15]
            int[] indices.timeSamples = {
                # index 15 is not included in timeSamples.
                1: [0, 1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "face_validUnrestricted_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validUnrestricted"
            int[] indices = [1, 3, 5, 7, 9, 11, 13, 15]
            int[] indices.timeSamples = {
                2: [0, 2, 4, 6, 8, 10, 12, 14]
            }
        }

        def GeomSubset "face_invalidUnrestricted_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidUnrestricted"
            # out of bound index - 16
            int[] indices = [0, 2, 4, 6, 8, 10, 12, 14, 16]            
            int[] indices.timeSamples = {
                # negative index
                1: [-1, 1, 3, 5, 7, 9, 11, 13, 15]
            }
        }

        def GeomSubset "face_invalidUnrestricted_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidUnrestricted"
            int[] indices = [1, 3, 5, 7, 9, 11, 13, 15]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 4, 6, 8, 10, 12, 14]
            }
        }

        def GeomSubset "face_badPartition1_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_badPartition1"
            int[] indices = [4, 5, 6, 7]            
            int[] indices.timeSamples = {
                1: [12, 13, 14, 15]
            }
        }

        def GeomSubset "face_badPartition1_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_badPartition1"
            int[] indices = [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
            }
        }

        def GeomSubset "face_badPartition2_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_badPartition2"
            # mising indices 8-15
            int[] indices = [0, 1, 2, 3, 4, 5, 6, 7]
        }

        def GeomSubset "face_badPartition3_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_badPartition3"
            # duplicate indices 0 and 5
            int[] indices = [0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 15]
        }


        def GeomSubset "face_validPartition_1"
        {       
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices = [0, 1, 2, 3, 4, 5]
            int[] indices.timeSamples = {
                1: [11, 12, 13, 14, 15],
                3: [0, 1, 2, 3, 4, 5]
            }
        }

        def GeomSubset "face_validPartition_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices = [6, 7, 8, 9, 10]
            int[] indices.timeSamples = {
                1: [6, 7, 8, 9, 10],
                2: [0, 1, 2, 3, 4, 5],
                3: [11, 12, 13, 14, 15]
            }
        }

        def GeomSubset "face_validPartition_3"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices = [11, 12, 13, 14, 15]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3, 4, 5],
                2: [6, 7, 8, 9, 10]
            }
        }

        def GeomSubset "face_onlyNegativeIndices"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_onlyNegativeIndices"
            int[] indices = [-1, -2, -3, -4, -5]
        }

        def GeomSubset "face_emptyIndicesSomeTimes"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_emptyIndicesSomeTimes"
            int[] indices.timeSamples = {
                0: [],
                1: [0, 1, 2, 3],
                2: []
            }
        }

        def GeomSubset "face_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "face"
            uniform token familyName = "emptyIndicesAtAllTimes"
        }

        def GeomSubset "point_green"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_physicsAttachment"
            int[] indices = [10, 11, 12, 13]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3],
                2: [10, 11, 12, 13],
                3: [0, 1, 2, 3]
            }
        }

        def GeomSubset "point_blue"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_physicsAttachment"
            int[] indices = [0, 1, 2, 3, 8, 9]
            int[] indices.timeSamples = {
                1: [4, 5, 6, 7, 8, 9],
                2: [0, 1, 2, 3, 8, 9],
                3: [4, 5, 6, 7, 8, 9]
            }
        }

        def GeomSubset "point_red"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_physicsAttachment"
            int[] indices = [4, 5, 6, 7]
            int[] indices.timeSamples = {
                1: [10, 11, 12, 13],
                2: [4, 5, 6, 7],
                3: [10, 11, 12, 13]
            }
        }

        def GeomSubset "point_invalidIndices" 
        # Indices 14 at frame 1 and -1 at frame 3 are invalid.
        {
            uniform token elementType = "point"
            uniform token familyName = "point_invalidIndices"
            int[] indices = [4, 5, 6, 7]
            int[] indices.timeSamples = {
                1: [12, 13, 14],
                2: [4, 5, 6, 7],
                3: [-1, 12, 13]
            }
        }

        def GeomSubset "point_validNonOverlapping_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validNonOverlapping"
            int[] indices = [0, 2, 4, 6, 8, 10, 12]            
            int[] indices.timeSamples = {
                1: [1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "point_validNonOverlapping_2"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validNonOverlapping"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "point_invalidNonOverlapping_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_invalidNonOverlapping"
            int[] indices = [0, 2, 4, 6, 8, 10, 12]            
            int[] indices.timeSamples = {
                1: [1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "point_invalidNonOverlapping_2"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_invalidNonOverlapping"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "point_validUnrestricted_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validUnrestricted"
            # index 0 is overlapping
            int[] indices = [0, 2, 4, 6, 8, 10, 12]
            int[] indices.timeSamples = {
                # index 15 is not included in timeSamples.
                1: [0, 1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "point_validUnrestricted_2"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validUnrestricted"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "point_invalidUnrestricted_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_invalidUnrestricted"
            # out of bound index - 14
            int[] indices = [0, 2, 4, 6, 8, 10, 12, 14]            
            int[] indices.timeSamples = {
                # negative index
                1: [-1, 1, 3, 5, 7, 9, 11, 13]
            }
        }

        def GeomSubset "point_invalidUnrestricted_2"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_invalidUnrestricted"
            int[] indices = [1, 3, 5, 7, 9, 11, 13]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 4, 6, 8, 10, 12]
            }
        }

        def GeomSubset "point_badPartition1_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_badPartition1"
            int[] indices = [4, 5, 6, 7]            
            int[] indices.timeSamples = {
                1: [12, 13]
            }
        }

        def GeomSubset "point_badPartition1_2"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_badPartition1"
            int[] indices = [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
            }
        }

        def GeomSubset "point_badPartition2_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_badPartition2"
            # mising indices 8-15
            int[] indices = [0, 1, 2, 3, 4, 5, 6, 7]
        }

        def GeomSubset "point_badPartition3_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_badPartition3"
            int[] indices = [0, 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 5]
        }

        def GeomSubset "point_validPartition_1"
        {       
            uniform token elementType = "point"
            uniform token familyName = "point_validPartition"
            int[] indices = [0, 1, 2, 3, 4, 5]
            int[] indices.timeSamples = {
                1: [11, 12, 13],
                3: [0, 1, 2, 3, 4, 5]
            }
        }

        def GeomSubset "point_validPartition_2"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validPartition"
            int[] indices = [6, 7, 8, 9, 10]
            int[] indices.timeSamples = {
                1: [6, 7, 8, 9, 10],
                2: [0, 1, 2, 3, 4, 5],
                3: [11, 12, 13]
            }
        }

        def GeomSubset "point_validPartition_3"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validPartition"
            int[] indices = [11, 12, 13]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3, 4, 5],
                2: [6, 7, 8, 9, 10]
            }
        }

        def GeomSubset "point_onlyNegativeIndices"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_onlyNegativeIndices"
            int[] indices = [-1, -2, -3, -4, -5]
        }

        def GeomSubset "point_emptyIndicesSomeTimes"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_emptyIndicesSomeTimes"
            int[] indices.timeSamples = {
                0: [],
                1: [0, 1, 2, 3],
                2: []
            }
        }

        def GeomSubset "point_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_emptyIndicesAtAllTimes"
        }

        def GeomSubset "edge_green"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_physicsAttachment"
            int[] indices = [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13]
            int[] indices.timeSamples = {
                1: [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13],
                2: [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10],
                3: [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13]
            }
        }

        def GeomSubset "edge_blue"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_physicsAttachment"
            int[] indices = [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]
            int[] indices.timeSamples = {
                1: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6],
                2: [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13],
                3: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]
            }
        }

        def GeomSubset "edge_red"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_physicsAttachment"
            int[] indices = [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            int[] indices.timeSamples = {
                1: [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10],
                2: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6],
                3: [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            }
        }

        def GeomSubset "edge_invalidIndices" 
        # Indices (0, 2) at default time and (-1, 12) at frame 3 are invalid.
        # Frame 2 has an odd number of indices
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_invalidIndices"
            int[] indices = [4, 5, 6, 7, 0, 2]
            int[] indices.timeSamples = {
                1: [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13],
                2: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2],
                3: [-1, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            }
        }

        def GeomSubset "edge_validNonOverlapping_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validNonOverlapping"
            int[] indices = [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]            
            int[] indices.timeSamples = {
                1: [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            }
        }

        def GeomSubset "edge_validNonOverlapping_2"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validNonOverlapping"
            int[] indices = [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            int[] indices.timeSamples = {
                2: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]
            }
        }

        def GeomSubset "edge_invalidNonOverlapping_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_invalidNonOverlapping"
            int[] indices = [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]          
            int[] indices.timeSamples = {
                1: [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            }
        }

        def GeomSubset "edge_invalidNonOverlapping_2"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_invalidNonOverlapping"
            int[] indices = [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            int[] indices.timeSamples = {
                2: [0, 1, 3, 7, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]
            }
        }

        def GeomSubset "edge_validUnrestricted_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validUnrestricted"
            # index (0, 1) is overlapping
            int[] indices = [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]
            int[] indices.timeSamples = {
                # index (11, 13) is not included in timeSamples.
                1: [0, 1, 7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13]
            }
        }

        def GeomSubset "edge_validUnrestricted_2"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validUnrestricted"
            int[] indices = [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            }
        }

        def GeomSubset "edge_invalidUnrestricted_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_invalidUnrestricted"
            # out of bound index - 14
            int[] indices = [0, 1, 0, 3, 0, 4, 0, 14, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]           
            int[] indices.timeSamples = {
                # negative index
                1: [-1, 1, 7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13]
            }
        }

        def GeomSubset "edge_invalidUnrestricted_2"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_invalidUnrestricted"
            int[] indices = [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13]
            int[] indices.timeSamples = {
                2: [0, 1, 2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            }
        }

        def GeomSubset "edge_badPartition1_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_badPartition1"
            int[] indices = [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11]    
            int[] indices.timeSamples = {
                1: [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11]
            }
        }

        def GeomSubset "edge_badPartition1_2"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_badPartition1"
            # out of bounds index - (12, 14)
            int[] indices = [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6,
                    2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10, 12, 14]
            int[] indices.timeSamples = {
                2: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6,
                    2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            }
        }

        def GeomSubset "edge_badPartition2_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_badPartition2"
            # mising indices (10, 13) and (11, 13)
            int[] indices = [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6,
                    2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10,
                    7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11]
        }

        def GeomSubset "edge_badPartition3_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_badPartition3"
            # duplicate indices
            int[] indices = [0, 1, 0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6,
                    2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10,
                    7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13]
        }

        def GeomSubset "edge_validPartition_1"
        {       
            uniform token elementType = "edge"
            uniform token familyName = "edge_validPartition"
            int[] indices = [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]
            int[] indices.timeSamples = {
                1: [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13],
                3: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6]
            }
        }

        def GeomSubset "edge_validPartition_2"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validPartition"
            int[] indices = [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            int[] indices.timeSamples = {
                1: [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10],
                2: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6],
                3: [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13]
            }
        }

        def GeomSubset "edge_validPartition_3"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validPartition"
            int[] indices = [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13]
            int[] indices.timeSamples = {
                1: [0, 1, 0, 3, 0, 4, 0, 12, 1, 2, 1, 5, 1, 12, 2, 3, 2, 6],
                2: [2, 12, 3, 7, 3, 12, 4, 5, 4, 7, 4, 8, 5, 6, 5, 9, 6, 7, 6, 10]
            }
        }

        def GeomSubset "edge_onlyNegativeIndices"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_onlyNegativeIndices"
            int[] indices = [-1, -2, -3, -4]
        }

        def GeomSubset "edge_emptyIndicesSomeTimes"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_emptyIndicesSomeTimes"
            int[] indices.timeSamples = {
                0: [],
                1: [7, 11, 8, 9, 8, 11, 8, 13, 9, 10, 9, 13, 10, 11, 10, 13, 11, 13],
                2: []
            }
        }

        def GeomSubset "edge_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_emptyIndicesAtAllTimes"
        }

        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 5, 4, 1, 2, 6, 5, 2, 3, 7, 6, 3, 0, 4, 7, 4, 5, 9, 8, 5, 6, 10, 9, 6, 7, 11, 10, 7, 4, 8, 11, 1, 0, 12, 2, 1, 12, 3, 2, 12, 0, 3, 12, 8, 9, 13, 9, 10, 13, 10, 11, 13, 11, 8, 13]
        PointFloat[] points = [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-07, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-07, -1.37981e-22), (-3.10705e-07, -7.10811, 1.57832e-15), (7.10811, 0, 0), (6.59105e-07, 5.02619, 5.02619), (-5.02619, 4.39403e-07, 5.02619), (-2.19702e-07, -5.02619, 5.02619), (5.02619, 1.11604e-15, 5.02619), (0, -1.57832e-15, -7.10811), (0, 1.57832e-15, 7.10811)]
        Vec2f[] primvars:st = [(0, 0.25), (0.25, 0.25), (0.25, 0.5), (0, 0.5), (0.25, 0.25), (0.5, 0.25), (0.5, 0.5), (0.25, 0.5), (0.5, 0.25), (0.75, 0.25), (0.75, 0.5), (0.5, 0.5), (0.75, 0.25), (1, 0.25), (1, 0.5), (0.75, 0.5), (0, 0.5), (0.25, 0.5), (0.25, 0.75), (0, 0.75), (0.25, 0.5), (0.5, 0.5), (0.5, 0.75), (0.25, 0.75), (0.5, 0.5), (0.75, 0.5), (0.75, 0.75), (0.5, 0.75), (0.75, 0.5), (1, 0.5), (1, 0.75), (0.75, 0.75), (0.25, 0.25), (0, 0.25), (0.125, 0), (0.5, 0.25), (0.25, 0.25), (0.375, 0), (0.75, 0.25), (0.5, 0.25), (0.625, 0), (1, 0.25), (0.75, 0.25), (0.875, 0), (0, 0.75), (0.25, 0.75), (0.125, 1), (0.25, 0.75), (0.5, 0.75), (0.375, 1), (0.5, 0.75), (0.75, 0.75), (0.625, 1), (0.75, 0.75), (1, 0.75), (0.875, 1)] (
            interpolation = "faceVarying"
        )
        Vec3d xformOp:translate = (0.191260557342787, 0.0415678998936819, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Mesh "VaryingMesh"
    {
        uniform token subsetFamily:validPartition:familyType = "partition"

        int[] faceVertexCounts.timeSamples = {
            1: [4],
            2: [4, 4],
            3: [4, 4, 4]
        }
        int[] faceVertexIndices.timeSamples = {
            1: [0, 1, 2, 3],
            2: [0, 1, 2, 3, 4, 5, 6, 7],
            3: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
        }

        PointFloat[] points.timeSamples = {
            1: [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619)],
            2: [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-07, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-07, -1.37981e-22), (-3.10705e-07, -7.10811, 1.57832e-15), (7.10811, 0, 0)],
            3: [(6.59105e-07, 5.02619, -5.02619), (-5.02619, 4.39403e-07, -5.02619), (-2.19702e-07, -5.02619, -5.02619), (5.02619, -1.11604e-15, -5.02619), (9.32115e-07, 7.10811, -1.57832e-15), (-7.10811, 6.2141e-07, -1.37981e-22), (-3.10705e-07, -7.10811, 1.57832e-15), (7.10811, 0, 0), (6.59105e-07, 5.02619, 5.02619), (-5.02619, 4.39403e-07, 5.02619), (-2.19702e-07, -5.02619, 5.02619), (5.02619, 1.11604e-15, 5.02619)]
        }

        def GeomSubset "face_validPartition_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices.timeSamples = {
                1: [0],
                2: [],
                3: [0]
            }
        }

        def GeomSubset "face_validPartition_2"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [0, 1],
                3: [1]
            }
        }

        def GeomSubset "face_validPartition_3"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [],
                3: [2]
            }
        }

        def GeomSubset "face_invalidNoDefaultTimeElements"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidNoDefaultTimeElements"
            int[] indices = [0]
            int[] indices.timeSamples = {
                1: [0],
                2: [1],
                3: [2]
            }
        }

        def GeomSubset "point_validPartition_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validPartition"
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3],
                2: [],
                3: [0, 1, 2, 3]
            }
        }

        def GeomSubset "point_validPartition_2"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [0, 1, 2, 3, 4, 5, 6, 7],
                3: [4, 5, 6, 7]
            }
        }

        def GeomSubset "point_validPartition_3"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [],
                3: [8, 9, 10, 11]
            }
        }

        def GeomSubset "point_invalidNoDefaultTimeElements"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_invalidNoDefaultTimeElements"
            int[] indices = [0]
            int[] indices.timeSamples = {
                1: [0, 1, 2, 3],
                2: [0, 1, 2, 3, 4, 5, 6, 7],
                3: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
            }
        }

        def GeomSubset "edge_validPartition_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validPartition"
            int[] indices.timeSamples = {
                1: [0, 1, 1, 2, 2, 3, 3, 0],
                2: [],
                3: [0, 1, 1, 2, 2, 3, 3, 0]
            }
        }

        def GeomSubset "edge_validPartition_2"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4],
                3: [4, 5, 5, 6, 6, 7, 7, 4]
            }
        }

        def GeomSubset "edge_validPartition_3"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_validPartition"
            int[] indices.timeSamples = {
                1: [],
                2: [],
                3: [8, 9, 9, 10, 10, 11, 11, 8]
            }
        }

        def GeomSubset "edge_invalidNoDefaultTimeElements"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_invalidNoDefaultTimeElements"
            int[] indices = [0, 1]
            int[] indices.timeSamples = {
                1: [0, 1, 1, 2, 2, 3, 3, 0],
                2: [0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4],
                3: [0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 8, 9, 9, 10, 10, 11, 11, 8]
            }
        }
    }

    def Mesh "NullMesh"
    {
        uniform token subsetFamily:invalidPartition:familyType = "partition"

        def GeomSubset "face_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_emptyIndicesAtAllTimes"
        }

        def GeomSubset "face_invalidPartition_1"
        {
            uniform token elementType = "face"
            uniform token familyName = "face_invalidPartition"
            int[] indices = [0, 1, 2, 3]
        }

        def GeomSubset "point_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_emptyIndicesAtAllTimes"
        }

        def GeomSubset "point_invalidPartition_1"
        {
            uniform token elementType = "point"
            uniform token familyName = "point_invalidPartition"
            int[] indices = [0, 1, 2, 3]
        }

        def GeomSubset "edge_emptyIndicesAtAllTimes"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_emptyIndicesAtAllTimes"
        }

        def GeomSubset "edge_invalidPartition_1"
        {
            uniform token elementType = "edge"
            uniform token familyName = "edge_invalidPartition"
            int[] indices = [0, 1, 1, 2]
        }
    }

    def Scope "Looks"
    {
        def Look "initialShadingGroup"
        {
            ColorFloat interface:displayColor = (0.00902149, 1, 0.0393514)
            float interface:displayOpacity
            ColorFloat interface:transparency
            rel ri:interfaceRecipientsOf:displayColor = </Sphere/Looks/initialShadingGroup/initialShadingGroup_lambert.diffuseColor>
            rel ri:interfaceRecipientsOf:transparency = </Sphere/Looks/initialShadingGroup/initialShadingGroup_lambert.transmissionColor>

            def Shader "initialShadingGroup_lambert"
            {
                ColorFloat diffuseColor
                uniform token info:id = "PxrDiffuse"
                ColorFloat transmissionColor
            }
        }

        def Look "lambert2SG"
        {
            ColorFloat interface:displayColor = (0.0592683, 0.167102, 0.7593)
            float interface:displayOpacity
            ColorFloat interface:transparency
            rel ri:interfaceRecipientsOf:displayColor = </Sphere/Looks/lambert2SG/lambert2SG_lambert.diffuseColor>
            rel ri:interfaceRecipientsOf:transparency = </Sphere/Looks/lambert2SG/lambert2SG_lambert.transmissionColor>

            def Shader "lambert2SG_lambert"
            {
                ColorFloat diffuseColor
                uniform token info:id = "PxrDiffuse"
                ColorFloat transmissionColor
            }
        }

        def Look "lambert3SG"
        {
            ColorFloat interface:displayColor = (0.835528, 0, 0)
            float interface:displayOpacity
            ColorFloat interface:transparency
            rel ri:interfaceRecipientsOf:displayColor = </Sphere/Looks/lambert3SG/lambert3SG_lambert.diffuseColor>
            rel ri:interfaceRecipientsOf:transparency = </Sphere/Looks/lambert3SG/lambert3SG_lambert.transmissionColor>

            def Shader "lambert3SG_lambert"
            {
                ColorFloat diffuseColor
                uniform token info:id = "PxrDiffuse"
                ColorFloat transmissionColor
            }
        }
    }
}

