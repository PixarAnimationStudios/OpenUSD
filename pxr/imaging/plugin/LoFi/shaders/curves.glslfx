-- glslfx version 0.1

//
// Copyright 2020 benmalartre
//
// Unlicensed 
//

#import $TOOLS/LoFi/shaders/common.glslfx

--- --------------------------------------------------------------------------
-- configuration
{
    "techniques": {
        "default": {
            "vertex": {
                "source": [ "Common.Camera",
                            "Curves.Vertex" ]
            },
            "geometry": {
                "source": [ "Common.Camera",
                            "Curves.Geometry" ]
            },
            "fragment": {
                "source": [ "Common.Camera",
                            "Curves.Fragment" ]
            }
        }
    }
}

--- --------------------------------------------------------------------------
-- glsl Curves.Vertex

void main()
{
  
  mat4 viewModel = GetViewMatrix() * GetModelMatrix();
  vec4 p = viewModel * vec4(LOFI_GET_position(), 1.0);
  vec4 n = LOFI_GET_normalMatrix() * vec4(LOFI_GET_normal(), 0.0);
#ifdef LOFI_HAS_color
  LOFI_SET_color(LOFI_GET_color());
#endif
  LOFI_SET_position(p.xyz / p.w);
  LOFI_SET_normal(n.xyz);
#ifdef LOFI_HAS_width
  LOFI_SET_width(LOFI_GET_width());
#endif
  gl_Position = GetProjectionMatrix() * p;

}

--- --------------------------------------------------------------------------
-- glsl Curves.Geometry

layout (lines_adjacency) in;
layout (triangle_strip, max_vertices = 4) out;

void main()
{
  float lineWidth = 0.1;
#ifdef LOFI_HAS_width
  float w1 = LOFI_GET_width(1) * 0.5;
  float w2 = LOFI_GET_width(2) * 0.5;
#else
  float w1 = 0.1;
  float w2 = 0.1;
#endif

  vec3 p0 = LOFI_GET_position(0);
  vec3 p1 = LOFI_GET_position(1);
  vec3 p2 = LOFI_GET_position(2);
  vec3 p3 = LOFI_GET_position(3);

  vec3 seg0, seg1, seg2;
  seg0 = p1-p0;
  seg1 = p2-p1;
  seg2 = p3-p2;

  vec3 tan1, tan2;
  vec3 nrm = normalize(cross(normalize(seg1), vec3(0,0,1)));

  if(length(seg0) < 0.0001)
    tan1 = normalize(seg1);
  else
    tan1 = normalize(seg0 * 0.5 + seg1 * 0.5);

  if(length(seg2)< 0.0001)
    tan2 = normalize(seg1);
  else
    tan2 = normalize(seg1 * 0.5+ seg2 * 0.5);

  vec3 miter1 = normalize(cross(tan1, vec3(0,0,1)));
  vec3 miter2 = normalize(cross(tan2, vec3(0,0,1)));

  float l1 = w1 / dot( miter1, nrm );
  float l2 = w2 / dot( miter2, nrm );

  mat4 projMatrix = GetProjectionMatrix();
  gl_Position = projMatrix*vec4(p1 + miter1 * l1, 1.0);
#ifdef LOFI_HAS_color
  LOFI_SET_color(LOFI_GET_color(1));
#endif
  
  //g_color = v_color[1];
  EmitVertex();
  gl_Position = projMatrix*vec4(p1 - miter1 * l1, 1.0);
  EmitVertex();
  gl_Position = projMatrix*vec4(p2 + miter2 * l2, 1.0);
#ifdef LOFI_HAS_color
  LOFI_SET_color(LOFI_GET_color(2));
#endif
  //g_color = v_color[2];
  EmitVertex();
  gl_Position = projMatrix*vec4(p2 - miter2 * l2, 1.0);
  EmitVertex();
  EndPrimitive();
}

--- --------------------------------------------------------------------------
-- glsl Curves.Fragment
void main()
{
  vec3 viewPoint = GetViewPoint();
  vec3 delta = normalize(viewPoint - LOFI_GET_position());

  vec3 lightDir = normalize((GetViewMatrix() * vec4(1.0,1.0,1.0,0.0)).xyz);
#ifdef LOFI_HAS_color
  vec3 color = LOFI_GET_color();
#else
  vec3 color = LOFI_GET_displayColor();
#endif
/*
  float dc = dot(delta, LOFI_GET_normal())  ;
  //if(dc< 0.5) color *= 0.0;
  float dl = dot(lightDir, LOFI_GET_normal())  ;
  if(dl<0.5)color *=0.2;  
*/
  LOFI_SET_result(vec4(color,1.0));
}