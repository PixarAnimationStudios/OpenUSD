-- glslfx version 0.1

//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

--- This is what an import might look like.
--- #import $TOOLS/hdx/shaders/renderPass.glslfx

-- glsl HdxRenderPass.RenderColorShadowsOutput

layout (location = 0) out vec4 colorOut;

vec4 ApplyColorOverrides(vec4 color)
{
    return color;
}

vec4 ApplyColorOverridesPostLighting(vec4 color)
{
    return color;
}

void RenderColor(vec4 color)
{
    colorOut = color;
}

--- --------------------------------------------------------------------------
-- glsl HdxRenderPass.RenderColorOutputWithSelection

// Forward declare method defined in selection.glslfx
vec4 ApplySelectionColor(vec4 color);

// XXX: Make sure to update hdSt/shaders/renderPass.glslfx when editing these
// color override methods, since they're currently duplicated. This is because
// we don't have a mixin token for color overrides in a render pass yet.
vec4 ApplyColorOverrides(vec4 color)
{
#if defined(HD_HAS_overrideColor)
    // Mix in override color
    vec4 overrideColor = HdGet_overrideColor();
    color.rgb = mix(color.rgb, overrideColor.rgb, overrideColor.a);
#endif
    return ApplySelectionColor(color);
}

vec3 ApplyMaskColor(vec4 color, float weight, vec4 maskColor)
{
    float strength = maskColor.a * clamp(weight, 0, 1);
    return mix(color.rgb, maskColor.rgb, strength);
}

vec4 ApplyColorOverridesPostLighting(vec4 color)
{
    #if defined(HD_HAS_maskWeight)
        float maskWeight = HdGet_maskWeight();
        vec4 maskColor = GetMaskColor();
        color.rgb = ApplyMaskColor(color, maskWeight, maskColor);
    #endif
    #if defined(HD_HAS_indicatorWeight)
        float indicatorWeight = HdGet_indicatorWeight();
        vec4 indicatorColor = GetIndicatorColor();
        color.rgb = ApplyMaskColor(color, indicatorWeight, indicatorColor);
    #endif
    return color;
}

layout (location = 0) out vec4 colorOut;

void RenderColor(vec4 color)
{
    colorOut = color;
}

--- --------------------------------------------------------------------------
-- glsl HdxRenderPass.RenderColorIdOutput

layout (location = 0) out vec4 primIdOut;
layout (location = 1) out vec4 instanceIdOut;
layout (location = 2) out vec4 elementIdOut;
layout (location = 3) out vec4 edgeIdOut;
layout (location = 4) out vec4 pointIdOut;

vec4 ApplyColorOverrides(vec4 color)
{
    // Don't apply overrides during ID render pass.
    return color;
}

vec4 ApplyColorOverridesPostLighting(vec4 color)
{
    // Don't apply overrides during ID render pass.
    return color;
}

vec4 IntToVec4(int id)
{
    return vec4(((id >>  0) & 0xff) / 255.0,
                ((id >>  8) & 0xff) / 255.0,
                ((id >> 16) & 0xff) / 255.0,
                ((id >> 24) & 0xff) / 255.0);
}

// Fwd declare necessary methods to determine the subprim id of a fragment.
int GetElementID(); // generated via codeGen
int GetAuthoredEdgeId(int); // generated via codeGen
int GetPrimitiveEdgeId(); // defined in edgeId.glslfx, or generated via codeGen
bool IsFragmentOnEdge(); // defined in edgeId.glslfx, or generated via codeGen
int GetPointId(); // defined in pointId.glslfx
bool IsFragmentOnPoint(); // defined in pointId.glslfx

void RenderColor(vec4 color)
{
    int primId = HdGet_primID();
    primIdOut = IntToVec4(primId);

    // instanceIndex is a tuple of integers (num nested levels).
    // for picking, we store global instanceId (instanceIndex[0]) in the
    // selection framebuffer and then reconstruct the tuple in postprocess.
    int instanceId = GetDrawingCoord().instanceIndex[0];
    instanceIdOut = IntToVec4(instanceId);

    int elementId = GetElementID();
    elementIdOut = IntToVec4(elementId);

    {
        // XXX: This block should be under an #ifdef
        int edgeId = -1;
        if (IsFragmentOnEdge()) {
            edgeId = GetAuthoredEdgeId(GetPrimitiveEdgeId());
        }
        edgeIdOut = IntToVec4(edgeId);
    }

    {
        // XXX: This block should be under an #ifdef
        int pointId = -1;
        if (IsFragmentOnPoint()) {
            pointId = GetPointId();
        }
        pointIdOut = IntToVec4(pointId);
    }
    
}
