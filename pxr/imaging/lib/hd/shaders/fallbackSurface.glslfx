-- glslfx version 0.1

//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

--- This is what an import might look like.
--- #import $TOOLS/hd/shaders/fallbackSurface.glslfx

#import $TOOLS/hd/shaders/terminals.glslfx

---
--- The fallback shader is used as a replacement shader if the
--- original "surface" (material) shader failed to compile.
--- The original shader may or may not have defined the displacementShader
--- terminal.  If it did, the code expects the "surface" (material) shader to
--- include it.
--- 
--- If it didn't, then the geometeric shader will define the terminal.
---
--- To handle this replacement, the fallback shader always includes the
--- displacementShader terminal.  The code fragment for that terminal handles
--- the possible case where the terminal was defined twice.
---
-- configuration
{
    "techniques": {
        "default": {
            "displacementShader": {
                "source": [ "Geometry.Displacement" ]
            },
            "surfaceShader": {
                "source": [ "Fallback.Surface" ]
            }
        }
    }
}

--- --------------------------------------------------------------------------
-- glsl Fallback.Surface

vec4 surfaceShader(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    // lighting
    color.rgb = FallbackLighting(Peye.xyz, Neye, color.rgb);
    return color;
}
--- --------------------------------------------------------------------------
