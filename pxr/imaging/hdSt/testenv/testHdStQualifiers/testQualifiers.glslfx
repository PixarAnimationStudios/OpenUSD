-- glslfx version 0.1

//
// Copyright 2024 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

-- configuration
{
    "techniques": {
        "default": {
            "vertexShader" : {
                "source": [ "Qualifiers.Vertex" ]
            },
            "fragmentShader" : {
                "source": [ "Qualifiers.Fragment" ]
            }
        }
    }
}

--- --------------------------------------------------------------------------
-- layout Qualifiers.Vertex

[
    ["out block", "DataWithQualifiers", "myData",
        ["float", "NormalMember"],
        ["float", "FlatMember", "flat"],
        ["float", "NoPerspectiveMember", "noperspective"],
        ["float", "CentroidMember", "centroid"],
        ["float", "SampleMember", "sample"]
    ]
]

--- --------------------------------------------------------------------------
-- glsl Qualifiers.Vertex

vec3 HdGet_points()
{
    myData.NormalMember = 1.0;
    myData.FlatMember = 1.0;
    myData.NoPerspectiveMember = 1.0;
    myData.CentroidMember = 1.0;
    myData.SampleMember = 1.0;
    return vec3(0.0);
}

MAT4 HdGet_transform()
{
    return MAT4(1.0);
}

--- --------------------------------------------------------------------------
-- layout Qualifiers.Fragment

[
    ["in block", "DataWithQualifiers", "myData",
        ["float", "NormalMember"],
        ["float", "FlatMember", "flat"],
        ["float", "NoPerspectiveMember", "noperspective"],
        ["float", "CentroidMember", "centroid"],
        ["float", "SampleMember", "sample"]
    ]
]

--- --------------------------------------------------------------------------
-- glsl Qualifiers.Fragment

int HdGetScalar_edgeIndices()
{
    return 0;
}

vec4 surfaceShader(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    return vec4(myData.NormalMember + myData.FlatMember,
        myData.NoPerspectiveMember, myData.CentroidMember, myData.SampleMember);
}

