-- glslfx version 0.1

//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

--- This is what an import might look like.
--- #import $TOOLS/hdSt/shaders/invalidMaterialNetwork.glslfx

---
--- The invalid shader is used as a replacement shader if the
--- original material shader failed to compile. It needs to
--- define both the surfaceShader() and displacementShader() terminals.
---
-- configuration
{
    "techniques": {
        "default": {
            "displacementShader": {
                "source": [ "Invalid.Displacement" ]
            },
            "surfaceShader": {
                "source": [ "Invalid.Surface" ]
            }
        }
    }
}

--- --------------------------------------------------------------------------
-- glsl Invalid.Surface

vec4 surfaceShader(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    vec2 t = gl_FragCoord.xy;
    float v = mod(round(t.x + t.y), 16.0);

    const vec4 invalidColor = vec4(0.7, 0.3, 0.3, 1.0);
    return mix(color, invalidColor, v);

    // Alt look:
    // Override the color to a bright red. Don't light it.
    // return vec4(0.9, 0.0, 0.0, 1.0);
}
--- --------------------------------------------------------------------------
-- glsl Invalid.Displacement

vec4 displacementShader(int index, vec4 Peye, vec3 Neye, vec4 patchCoord)
{
    return Peye;
}
