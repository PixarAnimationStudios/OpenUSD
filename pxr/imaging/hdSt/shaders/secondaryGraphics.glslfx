-- glslfx version 0.1

//
// Copyright 2018 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

--- This is what an import might look like.
--- #import $TOOLS/hdSt/shaders/secondaryGraphics.glslfx

--- --------------------------------------------------------------------------
-- glsl SecondaryGraphics.Vertex.Transform

float pixelScaleValue(MAT4 projectionMatrix, MAT4 worldToViewMatrix, MAT4 transform)
{
    // if projectionMatrix specifies a perspective projection,
    // eyeC is set to the model center in view space,
    // otherwise it is set to vec4(1,1,1,1) 
    vec4 eyeC = (projectionMatrix[3][3] == 0.f) ? 
        vec4(worldToViewMatrix * transform * vec4(0,0,0,1)) :
        vec4(1,1,1,1);

    // if projectionMatrix specifies a perspective projection,
    // projectionMatrix[0][0] equals to nearZ / right
    // so that the final result equals to
    // (eyeZ * right) / (nearZ * viewportWidth).
    // in case of orthogonal projection, 
    // projectionMatrix[0][0] equals to 1 / right
    // and the final result equals to
    // right / viewportWidth
    return abs(eyeC.z / (projectionMatrix[0][0] * GetViewport().z));
}

MAT4 cameraFacingMatrix(MAT4 worldToViewMatrix, MAT4 transform)
{
    MAT4 objectToViewMatrix = worldToViewMatrix * transform;
        
    // set rotation part to identity to turn the geometry towards the camera
    objectToViewMatrix[0].xyz = vec3(1,0,0);
    objectToViewMatrix[1].xyz = vec3(0,1,0);
    objectToViewMatrix[2].xyz = vec3(0,0,1);

    return objectToViewMatrix;
}