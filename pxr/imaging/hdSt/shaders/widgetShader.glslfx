-- glslfx version 0.1

//
// Copyright 2021 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

--- This is what an import might look like.
--- #import $TOOLS/hdSt/shaders/widgetShader.glslfx

---
--- The fallback widget shader is used as a replacement shader if the
--- original material shader failed to compile. It needs to
--- define both the surfaceShader() and displacementShader() terminals.
---
-- configuration
{
    "techniques": {
        "default": {
            "displacementShader": {
                "source": [ "Widget.Displacement" ]
            },
            "surfaceShader": {
                "source": [ "Widget.Surface" ]
            }
        }
    }
}

--- --------------------------------------------------------------------------
-- glsl Widget.Surface

vec4 surfaceShader(vec4 Peye, vec3 Neye, vec4 color, vec4 patchCoord)
{
    float d = 1.0;
    vec4 bg = vec4(0,0,0,1);

#ifdef HD_HAS_depthReadback
    d = texelFetch(HdGetSampler_depthReadback(), ivec2(gl_FragCoord.xy),
        0).x;
#endif

#ifdef HD_HAS_colorReadback
    bg = texelFetch(HdGetSampler_colorReadback(), ivec2(gl_FragCoord.xy),
        0);
#endif

    vec4 colorOut = color;
    if (d <= gl_FragCoord.z) {
        const float showThroughAlpha = 0.3;
        float adjAlpha = showThroughAlpha * color.a;
        colorOut.rgb = color.rgb*adjAlpha + bg.rgb*bg.a*(1-adjAlpha);
        colorOut.a = adjAlpha + bg.a*(1.0-adjAlpha);
    }

    return colorOut;
}
--- --------------------------------------------------------------------------
-- glsl Widget.Displacement

vec4 displacementShader(int index, vec4 Peye, vec3 Neye, vec4 patchCoord)
{
    return Peye;
}
