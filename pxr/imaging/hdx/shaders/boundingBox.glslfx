-- glslfx version 0.1

//
// Copyright 2022 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

-- configuration
{
    "techniques": {
        "default": {
            "BoundingBoxVertex": {
                "source": [ "BoundingBox.Vertex" ]
            },
            "BoundingBoxFragment": {
                "source": [ "BoundingBox.Fragment" ]
            }
        }
    }
}

-- glsl BoundingBox.Vertex

void main(void)
{
    const vec4 clipPos =  worldViewProj[hd_InstanceID] * vec4(position,1.0);
    gl_Position = clipPos;

    // Write out a flat (non-interpolated) screen space position for the
    // provoking vertex for a line so we can measure how far a fragment
    // is from that vertex in screen space.
    dashStart = (clipPos.xy/clipPos.w+vec2(1.0))*(viewport.zw/2.0)+viewport.xy;
}

-- glsl BoundingBox.Fragment

void main(void)
{
    // Skip any pattern styling if the uniform/constant dashSize is invalid.
    if (dashSize != 0.0) {
        // Otherwise create a dashed pattern with equal solid and blank pixel
        // sections for the line.
        const float pixelDist = distance(dashStart, gl_FragCoord.xy);
        if (mod(pixelDist, 2.0*dashSize) > dashSize) {
            discard;
        }
    }

    hd_FragColor = color;
}
