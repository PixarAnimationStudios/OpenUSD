-- glslfx version 0.1

//
// Copyright 2019 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

-- configuration
{
    "techniques": {
        "default": {
            "ColorChannelVertex": {
                "source": [ "ColorChannel.Vertex" ]
            },
            "ColorChannelFragment": {
                "source": [ "ColorChannel.Fragment" ]
            }
        }
    }
}

-- glsl ColorChannel.Vertex

#version 120

attribute vec4 position;
attribute vec2 uvIn;

varying vec2 uv;

void main(void)
{
    gl_Position = position;
    uv = uvIn;
}

-- glsl ColorChannel.Fragment

varying vec2 uv;

uniform sampler2D colorIn;
uniform int channel;

// Display channel values. These should match the the indices of the entries in
// HdxDisplayChannelTokens
#define CHANNEL_COLOR     0
#define CHANNEL_RED       1
#define CHANNEL_GREEN     2
#define CHANNEL_BLUE      3
#define CHANNEL_ALPHA     4
#define CHANNEL_LUMINANCE 5

void main(void)
{
    vec4 color = texture2D(colorIn, uv);

    // Display Channel
    if (channel == CHANNEL_RED) {
        color.g = color.b = color.r;
    } else if (channel == CHANNEL_GREEN) {
        color.r = color.b = color.g;
    } else if (channel == CHANNEL_BLUE) {
        color.r = color.g = color.b;
    } else if (channel == CHANNEL_ALPHA) {
        color.r = color.g = color.b = color.a;
    } else if (channel == CHANNEL_LUMINANCE) {
        const vec3 W = vec3(0.30, 0.59, 0.11);
        color.r = color.g = color.b = dot(color.rgb, W);
    } // Do nothing if channel == CHANNEL_COLOR

    gl_FragColor = color;
}
