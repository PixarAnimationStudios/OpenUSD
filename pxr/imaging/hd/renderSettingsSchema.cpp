//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.cpp files to make changes.         ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/renderSettingsSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdRenderSettingsSchemaTokens,
    HDRENDERSETTINGS_SCHEMA_TOKENS);



HdContainerDataSourceHandle
HdRenderSettingsSchema::GetNamespacedSettings()
{
    return _GetTypedDataSource<HdContainerDataSource>(
        HdRenderSettingsSchemaTokens->namespacedSettings);
}

HdBoolDataSourceHandle
HdRenderSettingsSchema::GetActive()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdRenderSettingsSchemaTokens->active);
}

HdRenderProductVectorSchema
HdRenderSettingsSchema::GetRenderProducts()
{
    return HdRenderProductVectorSchema(_GetTypedDataSource<HdVectorDataSource>(
        HdRenderSettingsSchemaTokens->renderProducts));
}

HdTokenArrayDataSourceHandle
HdRenderSettingsSchema::GetIncludedPurposes()
{
    return _GetTypedDataSource<HdTokenArrayDataSource>(
        HdRenderSettingsSchemaTokens->includedPurposes);
}

HdTokenArrayDataSourceHandle
HdRenderSettingsSchema::GetMaterialBindingPurposes()
{
    return _GetTypedDataSource<HdTokenArrayDataSource>(
        HdRenderSettingsSchemaTokens->materialBindingPurposes);
}

HdTokenDataSourceHandle
HdRenderSettingsSchema::GetRenderingColorSpace()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdRenderSettingsSchemaTokens->renderingColorSpace);
}

HdVec2dDataSourceHandle
HdRenderSettingsSchema::GetShutterInterval()
{
    return _GetTypedDataSource<HdVec2dDataSource>(
        HdRenderSettingsSchemaTokens->shutterInterval);
}

/*static*/
HdContainerDataSourceHandle
HdRenderSettingsSchema::BuildRetained(
        const HdContainerDataSourceHandle &namespacedSettings,
        const HdBoolDataSourceHandle &active,
        const HdVectorDataSourceHandle &renderProducts,
        const HdTokenArrayDataSourceHandle &includedPurposes,
        const HdTokenArrayDataSourceHandle &materialBindingPurposes,
        const HdTokenDataSourceHandle &renderingColorSpace,
        const HdVec2dDataSourceHandle &shutterInterval
)
{
    TfToken _names[7];
    HdDataSourceBaseHandle _values[7];

    size_t _count = 0;
    if (namespacedSettings) {
        _names[_count] = HdRenderSettingsSchemaTokens->namespacedSettings;
        _values[_count++] = namespacedSettings;
    }

    if (active) {
        _names[_count] = HdRenderSettingsSchemaTokens->active;
        _values[_count++] = active;
    }

    if (renderProducts) {
        _names[_count] = HdRenderSettingsSchemaTokens->renderProducts;
        _values[_count++] = renderProducts;
    }

    if (includedPurposes) {
        _names[_count] = HdRenderSettingsSchemaTokens->includedPurposes;
        _values[_count++] = includedPurposes;
    }

    if (materialBindingPurposes) {
        _names[_count] = HdRenderSettingsSchemaTokens->materialBindingPurposes;
        _values[_count++] = materialBindingPurposes;
    }

    if (renderingColorSpace) {
        _names[_count] = HdRenderSettingsSchemaTokens->renderingColorSpace;
        _values[_count++] = renderingColorSpace;
    }

    if (shutterInterval) {
        _names[_count] = HdRenderSettingsSchemaTokens->shutterInterval;
        _values[_count++] = shutterInterval;
    }

    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

/*static*/
HdRenderSettingsSchema
HdRenderSettingsSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdRenderSettingsSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdRenderSettingsSchemaTokens->renderSettings))
        : nullptr);
}

/*static*/
const TfToken &
HdRenderSettingsSchema::GetSchemaToken()
{
    return HdRenderSettingsSchemaTokens->renderSettings;
}

/*static*/
const HdDataSourceLocator &
HdRenderSettingsSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderSettingsSchemaTokens->renderSettings
    );
    return locator;
} 
/*static*/
const HdDataSourceLocator &
HdRenderSettingsSchema::GetNamespacedSettingsLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderSettingsSchemaTokens->renderSettings,
        HdRenderSettingsSchemaTokens->namespacedSettings
    );
    return locator;
}

/*static*/
const HdDataSourceLocator &
HdRenderSettingsSchema::GetActiveLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderSettingsSchemaTokens->renderSettings,
        HdRenderSettingsSchemaTokens->active
    );
    return locator;
}

/*static*/
const HdDataSourceLocator &
HdRenderSettingsSchema::GetRenderProductsLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderSettingsSchemaTokens->renderSettings,
        HdRenderSettingsSchemaTokens->renderProducts
    );
    return locator;
}

/*static*/
const HdDataSourceLocator &
HdRenderSettingsSchema::GetIncludedPurposesLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderSettingsSchemaTokens->renderSettings,
        HdRenderSettingsSchemaTokens->includedPurposes
    );
    return locator;
}

/*static*/
const HdDataSourceLocator &
HdRenderSettingsSchema::GetMaterialBindingPurposesLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderSettingsSchemaTokens->renderSettings,
        HdRenderSettingsSchemaTokens->materialBindingPurposes
    );
    return locator;
}

/*static*/
const HdDataSourceLocator &
HdRenderSettingsSchema::GetRenderingColorSpaceLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderSettingsSchemaTokens->renderSettings,
        HdRenderSettingsSchemaTokens->renderingColorSpace
    );
    return locator;
}

/*static*/
const HdDataSourceLocator &
HdRenderSettingsSchema::GetShutterIntervalLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderSettingsSchemaTokens->renderSettings,
        HdRenderSettingsSchemaTokens->shutterInterval
    );
    return locator;
}


HdRenderSettingsSchema::Builder &
HdRenderSettingsSchema::Builder::SetNamespacedSettings(
    const HdContainerDataSourceHandle &namespacedSettings)
{
    _namespacedSettings = namespacedSettings;
    return *this;
}

HdRenderSettingsSchema::Builder &
HdRenderSettingsSchema::Builder::SetActive(
    const HdBoolDataSourceHandle &active)
{
    _active = active;
    return *this;
}

HdRenderSettingsSchema::Builder &
HdRenderSettingsSchema::Builder::SetRenderProducts(
    const HdVectorDataSourceHandle &renderProducts)
{
    _renderProducts = renderProducts;
    return *this;
}

HdRenderSettingsSchema::Builder &
HdRenderSettingsSchema::Builder::SetIncludedPurposes(
    const HdTokenArrayDataSourceHandle &includedPurposes)
{
    _includedPurposes = includedPurposes;
    return *this;
}

HdRenderSettingsSchema::Builder &
HdRenderSettingsSchema::Builder::SetMaterialBindingPurposes(
    const HdTokenArrayDataSourceHandle &materialBindingPurposes)
{
    _materialBindingPurposes = materialBindingPurposes;
    return *this;
}

HdRenderSettingsSchema::Builder &
HdRenderSettingsSchema::Builder::SetRenderingColorSpace(
    const HdTokenDataSourceHandle &renderingColorSpace)
{
    _renderingColorSpace = renderingColorSpace;
    return *this;
}

HdRenderSettingsSchema::Builder &
HdRenderSettingsSchema::Builder::SetShutterInterval(
    const HdVec2dDataSourceHandle &shutterInterval)
{
    _shutterInterval = shutterInterval;
    return *this;
}

HdContainerDataSourceHandle
HdRenderSettingsSchema::Builder::Build()
{
    return HdRenderSettingsSchema::BuildRetained(
        _namespacedSettings,
        _active,
        _renderProducts,
        _includedPurposes,
        _materialBindingPurposes,
        _renderingColorSpace,
        _shutterInterval
    );
}


PXR_NAMESPACE_CLOSE_SCOPE