//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdGen/schema.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/meshSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdMeshSchemaTokens,
    HD_MESH_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--




HdMeshTopologySchema
HdMeshSchema::GetTopology()
{
    return HdMeshTopologySchema(_GetTypedDataSource<HdContainerDataSource>(
        HdMeshSchemaTokens->topology));
}

HdTokenDataSourceHandle
HdMeshSchema::GetSubdivisionScheme()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdMeshSchemaTokens->subdivisionScheme);
}

HdSubdivisionTagsSchema
HdMeshSchema::GetSubdivisionTags()
{
    return HdSubdivisionTagsSchema(_GetTypedDataSource<HdContainerDataSource>(
        HdMeshSchemaTokens->subdivisionTags));
}

HdGeomSubsetsSchema
HdMeshSchema::GetGeomSubsets()
{
    return HdGeomSubsetsSchema(_GetTypedDataSource<HdContainerDataSource>(
        HdMeshSchemaTokens->geomSubsets));
}

HdBoolDataSourceHandle
HdMeshSchema::GetDoubleSided()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdMeshSchemaTokens->doubleSided);
}

/*static*/
HdContainerDataSourceHandle
HdMeshSchema::BuildRetained(
        const HdContainerDataSourceHandle &topology,
        const HdTokenDataSourceHandle &subdivisionScheme,
        const HdContainerDataSourceHandle &subdivisionTags,
        const HdContainerDataSourceHandle &geomSubsets,
        const HdBoolDataSourceHandle &doubleSided
)
{
    TfToken _names[5];
    HdDataSourceBaseHandle _values[5];

    size_t _count = 0;
    if (topology) {
        _names[_count] = HdMeshSchemaTokens->topology;
        _values[_count++] = topology;
    }

    if (subdivisionScheme) {
        _names[_count] = HdMeshSchemaTokens->subdivisionScheme;
        _values[_count++] = subdivisionScheme;
    }

    if (subdivisionTags) {
        _names[_count] = HdMeshSchemaTokens->subdivisionTags;
        _values[_count++] = subdivisionTags;
    }

    if (geomSubsets) {
        _names[_count] = HdMeshSchemaTokens->geomSubsets;
        _values[_count++] = geomSubsets;
    }

    if (doubleSided) {
        _names[_count] = HdMeshSchemaTokens->doubleSided;
        _values[_count++] = doubleSided;
    }

    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

/*static*/
HdMeshSchema
HdMeshSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdMeshSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdMeshSchemaTokens->mesh))
        : nullptr);
}

/*static*/
const TfToken &
HdMeshSchema::GetSchemaToken()
{
    return HdMeshSchemaTokens->mesh;
}

/*static*/
const HdDataSourceLocator &
HdMeshSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
} 

/* static */
const HdDataSourceLocator &
HdMeshSchema::GetTopologyLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMeshSchemaTokens->topology);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMeshSchema::GetSubdivisionSchemeLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMeshSchemaTokens->subdivisionScheme);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMeshSchema::GetSubdivisionTagsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMeshSchemaTokens->subdivisionTags);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMeshSchema::GetGeomSubsetsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMeshSchemaTokens->geomSubsets);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdMeshSchema::GetDoubleSidedLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdMeshSchemaTokens->doubleSided);
    return locator;
}
HdMeshSchema::Builder &
HdMeshSchema::Builder::SetTopology(
    const HdContainerDataSourceHandle &topology)
{
    _topology = topology;
    return *this;
}

HdMeshSchema::Builder &
HdMeshSchema::Builder::SetSubdivisionScheme(
    const HdTokenDataSourceHandle &subdivisionScheme)
{
    _subdivisionScheme = subdivisionScheme;
    return *this;
}

HdMeshSchema::Builder &
HdMeshSchema::Builder::SetSubdivisionTags(
    const HdContainerDataSourceHandle &subdivisionTags)
{
    _subdivisionTags = subdivisionTags;
    return *this;
}

HdMeshSchema::Builder &
HdMeshSchema::Builder::SetGeomSubsets(
    const HdContainerDataSourceHandle &geomSubsets)
{
    _geomSubsets = geomSubsets;
    return *this;
}

HdMeshSchema::Builder &
HdMeshSchema::Builder::SetDoubleSided(
    const HdBoolDataSourceHandle &doubleSided)
{
    _doubleSided = doubleSided;
    return *this;
}

HdContainerDataSourceHandle
HdMeshSchema::Builder::Build()
{
    return HdMeshSchema::BuildRetained(
        _topology,
        _subdivisionScheme,
        _subdivisionTags,
        _geomSubsets,
        _doubleSided
    );
}


PXR_NAMESPACE_CLOSE_SCOPE