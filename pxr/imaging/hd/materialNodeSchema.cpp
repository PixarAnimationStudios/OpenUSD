//
// Copyright 2021 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// schema.template.cpp file to make changes.

#include "pxr/imaging/hd/materialNodeSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdMaterialNodeSchemaTokens,
    HDMATERIALNODE_SCHEMA_TOKENS);



HdContainerDataSourceHandle
HdMaterialNodeSchema::GetParameters()
{
    return _GetTypedDataSource<HdContainerDataSource>(
        HdMaterialNodeSchemaTokens->parameters);
}

HdContainerDataSourceHandle
HdMaterialNodeSchema::GetInputConnections()
{
    return _GetTypedDataSource<HdContainerDataSource>(
        HdMaterialNodeSchemaTokens->inputConnections);
}

HdTokenDataSourceHandle
HdMaterialNodeSchema::GetNodeIdentifier()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdMaterialNodeSchemaTokens->nodeIdentifier);
}

/*static*/
HdContainerDataSourceHandle
HdMaterialNodeSchema::BuildRetained(
        const HdContainerDataSourceHandle &parameters,
        const HdContainerDataSourceHandle &inputConnections,
        const HdTokenDataSourceHandle &nodeIdentifier
)
{
    TfToken names[3];
    HdDataSourceBaseHandle values[3];

    size_t count = 0;
    if (parameters) {
        names[count] = HdMaterialNodeSchemaTokens->parameters;
        values[count++] = parameters;
    }

    if (inputConnections) {
        names[count] = HdMaterialNodeSchemaTokens->inputConnections;
        values[count++] = inputConnections;
    }

    if (nodeIdentifier) {
        names[count] = HdMaterialNodeSchemaTokens->nodeIdentifier;
        values[count++] = nodeIdentifier;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}


HdMaterialNodeSchema::Builder &
HdMaterialNodeSchema::Builder::SetParameters(
    const HdContainerDataSourceHandle &parameters)
{
    _parameters = parameters;
    return *this;
}

HdMaterialNodeSchema::Builder &
HdMaterialNodeSchema::Builder::SetInputConnections(
    const HdContainerDataSourceHandle &inputConnections)
{
    _inputConnections = inputConnections;
    return *this;
}

HdMaterialNodeSchema::Builder &
HdMaterialNodeSchema::Builder::SetNodeIdentifier(
    const HdTokenDataSourceHandle &nodeIdentifier)
{
    _nodeIdentifier = nodeIdentifier;
    return *this;
}

HdContainerDataSourceHandle
HdMaterialNodeSchema::Builder::Build()
{
    return HdMaterialNodeSchema::BuildRetained(
        _parameters,
        _inputConnections,
        _nodeIdentifier
    );
}


PXR_NAMESPACE_CLOSE_SCOPE