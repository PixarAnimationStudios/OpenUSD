//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.cpp files to make changes.         ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/renderBufferSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdRenderBufferSchemaTokens,
    HDRENDERBUFFER_SCHEMA_TOKENS);



HdVec3iDataSourceHandle
HdRenderBufferSchema::GetDimensions()
{
    return _GetTypedDataSource<HdVec3iDataSource>(
        HdRenderBufferSchemaTokens->dimensions);
}

HdFormatDataSourceHandle
HdRenderBufferSchema::GetFormat()
{
    return _GetTypedDataSource<HdFormatDataSource>(
        HdRenderBufferSchemaTokens->format);
}

HdBoolDataSourceHandle
HdRenderBufferSchema::GetMultiSampled()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdRenderBufferSchemaTokens->multiSampled);
}

/*static*/
HdContainerDataSourceHandle
HdRenderBufferSchema::BuildRetained(
        const HdVec3iDataSourceHandle &dimensions,
        const HdFormatDataSourceHandle &format,
        const HdBoolDataSourceHandle &multiSampled
)
{
    TfToken names[3];
    HdDataSourceBaseHandle values[3];

    size_t count = 0;
    if (dimensions) {
        names[count] = HdRenderBufferSchemaTokens->dimensions;
        values[count++] = dimensions;
    }

    if (format) {
        names[count] = HdRenderBufferSchemaTokens->format;
        values[count++] = format;
    }

    if (multiSampled) {
        names[count] = HdRenderBufferSchemaTokens->multiSampled;
        values[count++] = multiSampled;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}

/*static*/
HdRenderBufferSchema
HdRenderBufferSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdRenderBufferSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdRenderBufferSchemaTokens->renderBuffer))
        : nullptr);
}

/*static*/
const TfToken &
HdRenderBufferSchema::GetSchemaToken()
{
    return HdRenderBufferSchemaTokens->renderBuffer;
} 
/*static*/
const HdDataSourceLocator &
HdRenderBufferSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        HdRenderBufferSchemaTokens->renderBuffer
    );
    return locator;
} 
HdRenderBufferSchema::Builder &
HdRenderBufferSchema::Builder::SetDimensions(
    const HdVec3iDataSourceHandle &dimensions)
{
    _dimensions = dimensions;
    return *this;
}

HdRenderBufferSchema::Builder &
HdRenderBufferSchema::Builder::SetFormat(
    const HdFormatDataSourceHandle &format)
{
    _format = format;
    return *this;
}

HdRenderBufferSchema::Builder &
HdRenderBufferSchema::Builder::SetMultiSampled(
    const HdBoolDataSourceHandle &multiSampled)
{
    _multiSampled = multiSampled;
    return *this;
}

HdContainerDataSourceHandle
HdRenderBufferSchema::Builder::Build()
{
    return HdRenderBufferSchema::BuildRetained(
        _dimensions,
        _format,
        _multiSampled
    );
}


PXR_NAMESPACE_CLOSE_SCOPE