//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.cpp files to make changes.         ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/coordSysSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdCoordSysSchemaTokens,
    HDCOORDSYS_SCHEMA_TOKENS);



HdTokenDataSourceHandle
HdCoordSysSchema::GetName()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdCoordSysSchemaTokens->name);
}

/*static*/
HdContainerDataSourceHandle
HdCoordSysSchema::BuildRetained(
        const HdTokenDataSourceHandle &name
)
{
    TfToken names[1];
    HdDataSourceBaseHandle values[1];

    size_t count = 0;
    if (name) {
        names[count] = HdCoordSysSchemaTokens->name;
        values[count++] = name;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}

/*static*/
HdCoordSysSchema
HdCoordSysSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdCoordSysSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdCoordSysSchemaTokens->coordSys))
        : nullptr);
}

/*static*/
const TfToken &
HdCoordSysSchema::GetSchemaToken()
{
    return HdCoordSysSchemaTokens->coordSys;
} 
/*static*/
const HdDataSourceLocator &
HdCoordSysSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        HdCoordSysSchemaTokens->coordSys
    );
    return locator;
} 
HdCoordSysSchema::Builder &
HdCoordSysSchema::Builder::SetName(
    const HdTokenDataSourceHandle &name)
{
    _name = name;
    return *this;
}

HdContainerDataSourceHandle
HdCoordSysSchema::Builder::Build()
{
    return HdCoordSysSchema::BuildRetained(
        _name
    );
}


PXR_NAMESPACE_CLOSE_SCOPE