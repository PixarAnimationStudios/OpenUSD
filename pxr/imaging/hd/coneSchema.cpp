//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdGen/schema.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/coneSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdConeSchemaTokens,
    HD_CONE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--




HdDoubleDataSourceHandle
HdConeSchema::GetHeight()
{
    return _GetTypedDataSource<HdDoubleDataSource>(
        HdConeSchemaTokens->height);
}

HdDoubleDataSourceHandle
HdConeSchema::GetRadius()
{
    return _GetTypedDataSource<HdDoubleDataSource>(
        HdConeSchemaTokens->radius);
}

HdTokenDataSourceHandle
HdConeSchema::GetAxis()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdConeSchemaTokens->axis);
}

/*static*/
HdContainerDataSourceHandle
HdConeSchema::BuildRetained(
        const HdDoubleDataSourceHandle &height,
        const HdDoubleDataSourceHandle &radius,
        const HdTokenDataSourceHandle &axis
)
{
    TfToken _names[3];
    HdDataSourceBaseHandle _values[3];

    size_t _count = 0;
    if (height) {
        _names[_count] = HdConeSchemaTokens->height;
        _values[_count++] = height;
    }

    if (radius) {
        _names[_count] = HdConeSchemaTokens->radius;
        _values[_count++] = radius;
    }

    if (axis) {
        _names[_count] = HdConeSchemaTokens->axis;
        _values[_count++] = axis;
    }

    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

/*static*/
HdConeSchema
HdConeSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdConeSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdConeSchemaTokens->cone))
        : nullptr);
}

/*static*/
const TfToken &
HdConeSchema::GetSchemaToken()
{
    return HdConeSchemaTokens->cone;
}

/*static*/
const HdDataSourceLocator &
HdConeSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
} 

/*static*/
HdTokenDataSourceHandle
HdConeSchema::BuildAxisDataSource(
    const TfToken &axis)
{
    if (axis == HdConeSchemaTokens->X) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(axis);
        return ds;
    }
    if (axis == HdConeSchemaTokens->Y) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(axis);
        return ds;
    }
    if (axis == HdConeSchemaTokens->Z) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(axis);
        return ds;
    }

    // fallback for unknown token
    return HdRetainedTypedSampledDataSource<TfToken>::New(axis);
}

HdConeSchema::Builder &
HdConeSchema::Builder::SetHeight(
    const HdDoubleDataSourceHandle &height)
{
    _height = height;
    return *this;
}

HdConeSchema::Builder &
HdConeSchema::Builder::SetRadius(
    const HdDoubleDataSourceHandle &radius)
{
    _radius = radius;
    return *this;
}

HdConeSchema::Builder &
HdConeSchema::Builder::SetAxis(
    const HdTokenDataSourceHandle &axis)
{
    _axis = axis;
    return *this;
}

HdContainerDataSourceHandle
HdConeSchema::Builder::Build()
{
    return HdConeSchema::BuildRetained(
        _height,
        _radius,
        _axis
    );
}


PXR_NAMESPACE_CLOSE_SCOPE