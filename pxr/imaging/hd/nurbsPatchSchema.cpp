//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.cpp files to make changes.         ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/nurbsPatchSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdNurbsPatchSchemaTokens,
    HDNURBSPATCH_SCHEMA_TOKENS);



HdIntDataSourceHandle
HdNurbsPatchSchema::GetUVertexCount()
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdNurbsPatchSchemaTokens->uVertexCount);
}

HdIntDataSourceHandle
HdNurbsPatchSchema::GetVVertexCount()
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdNurbsPatchSchemaTokens->vVertexCount);
}

HdIntDataSourceHandle
HdNurbsPatchSchema::GetUOrder()
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdNurbsPatchSchemaTokens->uOrder);
}

HdIntDataSourceHandle
HdNurbsPatchSchema::GetVOrder()
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdNurbsPatchSchemaTokens->vOrder);
}

HdDoubleArrayDataSourceHandle
HdNurbsPatchSchema::GetUKnots()
{
    return _GetTypedDataSource<HdDoubleArrayDataSource>(
        HdNurbsPatchSchemaTokens->uKnots);
}

HdDoubleArrayDataSourceHandle
HdNurbsPatchSchema::GetVKnots()
{
    return _GetTypedDataSource<HdDoubleArrayDataSource>(
        HdNurbsPatchSchemaTokens->vKnots);
}

HdTokenDataSourceHandle
HdNurbsPatchSchema::GetUForm()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdNurbsPatchSchemaTokens->uForm);
}

HdTokenDataSourceHandle
HdNurbsPatchSchema::GetVForm()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdNurbsPatchSchemaTokens->vForm);
}

HdVec2dDataSourceHandle
HdNurbsPatchSchema::GetURange()
{
    return _GetTypedDataSource<HdVec2dDataSource>(
        HdNurbsPatchSchemaTokens->uRange);
}

HdVec2dDataSourceHandle
HdNurbsPatchSchema::GetVRange()
{
    return _GetTypedDataSource<HdVec2dDataSource>(
        HdNurbsPatchSchemaTokens->vRange);
}

HdNurbsPatchTrimCurveSchema
HdNurbsPatchSchema::GetTrimCurve()
{
    return HdNurbsPatchTrimCurveSchema(_GetTypedDataSource<HdContainerDataSource>(
        HdNurbsPatchSchemaTokens->trimCurve));
}

HdTokenDataSourceHandle
HdNurbsPatchSchema::GetOrientation()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdNurbsPatchSchemaTokens->orientation);
}

HdBoolDataSourceHandle
HdNurbsPatchSchema::GetDoubleSided()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdNurbsPatchSchemaTokens->doubleSided);
}

/*static*/
HdContainerDataSourceHandle
HdNurbsPatchSchema::BuildRetained(
        const HdIntDataSourceHandle &uVertexCount,
        const HdIntDataSourceHandle &vVertexCount,
        const HdIntDataSourceHandle &uOrder,
        const HdIntDataSourceHandle &vOrder,
        const HdDoubleArrayDataSourceHandle &uKnots,
        const HdDoubleArrayDataSourceHandle &vKnots,
        const HdTokenDataSourceHandle &uForm,
        const HdTokenDataSourceHandle &vForm,
        const HdVec2dDataSourceHandle &uRange,
        const HdVec2dDataSourceHandle &vRange,
        const HdContainerDataSourceHandle &trimCurve,
        const HdTokenDataSourceHandle &orientation,
        const HdBoolDataSourceHandle &doubleSided
)
{
    TfToken names[13];
    HdDataSourceBaseHandle values[13];

    size_t count = 0;
    if (uVertexCount) {
        names[count] = HdNurbsPatchSchemaTokens->uVertexCount;
        values[count++] = uVertexCount;
    }

    if (vVertexCount) {
        names[count] = HdNurbsPatchSchemaTokens->vVertexCount;
        values[count++] = vVertexCount;
    }

    if (uOrder) {
        names[count] = HdNurbsPatchSchemaTokens->uOrder;
        values[count++] = uOrder;
    }

    if (vOrder) {
        names[count] = HdNurbsPatchSchemaTokens->vOrder;
        values[count++] = vOrder;
    }

    if (uKnots) {
        names[count] = HdNurbsPatchSchemaTokens->uKnots;
        values[count++] = uKnots;
    }

    if (vKnots) {
        names[count] = HdNurbsPatchSchemaTokens->vKnots;
        values[count++] = vKnots;
    }

    if (uForm) {
        names[count] = HdNurbsPatchSchemaTokens->uForm;
        values[count++] = uForm;
    }

    if (vForm) {
        names[count] = HdNurbsPatchSchemaTokens->vForm;
        values[count++] = vForm;
    }

    if (uRange) {
        names[count] = HdNurbsPatchSchemaTokens->uRange;
        values[count++] = uRange;
    }

    if (vRange) {
        names[count] = HdNurbsPatchSchemaTokens->vRange;
        values[count++] = vRange;
    }

    if (trimCurve) {
        names[count] = HdNurbsPatchSchemaTokens->trimCurve;
        values[count++] = trimCurve;
    }

    if (orientation) {
        names[count] = HdNurbsPatchSchemaTokens->orientation;
        values[count++] = orientation;
    }

    if (doubleSided) {
        names[count] = HdNurbsPatchSchemaTokens->doubleSided;
        values[count++] = doubleSided;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}

/*static*/
HdNurbsPatchSchema
HdNurbsPatchSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdNurbsPatchSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdNurbsPatchSchemaTokens->nurbsPatch))
        : nullptr);
}

/*static*/
const TfToken &
HdNurbsPatchSchema::GetSchemaToken()
{
    return HdNurbsPatchSchemaTokens->nurbsPatch;
} 
/*static*/
const HdDataSourceLocator &
HdNurbsPatchSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        HdNurbsPatchSchemaTokens->nurbsPatch
    );
    return locator;
} 

/*static*/
HdTokenDataSourceHandle
HdNurbsPatchSchema::BuildFormDataSource(
    const TfToken &form)
{
    if (form == HdNurbsPatchSchemaTokens->open) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(form);
        return ds;
    }
    if (form == HdNurbsPatchSchemaTokens->closed) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(form);
        return ds;
    }
    if (form == HdNurbsPatchSchemaTokens->periodic) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(form);
        return ds;
    }

    // fallback for unknown token
    return HdRetainedTypedSampledDataSource<TfToken>::New(form);
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetUVertexCount(
    const HdIntDataSourceHandle &uVertexCount)
{
    _uVertexCount = uVertexCount;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetVVertexCount(
    const HdIntDataSourceHandle &vVertexCount)
{
    _vVertexCount = vVertexCount;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetUOrder(
    const HdIntDataSourceHandle &uOrder)
{
    _uOrder = uOrder;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetVOrder(
    const HdIntDataSourceHandle &vOrder)
{
    _vOrder = vOrder;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetUKnots(
    const HdDoubleArrayDataSourceHandle &uKnots)
{
    _uKnots = uKnots;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetVKnots(
    const HdDoubleArrayDataSourceHandle &vKnots)
{
    _vKnots = vKnots;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetUForm(
    const HdTokenDataSourceHandle &uForm)
{
    _uForm = uForm;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetVForm(
    const HdTokenDataSourceHandle &vForm)
{
    _vForm = vForm;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetURange(
    const HdVec2dDataSourceHandle &uRange)
{
    _uRange = uRange;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetVRange(
    const HdVec2dDataSourceHandle &vRange)
{
    _vRange = vRange;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetTrimCurve(
    const HdContainerDataSourceHandle &trimCurve)
{
    _trimCurve = trimCurve;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetOrientation(
    const HdTokenDataSourceHandle &orientation)
{
    _orientation = orientation;
    return *this;
}

HdNurbsPatchSchema::Builder &
HdNurbsPatchSchema::Builder::SetDoubleSided(
    const HdBoolDataSourceHandle &doubleSided)
{
    _doubleSided = doubleSided;
    return *this;
}

HdContainerDataSourceHandle
HdNurbsPatchSchema::Builder::Build()
{
    return HdNurbsPatchSchema::BuildRetained(
        _uVertexCount,
        _vVertexCount,
        _uOrder,
        _vOrder,
        _uKnots,
        _vKnots,
        _uForm,
        _vForm,
        _uRange,
        _vRange,
        _trimCurve,
        _orientation,
        _doubleSided
    );
}


PXR_NAMESPACE_CLOSE_SCOPE