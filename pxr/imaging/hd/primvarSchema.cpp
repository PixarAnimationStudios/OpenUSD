//
// Copyright 2021 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// schema.template.cpp file to make changes.

#include "pxr/imaging/hd/primvarSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPrimvarSchemaTokens,
    HDPRIMVAR_SCHEMA_TOKENS);



bool
HdPrimvarSchema::IsIndexed()
{
    if (_container) {
        return (_container->Has(HdPrimvarSchemaTokens->
                    indexedPrimvarValue) && 
                _container->Has(HdPrimvarSchemaTokens->indices));
    }
    return false;
}

namespace {

template<typename T>
VtValue 
_ComputeFlattened(VtValue const &value, VtIntArray const &indices) {
    VtArray<T> array = value.Get<VtArray<T>>();
    VtArray<T> result = VtArray<T>(indices.size());

    bool invalidIndices = false;
    for (size_t i = 0; i < indices.size(); ++i) {
        int index = indices[i];
        if (index >= 0 && (size_t)index < array.size()) {
            result[i] = array[index];
        } else {
            result[i] = T();
            invalidIndices = true;
        }
    }
    if (invalidIndices) {
        TF_WARN("Invalid primvar indices");
    }

    return VtValue(result);
}

VtValue 
_ComputeFlattenedValue(VtValue const &value, VtIntArray const &indices) {
    if (value.IsHolding<VtVec2fArray>()) {
        return _ComputeFlattened<GfVec2f>(value, indices);
    } else if (value.IsHolding<VtVec2dArray>()) {
        return _ComputeFlattened<GfVec2d>(value, indices);
    } else if (value.IsHolding<VtVec2iArray>()) {
        return _ComputeFlattened<GfVec2i>(value, indices);
    } else if (value.IsHolding<VtVec2hArray>()) {
        return _ComputeFlattened<GfVec2h>(value, indices);             
    } else if (value.IsHolding<VtVec3fArray>()) {
        return _ComputeFlattened<GfVec3f>(value, indices);   
    } else if (value.IsHolding<VtVec3dArray>()) {
        return _ComputeFlattened<GfVec3d>(value, indices); 
     } else if (value.IsHolding<VtVec3iArray>()) {
        return _ComputeFlattened<GfVec3i>(value, indices);
    } else if (value.IsHolding<VtVec3hArray>()) {
        return _ComputeFlattened<GfVec3h>(value, indices);           
    } else if (value.IsHolding<VtVec4fArray>()) {
        return _ComputeFlattened<GfVec4f>(value, indices);
    } else if (value.IsHolding<VtVec4dArray>()) {
        return _ComputeFlattened<GfVec4d>(value, indices);                
    } else if (value.IsHolding<VtVec4iArray>()) {
        return _ComputeFlattened<GfVec4i>(value, indices);
    } else if (value.IsHolding<VtVec4hArray>()) {
        return _ComputeFlattened<GfVec4h>(value, indices); 
    } else if (value.IsHolding<VtMatrix4dArray>()) {
        return _ComputeFlattened<GfMatrix4d>(value, indices);  
    } else if (value.IsHolding<VtStringArray>()) {
        return _ComputeFlattened<std::string>(value, indices);  
    } else if (value.IsHolding<VtDoubleArray>()) {
        return _ComputeFlattened<double>(value, indices);  
    } else if (value.IsHolding<VtIntArray>()) {
        return _ComputeFlattened<int>(value, indices); 
    } else if (value.IsHolding<VtUIntArray>()) {
        return _ComputeFlattened<unsigned int>(value, indices); 
    } else if (value.IsHolding<VtFloatArray>()) {
        return _ComputeFlattened<float>(value, indices);
    } else if (value.IsHolding<VtHalfArray>()) {
        return _ComputeFlattened<GfHalf>(value, indices); 
    } else {
        TF_WARN("Unsupported indexed primvar type");
    }
    return value;
}

class _HdDataSourceFlattenedPrimvarValue : public HdSampledDataSource
{
public:
    HD_DECLARE_DATASOURCE(_HdDataSourceFlattenedPrimvarValue);

    _HdDataSourceFlattenedPrimvarValue(
        HdSampledDataSourceHandle indexedValue,
        HdIntArrayDataSourceHandle indices)
    : _indexedValue(indexedValue)
    , _indices(indices)
    {
    }

    VtValue GetValue(Time shutterOffset) override
    {
        VtValue indexedValue = _indexedValue->GetValue(shutterOffset);
        VtIntArray indices = _indices->GetTypedValue(shutterOffset);
        return _ComputeFlattenedValue(indexedValue, indices);
    }

    bool GetContributingSampleTimesForInterval(
            Time startTime, Time endTime,
            std::vector<Time> * outSampleTimes) override
    {
        std::vector<Time> valueSampleTimes;
        const bool valueVarying =
            _indexedValue->GetContributingSampleTimesForInterval(
                startTime, endTime, &valueSampleTimes);
        std::vector<Time> indexSampleTimes;
        const bool indexVarying =
            _indices->GetContributingSampleTimesForInterval(
                startTime, endTime, &indexSampleTimes);

        if (outSampleTimes) {
            if (valueVarying && indexVarying) {
                std::set_union(
                    valueSampleTimes.begin(), valueSampleTimes.end(),
                    indexSampleTimes.begin(), indexSampleTimes.end(),
                    std::back_inserter(*outSampleTimes));
            } else if (valueVarying) {
                *outSampleTimes = std::move(valueSampleTimes);
            } else if (indexVarying) {
                *outSampleTimes = std::move(indexSampleTimes);
            }
        }
        return valueVarying || indexVarying;
    }

private:
    HdSampledDataSourceHandle _indexedValue;
    HdIntArrayDataSourceHandle _indices;
};

}



HdSampledDataSourceHandle
HdPrimvarSchema::GetPrimvarValue()
{
    // overriden definition from primvarSchemaGetValue.template.cpp
    if (_container) {
        if (_container->Has(HdPrimvarSchemaTokens->primvarValue)) {
            return _GetTypedDataSource<HdSampledDataSource>(
                HdPrimvarSchemaTokens->primvarValue);
        } else if (_container->Has(HdPrimvarSchemaTokens->indexedPrimvarValue) && 
                   _container->Has(HdPrimvarSchemaTokens->indices)) {
            return _HdDataSourceFlattenedPrimvarValue::New(
                _GetTypedDataSource<HdSampledDataSource>(
                    HdPrimvarSchemaTokens->indexedPrimvarValue),
                _GetTypedDataSource<HdTypedSampledDataSource<VtIntArray>>(
                    HdPrimvarSchemaTokens->indices));
        }
    }
    return nullptr;
}

HdSampledDataSourceHandle
HdPrimvarSchema::GetIndexedPrimvarValue()
{
    // overriden definition from primvarSchemaGetIndexedValue.template.cpp
    if (IsIndexed()) {
        return _GetTypedDataSource<HdSampledDataSource>(
                HdPrimvarSchemaTokens->indexedPrimvarValue);
    } else {
        return _GetTypedDataSource<HdSampledDataSource>(
                HdPrimvarSchemaTokens->primvarValue);
    }
}

HdIntArrayDataSourceHandle
HdPrimvarSchema::GetIndices()
{
    return _GetTypedDataSource<HdIntArrayDataSource>(
        HdPrimvarSchemaTokens->indices);
}

HdTokenDataSourceHandle
HdPrimvarSchema::GetInterpolation()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPrimvarSchemaTokens->interpolation);
}

HdTokenDataSourceHandle
HdPrimvarSchema::GetRole()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdPrimvarSchemaTokens->role);
}

/*static*/
HdContainerDataSourceHandle
HdPrimvarSchema::BuildRetained(
        const HdSampledDataSourceHandle &primvarValue,
        const HdSampledDataSourceHandle &indexedPrimvarValue,
        const HdIntArrayDataSourceHandle &indices,
        const HdTokenDataSourceHandle &interpolation,
        const HdTokenDataSourceHandle &role
)
{
    TfToken names[5];
    HdDataSourceBaseHandle values[5];

    size_t count = 0;
    if (primvarValue) {
        names[count] = HdPrimvarSchemaTokens->primvarValue;
        values[count++] = primvarValue;
    }

    if (indexedPrimvarValue) {
        names[count] = HdPrimvarSchemaTokens->indexedPrimvarValue;
        values[count++] = indexedPrimvarValue;
    }

    if (indices) {
        names[count] = HdPrimvarSchemaTokens->indices;
        values[count++] = indices;
    }

    if (interpolation) {
        names[count] = HdPrimvarSchemaTokens->interpolation;
        values[count++] = interpolation;
    }

    if (role) {
        names[count] = HdPrimvarSchemaTokens->role;
        values[count++] = role;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}



/*static*/
HdTokenDataSourceHandle
HdPrimvarSchema::BuildInterpolationDataSource(
    const TfToken &interpolation)
{
    if (interpolation == HdPrimvarSchemaTokens->constant) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(interpolation);
        return ds;
    }
    if (interpolation == HdPrimvarSchemaTokens->uniform) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(interpolation);
        return ds;
    }
    if (interpolation == HdPrimvarSchemaTokens->varying) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(interpolation);
        return ds;
    }
    if (interpolation == HdPrimvarSchemaTokens->vertex) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(interpolation);
        return ds;
    }
    if (interpolation == HdPrimvarSchemaTokens->faceVarying) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(interpolation);
        return ds;
    }
    if (interpolation == HdPrimvarSchemaTokens->instance) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(interpolation);
        return ds;
    }

    // fallback for unknown token
    return HdRetainedTypedSampledDataSource<TfToken>::New(interpolation);
}


/*static*/
HdTokenDataSourceHandle
HdPrimvarSchema::BuildRoleDataSource(
    const TfToken &role)
{
    if (role == HdPrimvarSchemaTokens->point) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(role);
        return ds;
    }
    if (role == HdPrimvarSchemaTokens->normal) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(role);
        return ds;
    }
    if (role == HdPrimvarSchemaTokens->vector) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(role);
        return ds;
    }
    if (role == HdPrimvarSchemaTokens->color) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(role);
        return ds;
    }
    if (role == HdPrimvarSchemaTokens->pointIndex) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(role);
        return ds;
    }
    if (role == HdPrimvarSchemaTokens->edgeIndex) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(role);
        return ds;
    }
    if (role == HdPrimvarSchemaTokens->faceIndex) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(role);
        return ds;
    }
    if (role == HdPrimvarSchemaTokens->textureCoordinate) {
        static const HdRetainedTypedSampledDataSource<TfToken>::Handle ds =
            HdRetainedTypedSampledDataSource<TfToken>::New(role);
        return ds;
    }

    // fallback for unknown token
    return HdRetainedTypedSampledDataSource<TfToken>::New(role);
}

HdPrimvarSchema::Builder &
HdPrimvarSchema::Builder::SetPrimvarValue(
    const HdSampledDataSourceHandle &primvarValue)
{
    _primvarValue = primvarValue;
    return *this;
}

HdPrimvarSchema::Builder &
HdPrimvarSchema::Builder::SetIndexedPrimvarValue(
    const HdSampledDataSourceHandle &indexedPrimvarValue)
{
    _indexedPrimvarValue = indexedPrimvarValue;
    return *this;
}

HdPrimvarSchema::Builder &
HdPrimvarSchema::Builder::SetIndices(
    const HdIntArrayDataSourceHandle &indices)
{
    _indices = indices;
    return *this;
}

HdPrimvarSchema::Builder &
HdPrimvarSchema::Builder::SetInterpolation(
    const HdTokenDataSourceHandle &interpolation)
{
    _interpolation = interpolation;
    return *this;
}

HdPrimvarSchema::Builder &
HdPrimvarSchema::Builder::SetRole(
    const HdTokenDataSourceHandle &role)
{
    _role = role;
    return *this;
}

HdContainerDataSourceHandle
HdPrimvarSchema::Builder::Build()
{
    return HdPrimvarSchema::BuildRetained(
        _primvarValue,
        _indexedPrimvarValue,
        _indices,
        _interpolation,
        _role
    );
}


PXR_NAMESPACE_CLOSE_SCOPE
