//
// Copyright 2021 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// schema.template.cpp file to make changes.

#include "pxr/imaging/hd/dataSharingSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdDataSharingSchemaTokens,
    HDDATASHARING_SCHEMA_TOKENS);



HdPathDataSourceHandle
HdDataSharingSchema::GetSharingId()
{
    return _GetTypedDataSource<HdPathDataSource>(
        HdDataSharingSchemaTokens->sharingId);
}

/*static*/
HdContainerDataSourceHandle
HdDataSharingSchema::BuildRetained(
        const HdPathDataSourceHandle &path
)
{
    TfToken names[1];
    HdDataSourceBaseHandle values[1];

    size_t count = 0;
    if (path) {
        names[count] = HdDataSharingSchemaTokens->sharingId;
        values[count++] = path;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}

/*static*/
HdDataSharingSchema
HdDataSharingSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdDataSharingSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdDataSharingSchemaTokens->dataSharing))
        : nullptr);
}

/*static*/
const HdDataSourceLocator &
HdDataSharingSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        HdDataSharingSchemaTokens->dataSharing
    );
    return locator;
} 
HdDataSharingSchema::Builder &
HdDataSharingSchema::Builder::SetPaths(
    const HdPathDataSourceHandle &path)
{
    _path = path;
    return *this;
}

HdContainerDataSourceHandle
HdDataSharingSchema::Builder::Build()
{
    return HdDataSharingSchema::BuildRetained(
        _path
    );
}


PXR_NAMESPACE_CLOSE_SCOPE
