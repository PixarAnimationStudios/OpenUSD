//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.cpp files to make changes.         ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/volumeFieldSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdVolumeFieldSchemaTokens,
    HDVOLUMEFIELD_SCHEMA_TOKENS);



HdAssetPathDataSourceHandle
HdVolumeFieldSchema::GetFilePath()
{
    return _GetTypedDataSource<HdAssetPathDataSource>(
        HdVolumeFieldSchemaTokens->filePath);
}

HdTokenDataSourceHandle
HdVolumeFieldSchema::GetFieldName()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdVolumeFieldSchemaTokens->fieldName);
}

HdIntDataSourceHandle
HdVolumeFieldSchema::GetFieldIndex()
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdVolumeFieldSchemaTokens->fieldIndex);
}

HdTokenDataSourceHandle
HdVolumeFieldSchema::GetFieldDataType()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdVolumeFieldSchemaTokens->fieldDataType);
}

HdTokenDataSourceHandle
HdVolumeFieldSchema::GetVectorDataRoleHint()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdVolumeFieldSchemaTokens->vectorDataRoleHint);
}

/*static*/
HdContainerDataSourceHandle
HdVolumeFieldSchema::BuildRetained(
        const HdAssetPathDataSourceHandle &filePath,
        const HdTokenDataSourceHandle &fieldName,
        const HdIntDataSourceHandle &fieldIndex,
        const HdTokenDataSourceHandle &fieldDataType,
        const HdTokenDataSourceHandle &vectorDataRoleHint
)
{
    TfToken names[5];
    HdDataSourceBaseHandle values[5];

    size_t count = 0;
    if (filePath) {
        names[count] = HdVolumeFieldSchemaTokens->filePath;
        values[count++] = filePath;
    }

    if (fieldName) {
        names[count] = HdVolumeFieldSchemaTokens->fieldName;
        values[count++] = fieldName;
    }

    if (fieldIndex) {
        names[count] = HdVolumeFieldSchemaTokens->fieldIndex;
        values[count++] = fieldIndex;
    }

    if (fieldDataType) {
        names[count] = HdVolumeFieldSchemaTokens->fieldDataType;
        values[count++] = fieldDataType;
    }

    if (vectorDataRoleHint) {
        names[count] = HdVolumeFieldSchemaTokens->vectorDataRoleHint;
        values[count++] = vectorDataRoleHint;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}

/*static*/
HdVolumeFieldSchema
HdVolumeFieldSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdVolumeFieldSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdVolumeFieldSchemaTokens->volumeField))
        : nullptr);
}

/*static*/
const TfToken &
HdVolumeFieldSchema::GetSchemaToken()
{
    return HdVolumeFieldSchemaTokens->volumeField;
} 
/*static*/
const HdDataSourceLocator &
HdVolumeFieldSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        HdVolumeFieldSchemaTokens->volumeField
    );
    return locator;
} 
HdVolumeFieldSchema::Builder &
HdVolumeFieldSchema::Builder::SetFilePath(
    const HdAssetPathDataSourceHandle &filePath)
{
    _filePath = filePath;
    return *this;
}

HdVolumeFieldSchema::Builder &
HdVolumeFieldSchema::Builder::SetFieldName(
    const HdTokenDataSourceHandle &fieldName)
{
    _fieldName = fieldName;
    return *this;
}

HdVolumeFieldSchema::Builder &
HdVolumeFieldSchema::Builder::SetFieldIndex(
    const HdIntDataSourceHandle &fieldIndex)
{
    _fieldIndex = fieldIndex;
    return *this;
}

HdVolumeFieldSchema::Builder &
HdVolumeFieldSchema::Builder::SetFieldDataType(
    const HdTokenDataSourceHandle &fieldDataType)
{
    _fieldDataType = fieldDataType;
    return *this;
}

HdVolumeFieldSchema::Builder &
HdVolumeFieldSchema::Builder::SetVectorDataRoleHint(
    const HdTokenDataSourceHandle &vectorDataRoleHint)
{
    _vectorDataRoleHint = vectorDataRoleHint;
    return *this;
}

HdContainerDataSourceHandle
HdVolumeFieldSchema::Builder::Build()
{
    return HdVolumeFieldSchema::BuildRetained(
        _filePath,
        _fieldName,
        _fieldIndex,
        _fieldDataType,
        _vectorDataRoleHint
    );
}


PXR_NAMESPACE_CLOSE_SCOPE