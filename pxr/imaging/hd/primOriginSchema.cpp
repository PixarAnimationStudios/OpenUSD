//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.cpp files to make changes.         ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/primOriginSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdPrimOriginSchemaTokens,
    HDPRIMORIGIN_SCHEMA_TOKENS);



SdfPath
HdPrimOriginSchema::GetOriginPath(const TfToken &name) const
{
    if (!_container) {
        return SdfPath();
    }
    OriginPathDataSource::Handle const ds =
        OriginPathDataSource::Cast(_container->Get(name));
    if (!ds) {
        return SdfPath();
    }
    return ds->GetTypedValue(0.0f).GetPath();
}

std::ostream &
operator <<(std::ostream &stream, HdPrimOriginSchema::OriginPath const &p)
{
    return stream << "HdPrimOriginSchema::OriginPath(" << p.GetPath() << ")";
}



/*static*/
HdPrimOriginSchema
HdPrimOriginSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdPrimOriginSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdPrimOriginSchemaTokens->primOrigin))
        : nullptr);
}

/*static*/
const TfToken &
HdPrimOriginSchema::GetSchemaToken()
{
    return HdPrimOriginSchemaTokens->primOrigin;
} 
/*static*/
const HdDataSourceLocator &
HdPrimOriginSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        HdPrimOriginSchemaTokens->primOrigin
    );
    return locator;
} 
/*static*/
const HdDataSourceLocator &
HdPrimOriginSchema::GetScenePathLocator()
{
    static const HdDataSourceLocator locator(
        HdPrimOriginSchemaTokens->primOrigin,
        HdPrimOriginSchemaTokens->scenePath
    );
    return locator;
}


PXR_NAMESPACE_CLOSE_SCOPE