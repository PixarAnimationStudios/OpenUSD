//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdGen/schema.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/imaging/hd/legacyDisplayStyleSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(HdLegacyDisplayStyleSchemaTokens,
    HD_LEGACY_DISPLAY_STYLE_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--




HdIntDataSourceHandle
HdLegacyDisplayStyleSchema::GetRefineLevel()
{
    return _GetTypedDataSource<HdIntDataSource>(
        HdLegacyDisplayStyleSchemaTokens->refineLevel);
}

HdBoolDataSourceHandle
HdLegacyDisplayStyleSchema::GetFlatShadingEnabled()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdLegacyDisplayStyleSchemaTokens->flatShadingEnabled);
}

HdBoolDataSourceHandle
HdLegacyDisplayStyleSchema::GetDisplacementEnabled()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdLegacyDisplayStyleSchemaTokens->displacementEnabled);
}

HdBoolDataSourceHandle
HdLegacyDisplayStyleSchema::GetOccludedSelectionShowsThrough()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdLegacyDisplayStyleSchemaTokens->occludedSelectionShowsThrough);
}

HdBoolDataSourceHandle
HdLegacyDisplayStyleSchema::GetPointsShadingEnabled()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdLegacyDisplayStyleSchemaTokens->pointsShadingEnabled);
}

HdBoolDataSourceHandle
HdLegacyDisplayStyleSchema::GetMaterialIsFinal()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        HdLegacyDisplayStyleSchemaTokens->materialIsFinal);
}

HdTokenDataSourceHandle
HdLegacyDisplayStyleSchema::GetShadingStyle()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdLegacyDisplayStyleSchemaTokens->shadingStyle);
}

HdTokenArrayDataSourceHandle
HdLegacyDisplayStyleSchema::GetReprSelector()
{
    return _GetTypedDataSource<HdTokenArrayDataSource>(
        HdLegacyDisplayStyleSchemaTokens->reprSelector);
}

HdTokenDataSourceHandle
HdLegacyDisplayStyleSchema::GetCullStyle()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        HdLegacyDisplayStyleSchemaTokens->cullStyle);
}

/*static*/
HdContainerDataSourceHandle
HdLegacyDisplayStyleSchema::BuildRetained(
        const HdIntDataSourceHandle &refineLevel,
        const HdBoolDataSourceHandle &flatShadingEnabled,
        const HdBoolDataSourceHandle &displacementEnabled,
        const HdBoolDataSourceHandle &occludedSelectionShowsThrough,
        const HdBoolDataSourceHandle &pointsShadingEnabled,
        const HdBoolDataSourceHandle &materialIsFinal,
        const HdTokenDataSourceHandle &shadingStyle,
        const HdTokenArrayDataSourceHandle &reprSelector,
        const HdTokenDataSourceHandle &cullStyle
)
{
    TfToken _names[9];
    HdDataSourceBaseHandle _values[9];

    size_t _count = 0;
    if (refineLevel) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->refineLevel;
        _values[_count++] = refineLevel;
    }

    if (flatShadingEnabled) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->flatShadingEnabled;
        _values[_count++] = flatShadingEnabled;
    }

    if (displacementEnabled) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->displacementEnabled;
        _values[_count++] = displacementEnabled;
    }

    if (occludedSelectionShowsThrough) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->occludedSelectionShowsThrough;
        _values[_count++] = occludedSelectionShowsThrough;
    }

    if (pointsShadingEnabled) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->pointsShadingEnabled;
        _values[_count++] = pointsShadingEnabled;
    }

    if (materialIsFinal) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->materialIsFinal;
        _values[_count++] = materialIsFinal;
    }

    if (shadingStyle) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->shadingStyle;
        _values[_count++] = shadingStyle;
    }

    if (reprSelector) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->reprSelector;
        _values[_count++] = reprSelector;
    }

    if (cullStyle) {
        _names[_count] = HdLegacyDisplayStyleSchemaTokens->cullStyle;
        _values[_count++] = cullStyle;
    }

    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

/*static*/
HdLegacyDisplayStyleSchema
HdLegacyDisplayStyleSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return HdLegacyDisplayStyleSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                HdLegacyDisplayStyleSchemaTokens->displayStyle))
        : nullptr);
}

/*static*/
const TfToken &
HdLegacyDisplayStyleSchema::GetSchemaToken()
{
    return HdLegacyDisplayStyleSchemaTokens->displayStyle;
}

/*static*/
const HdDataSourceLocator &
HdLegacyDisplayStyleSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        HdLegacyDisplayStyleSchemaTokens->displayStyle
    );
    return locator;
} 

/* static */
const HdDataSourceLocator &
HdLegacyDisplayStyleSchema::GetReprSelectorLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdLegacyDisplayStyleSchemaTokens->reprSelector);
    return locator;
}

/* static */
const HdDataSourceLocator &
HdLegacyDisplayStyleSchema::GetCullStyleLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            HdLegacyDisplayStyleSchemaTokens->cullStyle);
    return locator;
}
HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetRefineLevel(
    const HdIntDataSourceHandle &refineLevel)
{
    _refineLevel = refineLevel;
    return *this;
}

HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetFlatShadingEnabled(
    const HdBoolDataSourceHandle &flatShadingEnabled)
{
    _flatShadingEnabled = flatShadingEnabled;
    return *this;
}

HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetDisplacementEnabled(
    const HdBoolDataSourceHandle &displacementEnabled)
{
    _displacementEnabled = displacementEnabled;
    return *this;
}

HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetOccludedSelectionShowsThrough(
    const HdBoolDataSourceHandle &occludedSelectionShowsThrough)
{
    _occludedSelectionShowsThrough = occludedSelectionShowsThrough;
    return *this;
}

HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetPointsShadingEnabled(
    const HdBoolDataSourceHandle &pointsShadingEnabled)
{
    _pointsShadingEnabled = pointsShadingEnabled;
    return *this;
}

HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetMaterialIsFinal(
    const HdBoolDataSourceHandle &materialIsFinal)
{
    _materialIsFinal = materialIsFinal;
    return *this;
}

HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetShadingStyle(
    const HdTokenDataSourceHandle &shadingStyle)
{
    _shadingStyle = shadingStyle;
    return *this;
}

HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetReprSelector(
    const HdTokenArrayDataSourceHandle &reprSelector)
{
    _reprSelector = reprSelector;
    return *this;
}

HdLegacyDisplayStyleSchema::Builder &
HdLegacyDisplayStyleSchema::Builder::SetCullStyle(
    const HdTokenDataSourceHandle &cullStyle)
{
    _cullStyle = cullStyle;
    return *this;
}

HdContainerDataSourceHandle
HdLegacyDisplayStyleSchema::Builder::Build()
{
    return HdLegacyDisplayStyleSchema::BuildRetained(
        _refineLevel,
        _flatShadingEnabled,
        _displacementEnabled,
        _occludedSelectionShowsThrough,
        _pointsShadingEnabled,
        _materialIsFinal,
        _shadingStyle,
        _reprSelector,
        _cullStyle
    );
}


PXR_NAMESPACE_CLOSE_SCOPE