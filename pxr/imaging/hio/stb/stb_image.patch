--- original/stb_image.h	2024-06-17 09:30:48
+++ stb_image.h	2024-06-17 09:34:53
@@ -490,14 +490,14 @@
 STBIDEF void     stbi_image_free      (void *retval_from_stbi_load);
 
 // get image dimensions & components without fully decoding
-STBIDEF int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);
-STBIDEF int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);
+STBIDEF int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, float *gamma);
+STBIDEF int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, float *gamma);
 STBIDEF int      stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len);
 STBIDEF int      stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *clbk, void *user);
 
 #ifndef STBI_NO_STDIO
-STBIDEF int      stbi_info               (char const *filename,     int *x, int *y, int *comp);
-STBIDEF int      stbi_info_from_file     (FILE *f,                  int *x, int *y, int *comp);
+STBIDEF int      stbi_info               (char const *filename,     int *x, int *y, int *comp, float *gamma);
+STBIDEF int      stbi_info_from_file     (FILE *f,                  int *x, int *y, int *comp, float *gamma);
 STBIDEF int      stbi_is_16_bit          (char const *filename);
 STBIDEF int      stbi_is_16_bit_from_file(FILE *f);
 #endif
@@ -913,7 +913,7 @@
 #ifndef STBI_NO_PNG
 static int      stbi__png_test(stbi__context *s);
 static void    *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
-static int      stbi__png_info(stbi__context *s, int *x, int *y, int *comp);
+static int      stbi__png_info(stbi__context *s, int *x, int *y, int *comp, float *gamma);
 static int      stbi__png_is16(stbi__context *s);
 #endif
 
@@ -4626,11 +4626,12 @@
    return 1;
 }
 
-typedef struct
+typedef struct stbi__png_type
 {
    stbi__context *s;
    stbi_uc *idata, *expanded, *out;
    int depth;
+   float gamma;
 } stbi__png;
 
 
@@ -5086,6 +5087,7 @@
    z->expanded = NULL;
    z->idata = NULL;
    z->out = NULL;
+   z->gamma = 0;
 
    if (!stbi__check_png_header(s)) return 0;
 
@@ -5167,6 +5169,13 @@
             break;
          }
 
+         case STBI__PNG_TYPE('g','A','M','A'): {
+            if (first) return stbi__err("first not IHDR", "Corrupt PNG");
+            if (4 != c.length) return stbi__err("invalid gAMA","Corrupt PNG");
+            z->gamma = stbi__get32be(s) / 100000.0f;
+            break;
+         }
+
          case STBI__PNG_TYPE('I','D','A','T'): {
             if (first) return stbi__err("first not IHDR", "Corrupt PNG");
             if (pal_img_n && !pal_len) return stbi__err("no PLTE","Corrupt PNG");
@@ -5293,6 +5302,7 @@
 {
    stbi__png p;
    p.s = s;
+   p.gamma = 0;
    return stbi__do_png(&p, x,y,comp,req_comp, ri);
 }
 
@@ -5304,7 +5314,7 @@
    return r;
 }
 
-static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)
+static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp, float *gamma)
 {
    if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
       stbi__rewind( p->s );
@@ -5313,21 +5323,24 @@
    if (x) *x = p->s->img_x;
    if (y) *y = p->s->img_y;
    if (comp) *comp = p->s->img_n;
+   if (gamma) *gamma = p->gamma;
    return 1;
 }
 
-static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)
+static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp, float *gamma)
 {
    stbi__png p;
    p.s = s;
-   return stbi__png_info_raw(&p, x, y, comp);
+   p.gamma = 0;
+   return stbi__png_info_raw(&p, x, y, comp, gamma);
 }
 
 static int stbi__png_is16(stbi__context *s)
 {
    stbi__png p;
    p.s = s;
-   if (!stbi__png_info_raw(&p, NULL, NULL, NULL))
+   p.gamma = 0;
+   if (!stbi__png_info_raw(&p, NULL, NULL, NULL, NULL))
 	   return 0;
    if (p.depth != 16) {
       stbi__rewind(p.s);
@@ -7626,14 +7639,14 @@
 }
 #endif
 
-static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)
+static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp, float *gamma)
 {
    #ifndef STBI_NO_JPEG
    if (stbi__jpeg_info(s, x, y, comp)) return 1;
    #endif
 
    #ifndef STBI_NO_PNG
-   if (stbi__png_info(s, x, y, comp))  return 1;
+   if (stbi__png_info(s, x, y, comp, gamma))  return 1;
    #endif
 
    #ifndef STBI_NO_GIF
@@ -7685,23 +7698,23 @@
 }
 
 #ifndef STBI_NO_STDIO
-STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)
+STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp, float *gamma)
 {
     FILE *f = stbi__fopen(filename, "rb");
     int result;
     if (!f) return stbi__err("can't fopen", "Unable to open file");
-    result = stbi_info_from_file(f, x, y, comp);
+    result = stbi_info_from_file(f, x, y, comp, gamma);
     fclose(f);
     return result;
 }
 
-STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)
+STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp, float *gamma)
 {
    int r;
    stbi__context s;
    long pos = ftell(f);
    stbi__start_file(&s, f);
-   r = stbi__info_main(&s,x,y,comp);
+   r = stbi__info_main(&s,x,y,comp, gamma);
    fseek(f,pos,SEEK_SET);
    return r;
 }
@@ -7728,18 +7741,18 @@
 }
 #endif // !STBI_NO_STDIO
 
-STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
+STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, float *gamma)
 {
    stbi__context s;
    stbi__start_mem(&s,buffer,len);
-   return stbi__info_main(&s,x,y,comp);
+   return stbi__info_main(&s,x,y,comp, gamma);
 }
 
-STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
+STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp, float *gamma)
 {
    stbi__context s;
    stbi__start_callbacks(&s, (stbi_io_callbacks *) c, user);
-   return stbi__info_main(&s,x,y,comp);
+   return stbi__info_main(&s,x,y,comp, gamma);
 }
 
 STBIDEF int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)
