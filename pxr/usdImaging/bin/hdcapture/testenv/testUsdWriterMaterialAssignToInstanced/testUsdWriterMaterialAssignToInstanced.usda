#usda 1.0
(
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Y"
)

def Xform "World"
{
    def Xform "Prototypes"
    {
        token visibility = "invisible"

        # Instancing mesh with two meshes and no materials assigned.
        def Xform "Mesh1"
        {
            def Mesh "Cube1"
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-50, -50, 50), (50, -50, 50), (-50, 50, 50), (50, 50, 50), (-50, -50, -50), (50, -50, -50), (-50, 50, -50), (50, 50, -50)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }

            def Mesh "Cube2"
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-50, -50, 50), (50, -50, 50), (-50, 50, 50), (50, 50, 50), (-50, -50, -50), (50, -50, -50), (-50, 50, -50), (50, 50, -50)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        # Instancing a single xform with two meshes and different material assignments.
        def Xform "Mesh2"
        {
            def Mesh "Cube1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-50, -50, 50), (50, -50, 50), (-50, 50, 50), (50, 50, 50), (-50, -50, -50), (50, -50, -50), (-50, 50, -50), (50, 50, -50)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"

                rel material:binding = </World/Prototypes/Mesh2/PreviewSurface1> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            def Mesh "Cube2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 6, 2, 3, 7, 4, 5, 1, 0, 4, 0, 2, 6, 5, 7, 3, 1]
                normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(-50, -50, 50), (50, -50, 50), (-50, 50, 50), (50, 50, 50), (-50, -50, -50), (50, -50, -50), (-50, 50, -50), (50, 50, -50)]
                texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0), (0, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token subdivisionScheme = "none"

                rel material:binding = </World/Prototypes/Mesh2/PreviewSurface2> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            def Material "PreviewSurface1"
            {
                token outputs:surface.connect = </World/Prototypes/Mesh2/PreviewSurface1/Shader.outputs:surface>

                def Shader "Shader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0, 0, 0) 
                    color3f inputs:emissiveColor = (1, 1, 1)
                    token outputs:surface (
                        renderType = "material"
                    )
                }
            }

            def Material "PreviewSurface2"
            {
                token outputs:surface.connect = </World/Prototypes/Mesh2/PreviewSurface2/Shader.outputs:surface>

                def Shader "Shader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0, 0, 0) 
                    color3f inputs:emissiveColor = (1, 1, 1)
                    token outputs:surface (
                        renderType = "material"
                    )
                }
            }
        }
    }

    def Xform "Objects"
    {

        def Xform "Instance1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            instanceable = true
            prepend references = </World/Prototypes/Mesh1>
        )
        {
            double3 xformOp:translate = (2, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            rel material:binding = </World/Looks/PreviewSurface1> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        def Xform "Instance2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            instanceable = true
            prepend references = </World/Prototypes/Mesh1>
        )
        {
            double3 xformOp:translate = (0, 2, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            rel material:binding = </World/Looks/PreviewSurface2> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        def Xform "Instance5" (
            instanceable = true
            prepend references = </World/Prototypes/Mesh2>
        )
        {
            double3 xformOp:translate = (2, 2, 2)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Xform "Instance6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            instanceable = true
            prepend references = </World/Prototypes/Mesh2>
        )
        {
            double3 xformOp:translate = (4, 4, 4)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            rel material:binding = </World/Looks/PreviewSurface1> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }
    }

    def Scope "Looks"
    {
        def Material "PreviewSurface1"
        {
            token outputs:surface.connect = </World/Looks/PreviewSurface1/Shader.outputs:surface>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0, 0, 0) 
                color3f inputs:emissiveColor = (1, 0, 0)
                token outputs:surface (
                    renderType = "material"
                )
            }
        }

        def Material "PreviewSurface2"
        {
            token outputs:surface.connect = </World/Looks/PreviewSurface2/Shader.outputs:surface>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0, 0, 0) 
                color3f inputs:emissiveColor = (0, 0, 1)
                token outputs:surface (
                    renderType = "material"
                )
            }
        }
    }
}

