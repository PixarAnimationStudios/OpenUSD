#usda 1.0

def "World"
{
    def "Instances"
    {
        def PointInstancer "thing01"
        {
            quath[] orientations = [(1, 0, 0, 0), (0.707031, 0, 0.707031, 0), (0.707031, 0, 0, 0.707031), (1, 0, 0, 0), (0.707031, 0, 0.707031, 0), (0.707031, 0, 0, 0.707031)]
            point3f[] positions = [(0, 0, 0), (150, 0, 0), (300, 0, 0), (0, 0, 0), (150, 0, 0), (300, 0, 0)]
            int[] protoIndices = [0, 0, 0, 1, 1, 1]
            prepend rel prototypes = [
                </World/Instances/thing01/proto/proto_Cube1_id0>,
                </Flattened_Prototype_1/Instancer>,
            ]
            float3[] scales = [(1, 1, 1), (1, 2, 1), (1, 1, 3), (1, 1, 1), (1, 2, 1), (1, 1, 3)]
            custom rel scenePrimPaths:Flattened_Prototype_1:Instancer
            prepend rel scenePrimPaths:Flattened_Prototype_1:Instancer = [
                </World/Instances/thing01/Instancer>,
                </World/Instances/thing02/Instancer>,
                </World/Instances/thing03/Instancer>,
            ]
            custom rel scenePrimPaths:World:Instances:thing01:proto:proto_Cube1_id0
            prepend rel scenePrimPaths:World:Instances:thing01:proto:proto_Cube1_id0 = [
                </World/Instances/thing01/Cube1>,
                </World/Instances/thing02/Cube1>,
                </World/Instances/thing03/Cube1>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "proto"
            {
                def Mesh "proto_Cube1_id0"
                {
                    custom uniform bool displayStyle:displacementEnabled = 1
                    custom uniform bool displayStyle:flatShadingEnabled = 0
                    custom uniform int displayStyle:refineLevel = 0
                    uniform bool doubleSided = 0
                    token faceVaryingLinearInterpolation = "cornersPlus1"
                    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                    int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
                    token interpolateBoundary = "edgeAndCorner"
                    normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                        interpolation = "faceVarying"
                    )
                    uniform token orientation = "rightHanded"
                    point3f[] points = [(-50, -50, -50), (50, -50, -50), (-50, -50, 50), (50, -50, 50), (-50, 50, -50), (50, 50, -50), (50, 50, 50), (-50, 50, 50)]
                    float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
                        interpolation = "faceVarying"
                    )
                    int[] primvars:st:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
                    uniform token purpose = "default"
                    uniform token subdivisionScheme = "none"
                    token triangleSubdivisionRule = "catmullClark"
                    token visibility = "inherited"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }
    }

    def DistantLight "defaultLight"
    {
        float inputs:angle = 1
        color3f inputs:color = (1, 1, 1)
        float inputs:colorTemperature = 6500
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 3000
        bool inputs:normalize = 0
        float inputs:specular = 1
        token visibility = "inherited"
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0.7071067811865474, -0.7071067811865477, 0), (0, 0.7071067811865477, 0.7071067811865474, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "Camera"
    {
        float4[] clippingPlanes = []
        float2 clippingRange = (1, 10000000)
        float exposure = 0
        float focalLength = 18.147562
        float focusDistance = 0
        float fStop = 0
        float horizontalAperture = 20.955
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        uniform token stereoRole = "mono"
        float verticalAperture = 15.2908
        float verticalApertureOffset = 0
        token visibility = "inherited"
        custom int windowPolicy = 0
        matrix4d xformOp:transform = ( (0.9209629047454856, -1.1134150508576221e-7, -0.3896491930158362, 0), (-0.06418534194792992, 0.9863399431549463, -0.15170679124342276, 0), (0.3843268775803559, 0.16472622146635818, 0.9083831958376888, 0), (392.591, 105.678, 559.094, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "Flattened_Prototype_1"
{
    def PointInstancer "Instancer"
    {
        quath[] orientations = [(1, 0, 0, 0), (1, 0, 0, 0)]
        point3f[] positions = [(0, 60, 0), (0, 80, 0)]
        int[] protoIndices = [0, 0]
        prepend rel prototypes = </Flattened_Prototype_1/Instancer/proto/proto0_Cube2_id0>
        float3[] scales = [(1, 1, 1), (1.1, 1.1, 1.1)]
        custom rel scenePrimPaths:Flattened_Prototype_1:Instancer:proto:proto0_Cube2_id0
        prepend rel scenePrimPaths:Flattened_Prototype_1:Instancer:proto:proto0_Cube2_id0 = </World/Instances/thing01/Instancer/Cube2>
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        over "proto"
        {
            def Mesh "proto0_Cube2_id0"
            {
                custom uniform bool displayStyle:displacementEnabled = 1
                custom uniform bool displayStyle:flatShadingEnabled = 0
                custom uniform int displayStyle:refineLevel = 0
                uniform bool doubleSided = 0
                token faceVaryingLinearInterpolation = "cornersPlus1"
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 0, 4, 5, 1, 1, 5, 6, 3, 2, 3, 6, 7, 0, 2, 7, 4, 4, 7, 6, 5]
                token interpolateBoundary = "edgeAndCorner"
                normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                    interpolation = "faceVarying"
                )
                uniform token orientation = "rightHanded"
                point3f[] points = [(-5, -5, -5), (5, -5, -5), (-5, -5, 5), (5, -5, 5), (-5, 5, -5), (5, 5, -5), (5, 5, 5), (-5, 5, 5)]
                float2[] primvars:st = [(1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] (
                    interpolation = "faceVarying"
                )
                int[] primvars:st:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
                uniform token purpose = "default"
                uniform token subdivisionScheme = "none"
                token triangleSubdivisionRule = "catmullClark"
                token visibility = "inherited"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }
}

