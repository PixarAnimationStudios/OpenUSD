#usda 1.0
(
    upAxis = "Z"
)

def Xform "Implicits" (
    add variantSets = "shapeVariant"
)
{
    variantSet "shapeVariant" = {
        "Sphere" {
            def Sphere "Ball"
            {
            }
        }
    }
}

def Sphere "frontSphere" {
    double3 xformOp:translate = (2, 2, 2)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def Sphere "backSphere" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    double3 xformOp:translate = (-2, 2, 2)
    uniform token[] xformOpOrder = ["xformOp:translate"]
    rel material:binding = </Looks/Material_0>
}

def Scope "Looks"
{
    def Material "Material_0"
    {
        token outputs:surface.connect = </Looks/Material_0/PbrPreview.outputs:surface>

        def Shader "PbrPreview"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1,1,1)
            float inputs:roughness = 0
            color3f inputs:specularColor = (0.5, 0.5, 0.5)
            int inputs:useSpecularWorkflow = 1
            token outputs:surface
        }
    }
}

def Xform "lights"
{
    def SphereLight "light1"
    {
        color3f inputs:color = (0, 0.5, 0)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 6
        float inputs:intensity = 0.35
        bool inputs:normalize = 0
        float inputs:radius = 0.5
        float inputs:specular = 1
        bool treatAsPoint = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-3, 0, 2, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
    def SphereLight "light2"
    {
        color3f inputs:color = (0, 0, 0.5)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 6
        float inputs:intensity = 0.35
        bool inputs:normalize = 0
        float inputs:radius = 0.5
        float inputs:specular = 1
        bool treatAsPoint = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (3, 0, 2, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}
