#usda 1.0
(
    defaultPrim = "Scene"
    endTimeCode = 1
    startTimeCode = 1
    upAxis = "Y"
)

def Scope "Scene" (
    kind = "component"
)
{
    def Scope "Looks"
    {
        def Material "AdditiveMat"
        {
            token outputs:surface.connect = </Scene/Looks/AdditiveMat/Surface.outputs:surface>

            def Shader "Surface"
            {
                uniform asset info:glslfx:sourceAsset = @shader1.glslfx@
                uniform token info:implementationSource = "sourceAsset"
                uniform float3 inputs:diffuseColor = (1, 0, 1)
                token outputs:surface
            }
        }
    }

    def Xform "Geom"
    {
        def Mesh "Mesh01" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </Scene/Looks/AdditiveMat>
            point3f[] points = [(-3, -3, -3), (3, -3, -3), (3, 3, -3), (-3, 3, -3)]
            color3f[] primvars:displayColor = [(1, 0, 0)]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            double3 xformOp:translate = (0, 0, -2)
            uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:translate"]
        }

        def Mesh "Mesh02" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </Scene/Looks/AdditiveMat>
            point3f[] points = [(-3, -3, -3), (3, -3, -3), (3, 3, -3), (-3, 3, -3)]
            color3f[] primvars:displayColor = [(0, 1, 0)]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            double3 xformOp:translate = (-2, 1, -1)
            uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:translate"]
        }

        def Sphere "Sphere" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Scene/Looks/AdditiveMat>
            color3f[] primvars:displayColor = [(0, 0, 1)]
            double radius = 2
            custom double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }
}

