#usda 1.0
(
    startFrame = 1
    endFrame = 2
)

def Scope "World"
{
    def Mesh "myMesh"
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1,
            0, 1, 7, 5, 3, 6, 0, 2, 4]
        point3f[] points.timeSamples = {
            1: [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5),
                (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5),
                (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)],
            2: [(-0.5, -0.5, 1.0), (0.5, -0.5, 1.0), (-0.5, 0.5, 1.0),
                (0.5, 0.5, 1.0), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5),
                (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        }
        uniform token subdivisionScheme = "none"
    }

    def Mesh "myMesh2"
    {
        int[] faceVertexCounts = [3, 3, 3, 3]
        int[] faceVertexIndices = [0, 3, 2, 0, 1, 3, 0, 2, 1, 1, 2, 3]
        uniform token orientation = "leftHanded"
        point3f[] points = [(-2.8, 1, 0), (-3.7428102, -0.3333297, 0),
            (-2.3285947, -0.3333297, 0.8164976),
            (-2.3285947, -0.3333297, -0.8164976)]
        uniform token subdivisionScheme = "none"
    }

    def GenerativeProcedural "myGenerativeProc" (
        prepend apiSchemas = ["HydraGenerativeProceduralAPI"]
    )
    {
        token primvars:hdGp:proceduralType = "MakeSomeStuff"
        int primvars:myCount = 3
        int primvars:myDepth = 1
        bool primvars:addHierarchySparsely = true
    }

    def GenerativeProcedural "cubePerMeshProc" (
        prepend apiSchemas = ["HydraGenerativeProceduralAPI"]
    )
    {
        token primvars:hdGp:proceduralType = "CubePerMeshPoint"
        rel primvars:sourceMeshPath = </World/myMesh2>
        float primvars:scale = 2

        # here to test that the resolver allows this to pass through
        def Mesh "childMeshToPassThrough"
        {
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            point3f[] points = [
                (-0.5, -0.5, 0.5),
                (0.5, -0.5, 0.5),
                (-0.5, 0.5, 0.5),
                (0.5, 0.5, 0.5)]
        }
    }
}



