#usda 1.0
(
    upAxis = "Y"
    # When GeomSubset primvars are correctly supported,
    # the entire ball will be 50% gray.
)

def Xform "World"
{
    def "Ball"
    {
        def Mesh "BallGeom"
        {
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            point3f[] points = [(0.00000000, 0.20177411, 0.97943209), (0.00000000, 0.20177411, -0.97943209), (0.00000000, -0.20177411, 0.97943209), (0.00000000, -0.20177411, -0.97943209), (0.20177411, 0.97943209, 0.00000000), (0.20177411, -0.97943209, 0.00000000), (-0.20177411, 0.97943209, 0.00000000), (-0.20177411, -0.97943209, 0.00000000), (0.97943209, 0.00000000, 0.20177411), (-0.97943209, 0.00000000, 0.20177411), (0.97943209, 0.00000000, -0.20177411), (-0.97943209, 0.00000000, -0.20177411), (0.20177411, 0.73002557, 0.65295472), (0.20177411, 0.73002557, -0.65295472), (0.20177411, -0.73002557, 0.65295472), (0.20177411, -0.73002557, -0.65295472), (-0.20177411, 0.73002557, 0.65295472), (-0.20177411, 0.73002557, -0.65295472), (-0.20177411, -0.73002557, 0.65295472), (-0.20177411, -0.73002557, -0.65295472), (0.73002557, 0.65295472, 0.20177411), (0.73002557, -0.65295472, 0.20177411), (-0.73002557, 0.65295472, 0.20177411), (-0.73002557, -0.65295472, 0.20177411), (0.73002557, 0.65295472, -0.20177411), (0.73002557, -0.65295472, -0.20177411), (-0.73002557, 0.65295472, -0.20177411), (-0.73002557, -0.65295472, -0.20177411), (0.65295472, 0.20177411, 0.73002557), (-0.65295472, 0.20177411, 0.73002557), (0.65295472, 0.20177411, -0.73002557), (-0.65295472, 0.20177411, -0.73002557), (0.65295472, -0.20177411, 0.73002557), (-0.65295472, -0.20177411, 0.73002557), (0.65295472, -0.20177411, -0.73002557), (-0.65295472, -0.20177411, -0.73002557), (0.32647736, 0.40354821, 0.85472883), (0.32647736, 0.40354821, -0.85472883), (0.32647736, -0.40354821, 0.85472883), (0.32647736, -0.40354821, -0.85472883), (-0.32647736, 0.40354821, 0.85472883), (-0.32647736, 0.40354821, -0.85472883), (-0.32647736, -0.40354821, 0.85472883), (-0.32647736, -0.40354821, -0.85472883), (0.40354821, 0.85472883, 0.32647736), (0.40354821, -0.85472883, 0.32647736), (-0.40354821, 0.85472883, 0.32647736), (-0.40354821, -0.85472883, 0.32647736), (0.40354821, 0.85472883, -0.32647736), (0.40354821, -0.85472883, -0.32647736), (-0.40354821, 0.85472883, -0.32647736), (-0.40354821, -0.85472883, -0.32647736), (0.85472883, 0.32647736, 0.40354821), (-0.85472883, 0.32647736, 0.40354821), (0.85472883, 0.32647736, -0.40354821), (-0.85472883, 0.32647736, -0.40354821), (0.85472883, -0.32647736, 0.40354821), (-0.85472883, -0.32647736, 0.40354821), (0.85472883, -0.32647736, -0.40354821), (-0.85472883, -0.32647736, -0.40354821)]
            int[] faceVertexCounts = [6, 5, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6]
            int[] faceVertexIndices = [0, 2, 38, 32, 28, 36, 0, 36, 12, 16, 40, 0, 40, 29, 33, 42, 2, 1, 3, 43, 35, 31, 41, 1, 37, 30, 34, 39, 3, 1, 41, 17, 13, 37, 2, 42, 18, 14, 38, 3, 39, 15, 19, 43, 4, 6, 46, 16, 12, 44, 4, 44, 20, 24, 48, 4, 48, 13, 17, 50, 6, 5, 7, 51, 19, 15, 49, 5, 45, 14, 18, 47, 7, 5, 49, 25, 21, 45, 6, 50, 26, 22, 46, 7, 47, 23, 27, 51, 8, 10, 54, 24, 20, 52, 8, 52, 28, 32, 56, 8, 56, 21, 25, 58, 10, 9, 11, 59, 27, 23, 57, 9, 53, 22, 26, 55, 11, 9, 57, 33, 29, 53, 10, 58, 34, 30, 54, 11, 55, 31, 35, 59, 12, 36, 28, 52, 20, 44, 13, 48, 24, 54, 30, 37, 14, 45, 21, 56, 32, 38, 15, 39, 34, 58, 25, 49, 16, 46, 22, 53, 29, 40, 17, 41, 31, 55, 26, 50, 18, 42, 33, 57, 23, 47, 19, 51, 27, 59, 35, 43]
            uniform token subsetFamily:materialBind:familyType = "partition"
            
            float primvars:redChannel = 0.5 ( interpolation = "constant" )       # SHOULD be inherited
            float primvars:greenChannel = 0.0 ( interpolation = "constant" )     # should NOT be inherited

            def GeomSubset "BallPenta" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                int[] indices = [1, 5, 6, 7, 9, 13, 14, 15, 17, 21, 22, 23]
                uniform token familyName = "materialBind"
                
                float primvars:greenChannel = 0.5 ( interpolation = "constant" )
                # Final primvars should be red: 0.5, green: 0.5, blue: 0.5
                
                rel material:binding = </Looks/MaterialX/Materials/USD_Test>
            }
            
            def GeomSubset "BallHexa" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                int[] indices = [0, 2, 3, 4, 8, 10, 11, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31]
                uniform token familyName = "materialBind"
                
                rel material:binding = </Looks/Gray>
            }
        }
    }
    
    def Xform "Lights" 
    {
        def DomeLight "DomeLight"
        {
            asset inputs:texture:file = @./lightGray.png@
        }
    }
    def Camera "main_cam"
    {
        token projection = "perspective"
        matrix4d xformOp:transform = (
            (-0.7547095802227726, -2.7755575615628914e-17, -0.6560590289905075, 0.0),
            (-0.28244069214168843, 0.9025852843498606, 0.32491084915343377, 0.0),
            (0.5921492252316907, 0.4305110968082951, -0.6811897610669352, 0.0),
            (2.2577323648095398, 1.6414423852255045, -2.5972239844372744, 1.0))
        float horizontalAperture = 27.23798942565918
        float verticalAperture = 20.954999923706055
        float focalLength = 34.260799407958984
        float focusDistance = 3.8127760887145996
        token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Looks"
{
    def "MaterialX" (
        references = [ @looks.mtlx@</MaterialX> ]
    )
    {
        over "Materials" {
            over "USD_Test" {
                float primvars:redChannel = 0.0 ( interpolation = "constant" )   # should NOT be transferred
                float primvars:greenChannel = 1.0 ( interpolation = "constant" ) # should NOT be transferred
                float primvars:blueChannel = 0.5 ( interpolation = "constant" )  # SHOULD be transferred
            }
        }
    }
    
    def Material "Gray"
    {
        token outputs:surface.connect = </Looks/Gray/Surface.outputs:surface>

        def Shader "Surface"
        {   
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
            token outputs:surface
        }
    }
}
