#usda 1.0
(
    defaultPrim = "Mesh"
    endTimeCode = 1
    startTimeCode = 1
    upAxis = "Z"
)

class Mesh "QuadMeshProto"
{
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 6, 5, 1, 2, 7, 6, 2, 3, 8, 7, 3, 4, 9, 8, 5, 6, 11, 10, 6, 7, 12, 11, 7, 8, 13, 12, 8, 9, 14, 13, 10, 11, 16, 15, 11, 12, 17, 16, 12, 13, 18, 17, 13, 14, 19, 18, 15, 16, 21, 20, 16, 17, 22, 21, 17, 18, 23, 22, 18, 19, 24, 23]
    point3f[] points = [(-1, 0, -1), (-0.5, 0, -1), (0, 0, -1), (0.5, 0, -1), (1, 0, -1), (-1, 0, -0.5), (-0.5, 0.2, -0.5), (0, 0.2, -0.5), (0.5, 0.2, -0.5), (1, 0, -0.5), (-1, 0, 0), (-0.5, 0.2, 0), (0, 0.3, 0), (0.5, 0.2, 0), (1, 0, 0), (-1, 0, 0.5), (-0.5, 0.2, 0.5), (0, 0.2, 0.5), (0.5, 0.2, 0.5), (1, 0, 0.5), (-1, 0, 1), (-0.5, 0, 1), (0, 0, 1), (0.5, 0, 1), (1, 0, 1)]
    texCoord2f[] primvars:st_faceVarying = [(0, 0), (0.2, 0), (0.5, 0), (0.8, 0), (1, 0), (0, 0.2), (0.2, 0.2), (0.5, 0.1), (0.8, 0.2), (1, 0.2), (0, 0.4), (0.2, 0.4), (0.5, 0.2), (0.8, 0.4), (1, 0.4), (0, 0.6), (0.25, 0.6), (0.5, 0.4), (0.75, 0.6), (1, 0.6), (0, 0.8), (0.25, 0.8), (0.5, 0.65), (0.75, 0.8), (1, 0.8), (0, 1), (0.25, 1), (0.5, 1), (0.75, 1), (1, 1), (0.4, 0), (0.6, 0), (0.4, 0.1), (0.6, 0.1), (0.4, 0.25), (0.6, 0.25), (0.4, 1), (0.6, 1)] (
        interpolation = "faceVarying"
    )
    int[] primvars:st_faceVarying:indices = [0, 1, 6, 5, 1, 30, 32, 6, 31, 3, 8, 33, 3, 4, 9, 8, 5, 6, 11, 10, 6, 32, 34, 11, 33, 8, 13, 35, 8, 9, 14, 13, 15, 16, 21, 20, 16, 17, 22, 21, 17, 18, 23, 22, 18, 19, 24, 23, 20, 21, 26, 25, 21, 22, 36, 26, 22, 23, 28, 37, 23, 24, 29, 28]
    uniform token subdivisionScheme = "catmullClark"
}

class Mesh "TriangleMeshProto"
{
    int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    int[] faceVertexIndices = [0, 1, 2, 1, 3, 4, 0, 2, 5, 1, 4, 2, 3, 6, 4, 5, 2, 7, 2, 4, 8, 4, 6, 9, 5, 7, 10, 2, 8, 7, 4, 9, 8, 10, 7, 11, 7, 8, 12, 8, 9, 13, 7, 12, 11, 8, 13, 12, 6, 14, 9, 9, 14, 15, 9, 15, 13, 11, 12, 16, 12, 13, 17, 13, 15, 18, 12, 17, 16, 13, 18, 17]
    point3f[] points = [(0, 0, 1), (-0.433, 0, 0.75), (0, 0, 0.5), (-0.866, 0, 0.5), (-0.433, 0, 0.25), (0.433, 0, 0.75), (-0.866, 0, 0), (0.433, 0, 0.25), (0, -0.5, 0), (-0.433, 0, -0.25), (0.866, 0, 0.5), (0.866, 0, 0), (0.433, 0, -0.25), (0, 0, -0.5), (-0.866, 0, -0.5), (-0.433, 0, -0.75), (0.866, 0, -0.5), (0.433, 0, -0.75), (0, 0, -1)]
    texCoord2f[] primvars:st_faceVarying = [(0.45, 0.92), (0.3, 0.85), (0.5, 0.75), (0.1, 0.75), (0.3, 0.65), (0.7, 0.85), (0.05, 0.65), (0.05, 0.45), (0.25, 0.55), (0.7, 0.65), (0.5, 0.55), (0.25, 0.35), (0.9, 0.75), (0.45, 0.45), (0.95, 0.65), (0.75, 0.55), (0.95, 0.45), (0.55, 0.45), (0.75, 0.35), (0.45, 0.25), (0.55, 0.25), (0.05, 0.25), (0.25, 0.15), (0.95, 0.25), (0.75, 0.15), (0.45, 0.05), (0.55, 0.05), (0.55, 0.92)] (
        interpolation = "faceVarying"
    )
    int[] primvars:st_faceVarying:indices = [0, 1, 2, 1, 3, 4, 27, 2, 5, 1, 4, 2, 6, 7, 8, 5, 2, 9, 2, 4, 10, 8, 7, 11, 5, 9, 12, 2, 10, 9, 8, 11, 13, 14, 15, 16, 15, 17, 18, 13, 11, 19, 15, 18, 16, 17, 20, 18, 7, 21, 11, 11, 21, 22, 11, 22, 19, 16, 18, 23, 18, 20, 24, 19, 22, 25, 18, 24, 23, 20, 26, 24]
    uniform token subdivisionScheme = "loop"
}

class Mesh "PolygonMeshProto" 
{
    int[] faceVertexCounts = [ 3, 4, 5 ]
    int[] faceVertexIndices = [
        0, 1, 2,
        1, 3, 4, 2,
        3, 5, 6, 7, 4
    ]

    point3f[] points = [
        (-2.0,  0.0, -0.5 ),
        (-1.0, -1.0,  0.0 ),
        (-1.0,  1.0,  0.0 ),
        ( 0.0, -1.0,  0.2 ),
        ( 0.0,  1.0,  0.2 ),
        ( 1.0, -1.0,  0.0 ),
        ( 2.0,  0.0, -0.5 ),
        ( 1.0,  1.0,  0.0 ) ]

    uniform token subdivisionScheme = "catmullClark"

    float3 xformOp:scale = (0.6, 0.6, 0.6)
    float xformOp:rotateX = 90

    color3f[] primvars:colorVarying = [
        (1, 0, 0),
        (1, 0.3, 0), 
        (1, 1, 0), 
        (0, 1, 0), 
        (0, 1, 1),
        (0, 0, 1), 
        (0.5, 0, 0.5), 
        (1, 0.4, 0.7)] (
            interpolation = "varying"
        )

    color3f[] primvars:colorUniform = [
        (1, 0.3, 0), 
        (0, 1, 0.5), 
        (1, 0, 0.5)] (
            interpolation = "uniform"
        )

    color3f[] primvars:displayColor = [
        (1, 0, 0),
        (1, 0.3, 0), 
        (1, 1, 0), 
        (0, 1, 0), 
        (0, 1, 1),
        (0, 0, 1), 
        (0.5, 0, 0.5), 
        (1, 0.4, 0.7), 
        (1, 1, 1)] (
            interpolation = "faceVarying"
        )
    int[] primvars:displayColor:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2]
}

def Scope "Geom" (
    customData = {
        bool zUp = 0
    }
)
{
    def Mesh "QuadMesh" (
        references = </QuadMeshProto>
    )
    {
        double3 xformOp:translate = (-3, 0, 3)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1, 3, 4, 6]
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0, 2, 5, 7]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [8, 10, 13, 15]
            rel material:binding = </Materials/Yellow>
        }
    }

    def Mesh "TriangleMesh" (
        references = </TriangleMeshProto>
    )
    {
        double3 xformOp:translate = (0, 0, 3)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0, 1, 2, 3, 4]
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [5, 6, 7, 8, 9, 10, 16]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [11, 12, 13, 14, 15, 17, 18]
            rel material:binding = </Materials/Yellow>
        }
    }

    def Mesh "PolygonMesh" (
        references = </PolygonMeshProto>
    )
    {
        double3 xformOp:translate = (-3, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/Yellow>
        }
    }

    def Mesh "PolygonMeshWithHole0" (
        references = </PolygonMeshProto>
    )
    {
        int[] holeIndices = [0]

        double3 xformOp:translate = (-3, 0, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/Yellow>
        }
    }

    def Mesh "PolygonMeshWithHole1" (
        references = </PolygonMeshProto>
    )
    {
        int[] holeIndices = [1]

        double3 xformOp:translate = (-3, 0, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/Yellow>
        }
    }

    def Mesh "PolygonMeshWithHole2" (
        references = </PolygonMeshProto>
    )
    {
        int[] holeIndices = [2]

        double3 xformOp:translate = (-3, 0, -6)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/Yellow>
        }
    }

    def Mesh "PolygonMeshTwoHoles" (
        references = </PolygonMeshProto>
    )
    {
        int[] holeIndices = [1, 2]

        double3 xformOp:translate = (-3, 0, -8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/Yellow>
        }
    }

    def Mesh "QuadFaceVaryingUVs" (
        references = </QuadMeshProto>
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        double3 xformOp:translate = (3, 0, 3)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        rel material:binding = </Materials/FaceVaryingUVs>

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1, 3, 4, 6]
            rel material:binding = </Materials/FaceVaryingUVs>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0, 2, 5, 7]
            rel material:binding = </Materials/FaceVaryingUVs>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [8, 10, 13, 15]
            rel material:binding = </Materials/FaceVaryingUVs>
        }
    }

    def Mesh "TriangleFaceVaryingUVs" (
        references = </TriangleMeshProto>
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        double3 xformOp:translate = (6, 0, 3)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        rel material:binding = </Materials/FaceVaryingUVs>

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0, 1, 2, 3, 4]
            rel material:binding = </Materials/FaceVaryingUVs>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [5, 6, 7, 8, 9, 10, 16]
            rel material:binding = </Materials/FaceVaryingUVs>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [11, 12, 13, 14, 15, 17, 18]
            rel material:binding = </Materials/FaceVaryingUVs>
        }
    }

    def Mesh "PolygonVaryingColor" (
        references = </PolygonMeshProto>
    )
    {
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/VaryingColor>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/VaryingColor>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/VaryingColor>
        }
    }

    def Mesh "PolygonFaceVaryingColor" (
        references = </PolygonMeshProto>
    )
    {
        double3 xformOp:translate = (0, 0, -2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/FaceVaryingColor>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/FaceVaryingColor>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/FaceVaryingColor>
        }
    }

    def Mesh "PolygonUniformColor" (
        references = </PolygonMeshProto>
    )
    {
        double3 xformOp:translate = (0, 0, -4)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/UniformColor>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/UniformColor>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/UniformColor>
        }
    }

    def Mesh "PolygonFaceDifferentPrimvars" (
        references = </PolygonMeshProto>
    )
    {
        double3 xformOp:translate = (0, 0, -6)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        color3f[] primvars:color1 = [(1, 0, 0)]
        color3f[] primvars:color2 = [(0, 1, 0)]
        color3f[] primvars:color3 = [(0, 0, 1)]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/Color1>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/Color2>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/Color3>
        }
    }
    
    def Mesh "QuadNoIndices" (
        references = </QuadMeshProto>
    )
    {
        double3 xformOp:translate = (3, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = []
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0, 2, 5, 7]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = []
            rel material:binding = </Materials/Yellow>
        }
    }

    def Mesh "QuadNoMaterialId" (
        references = </QuadMeshProto>
    )
    {
        double3 xformOp:translate = (3, 0, -3)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        def GeomSubset "Subset1"
        {
            token familyName = "materialBind"
            int[] indices = [1, 3, 4, 6]
        }

        def GeomSubset "Subset2"
        {
            token familyName = "materialBind"
            int[] indices = [0, 2, 5, 7]
        }

        def GeomSubset "Subset3"
        {
            token familyName = "materialBind"
            int[] indices = [8, 10, 13, 15]
        }
    }

    def Mesh "QuadOverlappingIndices" (
        references = </QuadMeshProto>
    )
    {
        double3 xformOp:translate = (3, 0, -6)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1, 3, 4, 6, 0, 2, 5, 7]
            rel material:binding = </Materials/Cyan>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1, 3, 4, 6, 0, 2, 5, 7]
            rel material:binding = </Materials/Magenta>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [8, 10, 13, 15]
            rel material:binding = </Materials/Yellow>
        }
    }

    def Xform "NestedInstancing"
    {

        def Xform "ProtoRed"
        {
            token visibility = "invisible"

            def Mesh "PolygonMesh" (
                references = </PolygonMeshProto>
            )
            {   double3 xformOp:translate = (6, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

                def GeomSubset "Subset1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    token familyName = "materialBind"
                    int[] indices = [0]
                    rel material:binding = </Materials/Cyan>
                }

                def GeomSubset "Subset3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    token familyName = "materialBind"
                    int[] indices = [2]
                    rel material:binding = </Materials/Yellow>
                }
            }
        }

        def Xform "ProtoGreen" (
            references = </PolygonMeshProto>
        )
        {
            token visibility = "invisible"

            def Mesh "PolygonMesh" (
                references = </PolygonMeshProto>
            )
            {   
                double3 xformOp:translate = (6, 0, -2)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

                def GeomSubset "Subset2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    token familyName = "materialBind"
                    int[] indices = [1]
                    rel material:binding = </Materials/Magenta>
                }
            }
        }

        def Xform "Instance1"
        {
            def PointInstancer "Instancer"
            {
                point3f[] positions = [(0, 0, 0), (0, 0, 0)]
                int[] protoIndices = [0, 1]
                rel prototypes = [
                    </Geom/NestedInstancing/Instance1/Instancer/Protos/Proto1>,
                    </Geom/NestedInstancing/Instance1/Instancer/Protos/Proto2>,
                ]

                def "Protos"
                {
                    def "Proto1" (
                        instanceable = true
                        inherits = </Geom/NestedInstancing/ProtoRed>
                    )
                    {
                        token visibility = "visible"
                    }

                    def Xform "Proto2" (
                        instanceable = true
                        inherits = </Geom/NestedInstancing/ProtoGreen>
                    )
                    {
                        token visibility = "visible"
                    }
                }
            }
        }

        def Xform "Instance2"
        {
            def "C1" (
                instanceable = true
                inherits = </Geom/NestedInstancing/Instance1>
            )
            {
                custom double3 xformOp:translate = (2.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:rotateX", "xformOp:translate"]
            }
        }
    }

    def Mesh "QuadMeshPtex" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 1, 4, 5, 2, 4, 6, 7, 5, 6, 8, 9, 7, 8, 10, 11, 9]
        point3f[] points = [(0, 0, 0), (1, 0, 0), (1, 0, 1), (0, 0, 1), (2, 0, 0), (2, 0, 1), (3, 0, 0), (3, 0, 1), (4, 0, 0), (4, 0, 1), (5, 0, 0), (5, 0, 1)]
        uniform token subdivisionScheme = "catmullClark"
        double3 xformOp:translate = (-1, 0, -9)
        uniform token[] xformOpOrder = ["xformOp:translate"]
        custom float[] primvars:myPtexFaceIndex = [0] (
            interpolation = "uniform"
        )
        custom int primvars:ptexFaceOffset = 60 (
            interpolation = "constant"
        )

        rel material:binding = </Materials/PtexMat>

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/PtexMat>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/PtexMat>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [3]
            rel material:binding = </Materials/PtexMat>
        }
    }

    def Mesh "MultipleMaterialTags" (
        references = </PolygonMeshProto>
    )
    {
        double3 xformOp:translate = (6, 0, -6)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX", "xformOp:scale"]

        def GeomSubset "Subset1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [0]
            rel material:binding = </Materials/DefaultMatTag>
        }

        def GeomSubset "Subset2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [1]
            rel material:binding = </Materials/AdditiveMatTag>
        }

        def GeomSubset "Subset3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            token familyName = "materialBind"
            int[] indices = [2]
            rel material:binding = </Materials/TranslucentMatTag>
        }
    }
}

def Scope "Materials"
{
    def Material "Cyan"
    {
        token outputs:surface.connect = </Materials/Cyan/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.1, 1, 1)
            token outputs:surface
        }
    }

    def Material "Magenta"
    {
        token outputs:surface.connect = </Materials/Magenta/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 0.1, 1)
            token outputs:surface
        }
    }

    def Material "Yellow"
    {
        token outputs:surface.connect = </Materials/Yellow/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 0.1)
            token outputs:surface
        }
    }

    def Material "FaceVaryingUVs"
    {
        string inputs:coords = "st_faceVarying"
        token outputs:surface.connect = </Materials/FaceVaryingUVs/PbrPreview.outputs:surface>
        token outputs:displacement.connect = </Materials/FaceVaryingUVs/PbrPreview.outputs:displacement>

        def Shader "PbrPreview"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.18, 0.18, 0.18)
            color3f inputs:diffuseColor.connect = </Materials/FaceVaryingUVs/Diffuse.outputs:rgb>
            token outputs:surface
            token outputs:displacement
        }

        def Shader "Diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @texture2.png@
            float2 inputs:st.connect = </Materials/FaceVaryingUVs/Coords.outputs:result>
            float3 outputs:rgb
        }

        def Shader "Coords"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            string inputs:varname.connect = </Materials/FaceVaryingUVs.inputs:coords>
            float2 outputs:result
        }
    }

    def Material "FaceVaryingColor"
    {
        token outputs:surface.connect = </Materials/FaceVaryingColor/PbrPreview.outputs:surface>
        token outputs:displacement.connect = </Materials/FaceVaryingColor/PbrPreview.outputs:displacement>

        def Shader "PbrPreview"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.18, 0.18, 0.18)
            color3f inputs:diffuseColor.connect = </Materials/FaceVaryingColor/PrimvarReader.outputs:result>
            token outputs:surface
            token outputs:displacement
        }

        def Shader "PrimvarReader"
        {
            uniform token info:id = "UsdPrimvarReader_float3"
            string inputs:varname = "displayColor"
            float2 outputs:result
        }
    }

    def Material "VaryingColor"
    {
        token outputs:surface.connect = </Materials/VaryingColor/PbrPreview.outputs:surface>
        token outputs:displacement.connect = </Materials/VaryingColor/PbrPreview.outputs:displacement>

        def Shader "PbrPreview"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.18, 0.18, 0.18)
            color3f inputs:diffuseColor.connect = </Materials/VaryingColor/PrimvarReader.outputs:result>
            token outputs:surface
            token outputs:displacement
        }

        def Shader "PrimvarReader"
        {
            uniform token info:id = "UsdPrimvarReader_float3"
            string inputs:varname = "colorVarying"
            float2 outputs:result
        }
    }

    def Material "UniformColor"
    {
        token outputs:surface.connect = </Materials/UniformColor/PbrPreview.outputs:surface>
        token outputs:displacement.connect = </Materials/UniformColor/PbrPreview.outputs:displacement>

        def Shader "PbrPreview"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.18, 0.18, 0.18)
            color3f inputs:diffuseColor.connect = </Materials/UniformColor/PrimvarReader.outputs:result>
            token outputs:surface
            token outputs:displacement
        }

        def Shader "PrimvarReader"
        {
            uniform token info:id = "UsdPrimvarReader_float3"
            string inputs:varname = "colorUniform"
            float2 outputs:result
        }
    }

    def Material "Color1"
    {
        token outputs:surface.connect = </Materials/Color1/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.1, 1, 1)
            color3f inputs:diffuseColor.connect = </Materials/Color1/PrimvarReader.outputs:result>
            token outputs:surface
        }

        def Shader "PrimvarReader"
        {
            uniform token info:id = "UsdPrimvarReader_float3"
            string inputs:varname = "color1"
            float2 outputs:result
        }
    }

    def Material "Color2"
    {
        token outputs:surface.connect = </Materials/Color2/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 0.1, 1)
            color3f inputs:diffuseColor.connect = </Materials/Color2/PrimvarReader.outputs:result>
            token outputs:surface
        }

        def Shader "PrimvarReader"
        {
            uniform token info:id = "UsdPrimvarReader_float3"
            string inputs:varname = "color2"
            float2 outputs:result
        }
    }

    def Material "Color3"
    {
        token outputs:surface.connect = </Materials/Color3/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 0.1)
            color3f inputs:diffuseColor.connect = </Materials/Color3/PrimvarReader.outputs:result>
            token outputs:surface
        }

        def Shader "PrimvarReader"
        {
            uniform token info:id = "UsdPrimvarReader_float3"
            string inputs:varname = "color3"
            float2 outputs:result
        }
    }

    def Material "PtexMat"
    {
        token outputs:surface.connect = </Materials/PtexMat/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 0.1)
            color3f inputs:diffuseColor.connect = </Materials/PtexMat/PtexTexture.outputs:color>
            token outputs:surface
        }

        def Shader "PtexTexture"
        {
            uniform token info:id = "HwPtexTexture_1" (
                faceIndexPrimvar = "myPtexFaceIndex"
            )
            uniform asset inputs:file = @texture.ptx@
            float3 outputs:color
        }
    }
    
    def Material "DefaultMatTag"
    {
        token outputs:surface.connect = </Materials/DefaultMatTag/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform asset info:glslfx:sourceAsset = @default.glslfx@
            uniform token info:implementationSource = "sourceAsset"
            token outputs:surface
        }
    }

    def Material "AdditiveMatTag"
    {
        token outputs:surface.connect = </Materials/AdditiveMatTag/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform asset info:glslfx:sourceAsset = @additive.glslfx@
            uniform token info:implementationSource = "sourceAsset"
            token outputs:surface
        }
    }

    def Material "TranslucentMatTag"
    {
        token outputs:surface.connect = </Materials/TranslucentMatTag/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform asset info:glslfx:sourceAsset = @translucent.glslfx@
            uniform token info:implementationSource = "sourceAsset"
            token outputs:surface
        }
    }
}

