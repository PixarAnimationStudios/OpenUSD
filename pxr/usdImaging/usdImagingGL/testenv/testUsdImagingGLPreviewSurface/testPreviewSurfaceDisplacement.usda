#usda 1.0
(
    endFrame = 10
    startFrame = 1
    upAxis = "Y"
)

class Xform "MeshProto"
{
    def Mesh "Mesh" (
        references = @./testPreviewSurfaceDisplacement.geom.usda@
    )
    {
    }
}

def Material "Material"
{
    string inputs:coords = "st_faceVarying"
    token outputs:displacement.connect = </Material/Surface.outputs:displacement>
    token outputs:surface.connect = </Material/Surface.outputs:surface>

    def Shader "Surface"
    {
        token info:id = "UsdPreviewSurface"
        color3f inputs:diffuseColor.connect = </Material/DiffuseColor.outputs:rgb>
        float inputs:displacement.connect = </Material/Displacement.outputs:r>
        token outputs:displacement
        token outputs:surface
    }

    def Shader "DiffuseColor"
    {
        token info:id = "UsdUVTexture"
        asset inputs:file = @bricks_color.png@
        float2 inputs:st.connect = </Material/TextureCoords.outputs:result>
        float3 outputs:rgb
    }

    def Shader "Displacement"
    {
        token info:id = "UsdUVTexture"
        asset inputs:file = @bricks_disp.png@
        float2 inputs:st.connect = </Material/TextureCoords.outputs:result>
        float3 outputs:r
    }

    def Shader "TextureCoords"
    {
        token info:id = "UsdPrimvarReader_float2"
        string inputs:varname.connect = </Material.inputs:coords>
        float2 outputs:result
    }
}

def Xform "Model" (
    references = </MeshProto>
)
{
    def "Mesh" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Material>
        double xformOp:rotateX = 0
        double3 xformOp:scale = (20, 20, 20)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:rotateX", "xformOp:translate"]
    }
}

