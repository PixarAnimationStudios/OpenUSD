#usda 1.0
(
    upAxis = "Y"
)

def Xform "Scene" (
    kind = "component"
)
{
    def Xform "Lights"
    {
        def SphereLight "LeftRed" (
            active = true
        )
        {
            color3f inputs:color = (1, 0, 0)
            float inputs:intensity = 40
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-1.5, 0, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }

        def SphereLight "RightBlue" (
            active = true
        )
        {
            color3f inputs:color = (0, 0, 1)
            float inputs:intensity = 40
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (1.5, 0, 1)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }
    }

    def Xform "Geom"
    {
        def Mesh "Plane1" (
            apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </Materials/MaterialX/Materials/USD_NormalMap>
            point3f[] points = [(-1, -1, 0), (1, -1, 0), (1, 1, 0), (-1, 1, 0)]
            color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
            float2[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "vertex"
            )
            float xformOp:rotateY = 0
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateY"]
        }

        def Mesh "Plane2" (
            apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </Materials/MaterialX/Materials/USD_NormalMap>
            point3f[] points = [(-1, -1, 0), (1, -1, 0), (1, 1, 0), (-1, 1, 0)]
            color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
            float2[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "vertex"
            )
            float xformOp:rotateY = 45
            float3 xformOp:translate = (0, -2.5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateY"]
        }
    }
}

def Camera "Camera"
{
    float2 clippingRange = (0.1, 10000)
    float focalLength = 35
    float focusDistance = 8
    float fStop = 4.5
    float horizontalAperture = 36
    float verticalAperture = 24
    float3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:translate = (0, -1.3, 8)
    uniform token[] xformOpOrder = ["xformOp:rotateXYZ", "xformOp:translate"]
}


def Scope "Materials" {
    def Material "MaterialX" (
        references = [
            @./mtlxFiles/normalMap.mtlx@</MaterialX>,
        ]
    )
    {
    }
}