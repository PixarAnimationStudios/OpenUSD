#usda 1.0
(
    upAxis = "Z"
)

def Scope "UsdNative" {
    def Sphere "UsdEmissive_01" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Materials/USD_Emissive_01>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        double3 xformOp:translate = (-5.0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    def Sphere "UsdEmissive_02" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Materials/USD_Emissive_02>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        double3 xformOp:translate = (-2.5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    def Sphere "UsdEmissive_03" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Materials/USD_Emissive_03>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    def Sphere "UsdEmissive_04" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Materials/USD_Emissive_04>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        double3 xformOp:translate = (2.5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
    def Sphere "UsdEmissive_05" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Materials/USD_Emissive_05>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        double3 xformOp:translate = (5.0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
}

def Scope "Materials" {
    def Material "USD_Emissive_01" {
        token outputs:surface.connect = </Materials/USD_Emissive_01/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7, 0.2, 0.0)
            color3f inputs:emissiveColor = (0.2, 0.7, 0.)
            float inputs:roughness = 0.0

            token outputs:surface
        }
    }
    def Material "USD_Emissive_02" {
        token outputs:surface.connect = </Materials/USD_Emissive_02/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7, 0.2, 0.0)
            color3f inputs:emissiveColor = (0.2, 0.7, 0.)
            float inputs:roughness = 0.25

            token outputs:surface
        }
    }
    def Material "USD_Emissive_03" {
        token outputs:surface.connect = </Materials/USD_Emissive_03/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7, 0.2, 0.0)
            color3f inputs:emissiveColor = (0.2, 0.7, 0.)
            float inputs:roughness = 0.5

            token outputs:surface
        }
    }
    def Material "USD_Emissive_04" {
        token outputs:surface.connect = </Materials/USD_Emissive_04/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7, 0.2, 0.0)
            color3f inputs:emissiveColor = (0.2, 0.7, 0.)
            float inputs:roughness = 0.75

            token outputs:surface
        }
    }
    def Material "USD_Emissive_05" {
        token outputs:surface.connect = </Materials/USD_Emissive_05/Surface.outputs:surface>

        def Shader "Surface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7, 0.2, 0.0)
            color3f inputs:emissiveColor = (0.2, 0.7, 0.)
            float inputs:roughness = 1.0

            token outputs:surface
        }
    }
}

def Xform "lights" {
    def DomeLight "DomeLight"
    {
        asset inputs:texture:file = @./StinsonBeach.hdr@
        float xformOp:rotateX:Zup = 90
        uniform token[] xformOpOrder = ["xformOp:rotateX:Zup"]
    }
}

def Camera "Camera" {
    double3 xformOp:translate = (0, 0, 35)
    float xformOp:rotateX:Zup = 90
    uniform token[] xformOpOrder = ["xformOp:rotateX:Zup","xformOp:translate"]
}