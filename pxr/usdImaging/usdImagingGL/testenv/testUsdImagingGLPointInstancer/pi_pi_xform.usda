#usda 1.0
(
    upAxis = "Y"
)

def Xform "World"
{
    def PointInstancer "Outer"
    {
        int[] ids = [0]
        point3f[] positions = [(0, 0, 0)]
        int[] protoIndices = [0]
        rel prototypes = </World/Outer/OuterXform>

        def Xform "OuterXform"
        {
            float3 xformOp:translate = (-1, -1, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            def Mesh "Yellow"
            {
                int[] faceVertexCounts = [4]
                int[] faceVertexIndices = [0, 1, 2, 3]
                point3f[] points = [(0, 0, 1),(2, 0, 1),(2, 2, 1),(0, 2, 1)]
                uniform token subdivisionScheme = "none"
                color3f[] primvars:displayColor = [(1, 1, 0)]
            }

            def Xform "MiddleXform"
            {
                float3 xformOp:translate = (-9, -9, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]

                def Mesh "Blue"
                {
                    int[] faceVertexCounts = [4]
                    int[] faceVertexIndices = [0, 1, 2, 3]
                    point3f[] points = [(0, 0, 0), (10, 0, 0), (10, 10, 0), (0, 20, 0)]
                    uniform token subdivisionScheme = "none"
                    color3f[] primvars:displayColor = [(0, 0, 1)]
                }                

                def PointInstancer "Inner"
                {
                    int[] ids = [0]
                    point3f[] positions = [(0, 0, 0)]
                    int[] protoIndices = [0]
                    rel prototypes = </World/Outer/OuterXform/MiddleXform/Inner/InnerXform>

                    def Xform "InnerXform"
                    {
                        float3 xformOp:translate = (10, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate"]

                        def Mesh "Green"
                        {
                            int[] faceVertexCounts = [4]
                            int[] faceVertexIndices = [0, 1, 2, 3]
                            point3f[] points = [(0, 0, 0), (10, 0, 0), (10, 20, 0), (0, 10, 0)]
                            uniform token subdivisionScheme = "none"
                            color3f[] primvars:displayColor = [(0, 1, 0)]
                        }
                    }
                }
            }
        }
    }
    def Mesh "Red"
    {
        int[] faceVertexCounts = [3]
        int[] faceVertexIndices = [2, 1, 0]
        point3f[] points = [(0, 0, 0), (10, 10, 0), (-10, 10, 0)]
        uniform token subdivisionScheme = "none"
        color3f[] primvars:displayColor = [(1, 0, 0)]
    }
}

def DomeLight "Light"
{ }
