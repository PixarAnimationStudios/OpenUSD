#usda 1.0
(
    upAxis = "Z"
)

# The PointInstancer schema requires 'prototypes', 'protoIndices' and 
# 'positions' to be defined. If any of them are not defined, we should issue a 
# warning and not add the PI to the render index. 
# This test validates bad schema test cases where one of them is omitted; 
# none of them are added to the render index.
# XXX: There are 2 additional cases with empty attributes at the bottom that we
# don't handle as well as we ought to. They've been disabled.
#
# The expected output is an empty image with a  warning message for each case.
def Xform "prototypes" (
    active = false
)
{
    def Xform "OriginCube"
    {
        def Xform "Geom"
        {
            def Mesh "Cube"
            {
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
                point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
                color3f[] primvars:displayColor = [(0.2, 0.2, 0.2)]
            }
        }
    }
}

def PointInstancer "BadPointInstancerNoPrototypes"
{
    float3[] extent = [(-3, -3, -3), (3, 3, 3)]
    point3f[] positions = [(-2, 0, 0), (2, 0, 0)]
    int[] protoIndices = [0, 0]

    def "protos"
    {
        def "proto1" (
            active = true
            references = </prototypes>
        )
        {
        }
    }
}

def PointInstancer "BadPointInstancerNoProtoIndices"
{
    float3[] extent = [(-3, -3, -3), (3, 3, 3)]
    point3f[] positions = [(-2, 0, -2), (2, 0, -2)]
    rel prototypes = </BadPointInstancerNoProtoIndices/protos/proto1>

    def "protos"
    {
        def "proto1" (
            active = true
            references = </prototypes>
        )
        {
        }
    }
}

def PointInstancer "BadPointInstancerNoPositions"
{
    float3[] extent = [(-3, -3, -3), (3, 3, 3)]
    int[] protoIndices = [0, 0]
    rel prototypes = </BadPointInstancerNoPositions/protos/proto1>

    def "protos"
    {
        def "proto1" (
            active = true
            references = </prototypes>
        )
        {
        }
    }
}

# XXX: We don't validate this invalid case yet. It won't crash, but gets added 
# to the render index.
def PointInstancer "BadPointInstancerEmptyProtoIndices" (
    active = false
)
{
    float3[] extent = [(-3, -3, -3), (3, 3, 3)]
    point3f[] positions = [(-2, 0, -4), (2, 0, -4)]
    int[] protoIndices = []
    rel prototypes = </BadPointInstancerEmptyProtoIndices/protos/proto1>

    def "protos"
    {
        def "proto1" (
            active = true
            references = </prototypes>
        )
        {
        }
    }
}

# XXX: We don't validate this invalid case yet. It'll result in a runtime error.
def PointInstancer "BadPointInstancerEmptyPositions" (
    active = false
)
{
    float3[] extent = [(-3, -3, -3), (3, 3, 3)]
    point3f[] positions = []
    int[] protoIndices = [0, 0, 0, 0]
    rel prototypes = </BadPointInstancerEmptyPositions/protos/proto1>

    def "protos"
    {
        def "proto1" (
            active = true
            references = </prototypes>
        )
        {
        }
    }
}

