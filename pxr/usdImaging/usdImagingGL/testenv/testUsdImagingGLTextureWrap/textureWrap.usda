#usda 1.0
(
    endFrame = 0
    startFrame = 0
    upAxis = "Y"
)

def Scope "Defs"
{
    def Mesh "MeshDef" (
        active = false
        instanceable = false
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-1, -1, 0), (2, 2, 0)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        point3f[] points = [(-1, -1, 0), (2, -1, 0), (2, 2, 0), (-1, 2, 0)]
        custom float2[] primvars:uv = [(-1, -1), (2, -1), (2, 2), (-1, 2)] (
            interpolation = "vertex"
        )
    }
}

def Scope "TextureWrap"
{
    def Xform "HwUvTexture_1"
    {
        custom double3 xformOp:translate = (0, 4, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        def Xform "Shader"
        {
            custom double3 xformOp:translate = (0, 1.5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            def "Clamp" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/HwUvTexture_1/Shader/Clamp>
                custom double3 xformOp:translate = (-6.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Repeat" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/HwUvTexture_1/Shader/Repeat>
                custom double3 xformOp:translate = (-2.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Black" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/HwUvTexture_1/Shader/Black>
                custom double3 xformOp:translate = (1.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Mirror" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/HwUvTexture_1/Shader/Mirror>
                custom double3 xformOp:translate = (5.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }
        }

        def Xform "TextureWrap"
        {
            custom double3 xformOp:translate = (0, -2.5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            def "Clamp" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/HwUvTexture_1/TextureWrap/Clamp>
                custom double3 xformOp:translate = (-6.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Repeat" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/HwUvTexture_1/TextureWrap/Repeat>
                custom double3 xformOp:translate = (-2.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Black" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/HwUvTexture_1/TextureWrap/Black>
                custom double3 xformOp:translate = (1.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Mirror" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/HwUvTexture_1/TextureWrap/Mirror>
                custom double3 xformOp:translate = (5.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }
        }

        def Mesh "Fallback" (
            active = true
            instanceable = false
            references = </Defs/MeshDef>
        )
        {
            rel material:binding = </Materials/HwUvTexture_1/Fallback>
            custom double3 xformOp:translate = (9.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }

    def Xform "UsdUVTexture"
    {
        custom double3 xformOp:translate = (0, -4, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]

        def Xform "Shader"
        {
            custom double3 xformOp:translate = (0, 1.5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            def "Clamp" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/UsdUVTexture/Shader/Clamp>
                custom double3 xformOp:translate = (-6.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Repeat" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/UsdUVTexture/Shader/Repeat>
                custom double3 xformOp:translate = (-2.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Black" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/UsdUVTexture/Shader/Black>
                custom double3 xformOp:translate = (1.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Mirror" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/UsdUVTexture/Shader/Mirror>
                custom double3 xformOp:translate = (5.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }
        }

        def Xform "TextureWrap"
        {
            custom double3 xformOp:translate = (0, -2.5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]

            def "Clamp" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/UsdUVTexture/TextureWrap/Clamp>
                custom double3 xformOp:translate = (-6.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Repeat" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/UsdUVTexture/TextureWrap/Repeat>
                custom double3 xformOp:translate = (-2.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Black" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/UsdUVTexture/TextureWrap/Black>
                custom double3 xformOp:translate = (1.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }

            def "Mirror" (
                active = true
                instanceable = false
                references = </Defs/MeshDef>
            )
            {
                rel material:binding = </Materials/UsdUVTexture/TextureWrap/Mirror>
                custom double3 xformOp:translate = (5.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate"]
            }
        }

        def Mesh "Fallback" (
            active = true
            instanceable = false
            references = </Defs/MeshDef>
        )
        {
            rel material:binding = </Materials/UsdUVTexture/Fallback>
            custom double3 xformOp:translate = (9.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }
}

def Scope "Materials"
{
    def Scope "HwUvTexture_1"
    {
        def Scope "Shader"
        {
            def Material "Clamp"
            {
                token outputs:surface.connect = </Materials/HwUvTexture_1/Shader/Clamp/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/Shader/Clamp/Tex.outputs:color>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "HwUvTexture_1"
                    uniform asset inputs:file = @nowrap.bmp@
                    add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/Shader/Clamp/Primvar.outputs:result>
                    uniform token inputs:wrapS = "clamp"
                    uniform token inputs:wrapT = "clamp"
                    float3 outputs:color
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "HwPrimvar_1"
                    uniform token inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Repeat"
            {
                token outputs:surface.connect = </Materials/HwUvTexture_1/Shader/Repeat/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/Shader/Repeat/Tex.outputs:color>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "HwUvTexture_1"
                    uniform asset inputs:file = @nowrap.bmp@
                    add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/Shader/Repeat/Primvar.outputs:result>
                    uniform token inputs:wrapS = "repeat"
                    uniform token inputs:wrapT = "repeat"
                    float3 outputs:color
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "HwPrimvar_1"
                    uniform token inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Black"
            {
                token outputs:surface.connect = </Materials/HwUvTexture_1/Shader/Black/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/Shader/Black/Tex.outputs:color>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "HwUvTexture_1"
                    uniform asset inputs:file = @nowrap.bmp@
                    add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/Shader/Black/Primvar.outputs:result>
                    uniform token inputs:wrapS = "black"
                    uniform token inputs:wrapT = "black"
                    float3 outputs:color
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "HwPrimvar_1"
                    uniform token inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Mirror"
            {
                token outputs:surface.connect = </Materials/HwUvTexture_1/Shader/Mirror/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/Shader/Mirror/Tex.outputs:color>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "HwUvTexture_1"
                    uniform asset inputs:file = @nowrap.bmp@
                    add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/Shader/Mirror/Primvar.outputs:result>
                    uniform token inputs:wrapS = "mirror"
                    uniform token inputs:wrapT = "mirror"
                    float3 outputs:color
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "HwPrimvar_1"
                    uniform token inputs:varname = "uv"
                    float2 outputs:result
                }
            }
        }

        def Scope "TextureWrap"
        {
            def Material "Clamp"
            {
                token outputs:surface.connect = </Materials/HwUvTexture_1/TextureWrap/Clamp/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/TextureWrap/Clamp/Tex.outputs:color>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "HwUvTexture_1"
                    uniform asset inputs:file = @wrapclamp.tx@
                    add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/TextureWrap/Clamp/Primvar.outputs:result>
                    float3 outputs:color
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "HwPrimvar_1"
                    uniform token inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Repeat"
            {
                token outputs:surface.connect = </Materials/HwUvTexture_1/TextureWrap/Repeat/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/TextureWrap/Repeat/Tex.outputs:color>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "HwUvTexture_1"
                    uniform asset inputs:file = @wrapperiodic.tx@
                    add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/TextureWrap/Repeat/Primvar.outputs:result>
                    float3 outputs:color
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "HwPrimvar_1"
                    uniform token inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Black"
            {
                token outputs:surface.connect = </Materials/HwUvTexture_1/TextureWrap/Black/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/TextureWrap/Black/Tex.outputs:color>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "HwUvTexture_1"
                    uniform asset inputs:file = @wrapblack.tx@
                    add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/TextureWrap/Black/Primvar.outputs:result>
                    float3 outputs:color
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "HwPrimvar_1"
                    uniform token inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Mirror"
            {
                token outputs:surface.connect = </Materials/HwUvTexture_1/TextureWrap/Mirror/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/TextureWrap/Mirror/Tex.outputs:color>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "HwUvTexture_1"
                    uniform asset inputs:file = @wrapmirror.tx@
                    add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/TextureWrap/Mirror/Primvar.outputs:result>
                    float3 outputs:color
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "HwPrimvar_1"
                    uniform token inputs:varname = "uv"
                    float2 outputs:result
                }
            }
        }

        def Material "Fallback"
        {
            token outputs:surface.connect = </Materials/HwUvTexture_1/Fallback/Surface.outputs:surface>

            def Shader "Surface"
            {
                uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                uniform token info:implementationSource = "sourceAsset"
                uniform float3 inputs:diffuseColor = (1, 0, 0)
                add uniform float3 inputs:diffuseColor.connect = </Materials/HwUvTexture_1/Fallback/Tex.outputs:color>
                token outputs:surface
            }

            def Shader "Tex"
            {
                uniform token info:id = "HwUvTexture_1"
                uniform asset inputs:file = @nowrap.bmp@
                add uniform float2 inputs:uv.connect = </Materials/HwUvTexture_1/Fallback/Primvar.outputs:result>
                float3 outputs:color
            }

            def Shader "Primvar"
            {
                uniform token info:id = "HwPrimvar_1"
                uniform token inputs:varname = "uv"
                float2 outputs:result
            }
        }
    }

    def Scope "UsdUVTexture"
    {
        def Scope "Shader"
        {
            def Material "Clamp"
            {
                token outputs:surface.connect = </Materials/UsdUVTexture/Shader/Clamp/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/Shader/Clamp/Tex.outputs:rgb>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "UsdUVTexture"
                    uniform asset inputs:file = @nowrap.bmp@
                    float2 inputs:st.connect = </Materials/UsdUVTexture/Shader/Clamp/Primvar.outputs:result>
                    uniform token inputs:wrapS = "clamp"
                    uniform token inputs:wrapT = "clamp"
                    float3 outputs:rgb
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    uniform string inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Repeat"
            {
                token outputs:surface.connect = </Materials/UsdUVTexture/Shader/Repeat/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/Shader/Repeat/Tex.outputs:rgb>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "UsdUVTexture"
                    uniform asset inputs:file = @nowrap.bmp@
                    float2 inputs:st.connect = </Materials/UsdUVTexture/Shader/Repeat/Primvar.outputs:result>
                    uniform token inputs:wrapS = "repeat"
                    uniform token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    uniform string inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Black"
            {
                token outputs:surface.connect = </Materials/UsdUVTexture/Shader/Black/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/Shader/Black/Tex.outputs:rgb>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "UsdUVTexture"
                    uniform asset inputs:file = @nowrap.bmp@
                    float2 inputs:st.connect = </Materials/UsdUVTexture/Shader/Black/Primvar.outputs:result>
                    uniform token inputs:wrapS = "black"
                    uniform token inputs:wrapT = "black"
                    float3 outputs:rgb
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    uniform string inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Mirror"
            {
                token outputs:surface.connect = </Materials/UsdUVTexture/Shader/Mirror/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/Shader/Mirror/Tex.outputs:rgb>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "UsdUVTexture"
                    uniform asset inputs:file = @nowrap.bmp@
                    float2 inputs:st.connect = </Materials/UsdUVTexture/Shader/Mirror/Primvar.outputs:result>
                    uniform token inputs:wrapS = "mirror"
                    uniform token inputs:wrapT = "mirror"
                    float3 outputs:rgb
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    uniform string inputs:varname = "uv"
                    float2 outputs:result
                }
            }
        }

        def Scope "TextureWrap"
        {
            def Material "Clamp"
            {
                token outputs:surface.connect = </Materials/UsdUVTexture/TextureWrap/Clamp/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/TextureWrap/Clamp/Tex.outputs:rgb>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "UsdUVTexture"
                    uniform asset inputs:file = @wrapclamp.tx@
                    float2 inputs:st.connect = </Materials/UsdUVTexture/TextureWrap/Clamp/Primvar.outputs:result>
                    float3 outputs:rgb
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    uniform string inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Repeat"
            {
                token outputs:surface.connect = </Materials/UsdUVTexture/TextureWrap/Repeat/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/TextureWrap/Repeat/Tex.outputs:rgb>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "UsdUVTexture"
                    uniform asset inputs:file = @wrapperiodic.tx@
                    float2 inputs:st.connect = </Materials/UsdUVTexture/TextureWrap/Repeat/Primvar.outputs:result>
                    float3 outputs:rgb
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    uniform string inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Black"
            {
                token outputs:surface.connect = </Materials/UsdUVTexture/TextureWrap/Black/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/TextureWrap/Black/Tex.outputs:rgb>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "UsdUVTexture"
                    uniform asset inputs:file = @wrapblack.tx@
                    float2 inputs:st.connect = </Materials/UsdUVTexture/TextureWrap/Black/Primvar.outputs:result>
                    float3 outputs:rgb
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    uniform string inputs:varname = "uv"
                    float2 outputs:result
                }
            }

            def Material "Mirror"
            {
                token outputs:surface.connect = </Materials/UsdUVTexture/TextureWrap/Mirror/Surface.outputs:surface>

                def Shader "Surface"
                {
                    uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                    uniform token info:implementationSource = "sourceAsset"
                    uniform float3 inputs:diffuseColor = (1, 0, 0)
                    add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/TextureWrap/Mirror/Tex.outputs:rgb>
                    token outputs:surface
                }

                def Shader "Tex"
                {
                    uniform token info:id = "UsdUVTexture"
                    uniform asset inputs:file = @wrapmirror.tx@
                    float2 inputs:st.connect = </Materials/UsdUVTexture/TextureWrap/Mirror/Primvar.outputs:result>
                    float3 outputs:rgb
                }

                def Shader "Primvar"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    uniform string inputs:varname = "uv"
                    float2 outputs:result
                }
            }
        }

        def Material "Fallback"
        {
            token outputs:surface.connect = </Materials/UsdUVTexture/Fallback/Surface.outputs:surface>

            def Shader "Surface"
            {
                uniform asset info:glslfx:sourceAsset = @surface_shader.glslfx@
                uniform token info:implementationSource = "sourceAsset"
                uniform float3 inputs:diffuseColor = (1, 0, 0)
                add uniform float3 inputs:diffuseColor.connect = </Materials/UsdUVTexture/Fallback/Tex.outputs:rgb>
                token outputs:surface
            }

            def Shader "Tex"
            {
                uniform token info:id = "UsdUVTexture"
                uniform asset inputs:file = @nowrap.bmp@
                float2 inputs:st.connect = </Materials/UsdUVTexture/Fallback/Primvar.outputs:result>
                float3 outputs:rgb
            }

            def Shader "Primvar"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                uniform string inputs:varname = "uv"
                float2 outputs:result
            }
        }
    }
}

