#usda 1.0
(
    endTimeCode = 120
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def SkelRoot "Root" (
    kind = "component"
)
{
    def Skeleton "Skeleton" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 1) ), ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (2, 0, 0, 1) )]
        uniform token[] joints = ["joint1", "joint1/joint2", "joint1/joint2/joint3"]
        uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 1) ), ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (1, 0, 0, 1) )]
        rel skel:animationSource = </Root/Skeleton/Animation>

        def SkelAnimation "Animation"
        {
            uniform token[] joints = ["joint1", "joint1/joint2", "joint1/joint2/joint3"]
            quatf[] rotations.timeSamples = {
                1: [(0.5, 0.5, 0.5, 0.5), (1, 0, 0, 0), (-0.5, 0.5, 0.5, 0.5)],
                30: [(0.5, 0.5, 0.5, 0.5), (0.70710678, 0, 0.70710678, 0), (-0.5, 0.5, 0.5, 0.5)],
                60: [(0.5, 0.5, 0.5, 0.5), (1, 0, 0, 0), (-0.5, 0.5, 0.5, 0.5)],
                90: [(0.5, 0.5, 0.5, 0.5), (0.0447, 0.999, 0, 0), (-0.5, 0.5, 0.5, 0.5)],
                120: [(0.5, 0.5, 0.5, 0.5), (1, 0, 0, 0), (-0.5, 0.5, 0.5, 0.5)],
            }
            float3[] translations.timeSamples = {
                1: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
                120: [(0, -1, 0), (1, 0, 0), (1, 0, 0)],
            }
            half3[] scales = [(1, 1, 1), (1, 1, 1), (1, 1, 1)]
        }
    }

    def Mesh "Mesh" (
        apiSchemas = ["SkelBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 13, 12, 1, 2, 14, 13, 2, 3, 15, 14, 3, 4, 16, 15, 4, 5, 17, 16, 5, 6, 18, 17, 6, 7, 19, 18, 7, 8, 20, 19, 8, 9, 21, 20, 9, 10, 22, 21, 10, 11, 23, 22, 11, 0, 12, 23, 12, 13, 26, 25, 13, 14, 27, 26, 14, 15, 28, 27, 15, 16, 29, 28, 16, 17, 30, 29, 17, 18, 31, 30, 18, 19, 32, 31, 19, 20, 33, 32, 20, 21, 34, 33, 21, 22, 35, 34, 22, 23, 36, 35, 23, 12, 25, 36, 25, 26, 38, 37, 26, 27, 39, 38, 27, 28, 40, 39, 28, 29, 41, 40, 29, 30, 42, 41, 30, 31, 43, 42, 31, 32, 44, 43, 32, 33, 45, 44, 33, 34, 46, 45, 34, 35, 47, 46, 35, 36, 48, 47, 36, 25, 37, 48, 37, 38, 50, 49, 38, 39, 51, 50, 39, 40, 52, 51, 40, 41, 53, 52, 41, 42, 54, 53, 42, 43, 55, 54, 43, 44, 56, 55, 44, 45, 57, 56, 45, 46, 58, 57, 46, 47, 59, 58, 47, 48, 60, 59, 48, 37, 49, 60, 49, 50, 62, 61, 50, 51, 63, 62, 51, 52, 64, 63, 52, 53, 65, 64, 53, 54, 66, 65, 54, 55, 67, 66, 55, 56, 68, 67, 56, 57, 69, 68, 57, 58, 70, 69, 58, 59, 71, 70, 59, 60, 72, 71, 60, 49, 61, 72, 61, 62, 74, 73, 62, 63, 75, 74, 63, 64, 76, 75, 64, 65, 77, 76, 65, 66, 78, 77, 66, 67, 79, 78, 67, 68, 80, 79, 68, 69, 81, 80, 69, 70, 82, 81, 70, 71, 83, 82, 71, 72, 84, 83, 72, 61, 73, 84, 1, 0, 24, 2, 1, 24, 3, 2, 24, 4, 3, 24, 5, 4, 24, 6, 5, 24, 7, 6, 24, 8, 7, 24, 9, 8, 24, 10, 9, 24, 11, 10, 24, 0, 11, 24, 73, 74, 85, 74, 75, 85, 75, 76, 85, 76, 77, 85, 77, 78, 85, 78, 79, 85, 79, 80, 85, 80, 81, 85, 81, 82, 85, 82, 83, 85, 83, 84, 85, 84, 73, 85]
        point3f[] points = [(0.4330127, -2, -0.25), (0.25, -2, -0.4330127), (0, -2, -0.5), (-0.25, -2, -0.4330127), (-0.4330127, -2, -0.25), (-0.5, -2, 0), (-0.4330127, -2, 0.25), (-0.25, -2, 0.4330127), (0, -2, 0.5), (0.25, -2, 0.4330127), (0.4330127, -2, 0.25), (0.5, -2, 0), (0.8660254, -2, -0.5), (0.5, -2, -0.8660254), (0, -2, -1), (-0.5, -2, -0.8660254), (-0.8660254, -2, -0.5), (-1, -2, 0), (-0.8660254, -2, 0.5), (-0.5, -2, 0.8660254), (0, -2, 1), (0.5, -2, 0.8660254), (0.8660254, -2, 0.5), (1, -2, 0), (0, -2, 0), (0.8660254, -1, -0.5), (0.5, -1, -0.8660254), (0, -1, -1), (-0.5, -1, -0.8660254), (-0.8660254, -1, -0.5), (-1, -1, 0), (-0.8660254, -1, 0.5), (-0.5, -1, 0.8660254), (0, -1, 1), (0.5, -1, 0.8660254), (0.8660254, -1, 0.5), (1, -1, 0), (0.8660254, 0, -0.5), (0.5, 0, -0.8660254), (0, 0, -1), (-0.5, 0, -0.8660254), (-0.8660254, 0, -0.5), (-1, 0, 0), (-0.8660254, 0, 0.5), (-0.5, 0, 0.8660254), (0, 0, 1), (0.5, 0, 0.8660254), (0.8660254, 0, 0.5), (1, 0, 0), (0.8660254, 1, -0.5), (0.5, 1, -0.8660254), (0, 1, -1), (-0.5, 1, -0.8660254), (-0.8660254, 1, -0.5), (-1, 1, 0), (-0.8660254, 1, 0.5), (-0.5, 1, 0.8660254), (0, 1, 1), (0.5, 1, 0.8660254), (0.8660254, 1, 0.5), (1, 1, 0), (0.8660254, 2, -0.5), (0.5, 2, -0.8660254), (0, 2, -1), (-0.5, 2, -0.8660254), (-0.8660254, 2, -0.5), (-1, 2, 0), (-0.8660254, 2, 0.5), (-0.5, 2, 0.8660254), (0, 2, 1), (0.5, 2, 0.8660254), (0.8660254, 2, 0.5), (1, 2, 0), (0.4330127, 2, -0.25), (0.25, 2, -0.4330127), (0, 2, -0.5), (-0.25, 2, -0.4330127), (-0.4330127, 2, -0.25), (-0.5, 2, 0), (-0.4330127, 2, 0.25), (-0.25, 2, 0.4330127), (0, 2, 0.5), (0.25, 2, 0.4330127), (0.4330127, 2, 0.25), (0.5, 2, 0), (0, 2, 0)]
        matrix4d primvars:skel:geomBindTransform = ( (0, 0, 1, 0), (1, 0, 0, 0), (0, 1, 0, 0), (1, 0, 0, 1) )
        int[] primvars:skel:jointIndices = [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2] (
            elementSize = 3
            interpolation = "vertex"
        )
        float[] primvars:skel:jointWeights = [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 0.75, 0.25, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0] (
            elementSize = 3
            interpolation = "vertex"
        )
        uniform token primvars:skel:skinningMethod = "dualQuaternion"
        prepend rel skel:skeleton = </Root/Skeleton>
        uniform token subdivisionScheme = "none"
    }
}

