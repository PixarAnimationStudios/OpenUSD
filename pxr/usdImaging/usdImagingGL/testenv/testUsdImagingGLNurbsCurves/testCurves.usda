#usda 1.0
(
    "testing drawing of Nurbs Curve"
    endTimeCode = 200
    startTimeCode = 0
    upAxis = "Z"
)

def Xform "world"
{
    def "ChangingTopology"
    {
        def NurbsCurves "nurbs_curve1"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [4],
                50: [4],
                100: [4],
                150: [4],
                200: [4],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [2]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
                50: [(0, 0, 0), (0, 1, 1), (1, 1, 1), (3, 0, 0)],
                100: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
                150: [(0, 0, 0), (2, 1, 1), (3, 1, 1), (3, 0, 0)],
                200: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(0, 0, 1)]
            float[] widths.timeSamples = {
                0: [0.1],
                50: [0.5],
                100: [1],
                150: [0.5],
                200: [0.1],
            }
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "nurbs_curve2"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [4],
                50: [4],
                100: [4],
                150: [4],
                200: [4],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [2]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
                50: [(0, 0, 0), (0, 1, 1), (1, 1, 1), (3, 0, 0)],
                100: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
                150: [(0, 0, 0), (2, 1, 1), (3, 1, 1), (3, 0, 0)],
                200: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(0, 0, 1)]
            float[] widths.timeSamples = {
                0: [0.1],
                50: [0.5],
                100: [1],
                150: [0.5],
                200: [0.1],
            }
            double3 xformOp:translate = (5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "nurbs_curve3"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [7],
                50: [7],
                100: [7],
                150: [7],
                200: [7],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [2]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0)],
                50: [(-0.5, 0, 0), (0, 1, 1), (1, 1, 2), (2, 1, 1), (3, 1, 2), (4, 1, 1), (4.5, 0, 0)],
                100: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0)],
                150: [(-0.5, 0, 0), (0, 1, 1), (1, 1, 0.5), (2, 1, 1), (3, 1, 0.5), (4, 0, 1), (4.5, 0, 0)],
                200: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(0, 0, 1)]
            float[] widths.timeSamples = {
                0: [0.1],
                50: [0.5],
                100: [1],
                150: [0.5],
                200: [0.1],
            }
            double3 xformOp:translate = (15, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "nurbs_curve4"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [7],
                50: [7],
                100: [7],
                150: [7],
                200: [7],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [2]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0)],
                50: [(-0.5, 0, 0), (0, 1, 1), (1, 1, 2), (2, 1, 1), (3, 1, 2), (4, 1, 1), (4.5, 0, 0)],
                100: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0)],
                150: [(-0.5, 0, 0), (0, 1, 1), (1, 1, 0.5), (2, 1, 1), (3, 1, 0.5), (4, 0, 1), (4.5, 0, 0)],
                200: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0), (3, 0, 0), (3, 0, 0), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(0, 0, 1)]
            float[] widths.timeSamples = {
                0: [0.1],
                50: [0.5],
                100: [1],
                150: [0.5],
                200: [0.1],
            }
            double3 xformOp:translate = (20, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }

    def "DifferentOrders"
    {
        def NurbsCurves "nurbs_order1"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [4],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [1]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] widths = [0.25]
            double3 xformOp:translate = (0, 0, 3)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "nurbs_order2"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [4],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [2]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] widths = [0.25]
            double3 xformOp:translate = (5, 0, 3)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "nurbs_order3"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [4],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [3]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] widths = [0.25]
            double3 xformOp:translate = (10, 0, 3)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "nurbs_order4"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [4],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [4]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] widths = [0.25]
            double3 xformOp:translate = (15, 0, 3)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "nurbs_order5_fail"
        {
            int[] curveVertexCounts.timeSamples = {
                0: [4],
            }
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, 0), (4.5, 1, 2)]
            int[] order = [5]
            point3f[] points.timeSamples = {
                0: [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)],
            }
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] widths = [0.25]
            double3 xformOp:translate = (20, 0, 3)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }

    def "VaryingProperties"
    {
        def NurbsCurves "order"
        {
            int[] curveVertexCounts = [4]
            uniform bool doubleSided = 1
            int[] order.timeSamples = {
                0: [1],
                50: [2],
                100: [3],
                150: [4],
                200: [5],
            }
            point3f[] points = [(0, 0, 0), (1, 1, 1), (2, 1, 1), (3, 0, 0)]
            color3f[] primvars:displayColor = [(0, 1, 0)]
            float[] widths = [0.25]
            double3 xformOp:translate = (0, 0, 6)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "multi1"
        {
            int[] curveVertexCounts = [6]
            uniform bool doubleSided = 1
            int[] order = [2, 2, 2]
            point3f[] points = [(0, 0, 0), (1, 1, 1), (2, 0.5, 0.5), (3, 0.5, 0.5), (4, 1, 1), (5, 0, 0)]
            color3f[] primvars:displayColor = [(0, 1, 0)]
            float[] widths = [0.25]
            double3 xformOp:translate = (5, 0, 6)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def NurbsCurves "multi2"
        {
            int[] curveVertexCounts = [12]
            uniform bool doubleSided = 1
            int[] order = [4, 4, 4]
            point3f[] points = [(0, 0, 0), (0.5, 1, 0), (1, 1, 1), (1.5, 0, 1), (2, 0, 0), (2.5, 1, 0), (3, 1, 1), (3.5, 0, 1), (4, 0, 0), (4.5, 1, 0), (5, 1, 1), (5.5, 0, 1)]
            color3f[] primvars:displayColor = [(0, 1, 0)]
            float[] widths = [0.25]
            double3 xformOp:translate = (15, 0, 6)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }
}

