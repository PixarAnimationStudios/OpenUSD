#usda 1.0
(
    endTimeCode = 3
    startTimeCode = 1
    upAxis = "Z"
)

def Xform "GroundTruth"
{
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateX"]
    double3 xformOp:translate = (12,0,0)
    double xformOp:rotateX = 180

    def Mesh "Mesh"
    {
        color3f[] primvars:displayColor = [(1,0,0)] (
            interpolation = "constant"
        )
        float3[] extent = [(-17.5, -1.110223e-15, -5), (5, 17.999998, 5)]
        float3[] extent.timeSamples = {
            1: [(-9.199999, -1.110223e-15, -5), (5, 11.999998, 5)],
            2: [(-17.5, -1.110223e-15, -5), (5, 17.999998, 5)],
            3: [(-5, -3.6000018, -5), (5, 3.6000025, 5)],
        }
        int[] faceVertexCounts.timeSamples = {
            1: [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
        }
        int[] faceVertexIndices.timeSamples = {
            1: [0, 1, 12, 11, 1, 2, 13, 12, 2, 3, 14, 13, 3, 4, 15, 14, 4, 5, 16, 15, 5, 6, 17, 16, 6, 7, 18, 17, 7, 8, 19, 18, 8, 9, 20, 19, 9, 10, 21, 20, 11, 12, 23, 22, 12, 13, 24, 23, 13, 14, 25, 24, 14, 15, 26, 25, 15, 16, 27, 26, 16, 17, 28, 27, 17, 18, 29, 28, 18, 19, 30, 29, 19, 20, 31, 30, 20, 21, 32, 31, 22, 23, 34, 33, 23, 24, 35, 34, 24, 25, 36, 35, 25, 26, 37, 36, 26, 27, 38, 37, 27, 28, 39, 38, 28, 29, 40, 39, 29, 30, 41, 40, 30, 31, 42, 41, 31, 32, 43, 42, 33, 34, 45, 44, 34, 35, 46, 45, 35, 36, 47, 46, 36, 37, 48, 47, 37, 38, 49, 48, 38, 39, 50, 49, 39, 40, 51, 50, 40, 41, 52, 51, 41, 42, 53, 52, 42, 43, 54, 53, 44, 45, 56, 55, 45, 46, 57, 56, 46, 47, 58, 57, 47, 48, 59, 58, 48, 49, 60, 59, 49, 50, 61, 60, 50, 51, 62, 61, 51, 52, 63, 62, 52, 53, 64, 63, 53, 54, 65, 64, 55, 56, 67, 66, 56, 57, 68, 67, 57, 58, 69, 68, 58, 59, 70, 69, 59, 60, 71, 70, 60, 61, 72, 71, 61, 62, 73, 72, 62, 63, 74, 73, 63, 64, 75, 74, 64, 65, 76, 75, 66, 67, 78, 77, 67, 68, 79, 78, 68, 69, 80, 79, 69, 70, 81, 80, 70, 71, 82, 81, 71, 72, 83, 82, 72, 73, 84, 83, 73, 74, 85, 84, 74, 75, 86, 85, 75, 76, 87, 86, 77, 78, 89, 88, 78, 79, 90, 89, 79, 80, 91, 90, 80, 81, 92, 91, 81, 82, 93, 92, 82, 83, 94, 93, 83, 84, 95, 94, 84, 85, 96, 95, 85, 86, 97, 96, 86, 87, 98, 97, 88, 89, 100, 99, 89, 90, 101, 100, 90, 91, 102, 101, 91, 92, 103, 102, 92, 93, 104, 103, 93, 94, 105, 104, 94, 95, 106, 105, 95, 96, 107, 106, 96, 97, 108, 107, 97, 98, 109, 108, 99, 100, 111, 110, 100, 101, 112, 111, 101, 102, 113, 112, 102, 103, 114, 113, 103, 104, 115, 114, 104, 105, 116, 115, 105, 106, 117, 116, 106, 107, 118, 117, 107, 108, 119, 118, 108, 109, 120, 119],
        }
        point3f[] points.timeSamples = {
            1: [(-9.199999, 11.999998, 5), (-8.799999, 11.399999, 5), (-8.4, 10.8, 5), (-7.999999, 10.200002, 5), (-7.599999, 4.8000016, 5), (0, -1.110223e-15, 5), (1, -1.110223e-15, 5), (2, -1.110223e-15, 5), (3, -1.110223e-15, 5), (4, -1.110223e-15, 5), (5, -1.110223e-15, 5), (-9.199999, 11.999998, 4), (-8.799999, 11.399999, 4), (-8.4, 10.8, 4), (-7.999999, 10.200002, 4), (-7.599999, 4.8000016, 4), (0, -8.881784e-16, 4), (1, -8.881784e-16, 4), (2, -8.881784e-16, 4), (3, -8.881784e-16, 4), (4, -8.881784e-16, 4), (5, -8.881784e-16, 4), (-9.199999, 11.999998, 3), (-8.799999, 11.399999, 3), (-8.4, 10.8, 3), (-7.999999, 10.200002, 3), (-7.599999, 4.8000016, 3), (0, -6.661338e-16, 3), (1, -6.661338e-16, 3), (2, -6.661338e-16, 3), (3, -6.661338e-16, 3), (4, -6.661338e-16, 3), (5, -6.661338e-16, 3), (-9.199999, 11.999998, 2), (-8.799999, 11.399999, 2), (-8.4, 10.8, 2), (-7.999999, 10.200002, 2), (-7.599999, 4.8000016, 2), (0, -4.440892e-16, 2), (1, -4.440892e-16, 2), (2, -4.440892e-16, 2), (3, -4.440892e-16, 2), (4, -4.440892e-16, 2), (5, -4.440892e-16, 2), (-9.199999, 11.999998, 0.99999994), (-8.799999, 11.399999, 1), (-8.4, 10.8, 1), (-7.999999, 10.200002, 1), (-7.599999, 4.8000016, 1), (0, -2.220446e-16, 1), (1, -2.220446e-16, 1), (2, -2.220446e-16, 1), (3, -2.220446e-16, 1), (4, -2.220446e-16, 1), (5, -2.220446e-16, 1), (-9.199999, 11.999998, -9.973154e-9), (-8.799999, 11.399999, 2.8098658e-8), (-8.4, 10.8, 0), (-7.999999, 10.200002, -2.8098658e-8), (-7.599999, 4.8000016, -5.3263648e-8), (0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (-9.199999, 11.999998, -1), (-8.799999, 11.399999, -1), (-8.4, 10.8, -1), (-7.999999, 10.200002, -1), (-7.599999, 4.8000016, -0.9999999), (0, 2.220446e-16, -1), (1, 2.220446e-16, -1), (2, 2.220446e-16, -1), (3, 2.220446e-16, -1), (4, 2.220446e-16, -1), (5, 2.220446e-16, -1), (-9.199999, 11.999998, -2), (-8.799999, 11.399999, -2), (-8.4, 10.8, -2), (-7.999999, 10.200002, -2), (-7.599999, 4.8000016, -2), (0, 4.440892e-16, -2), (1, 4.440892e-16, -2), (2, 4.440892e-16, -2), (3, 4.440892e-16, -2), (4, 4.440892e-16, -2), (5, 4.440892e-16, -2), (-9.199999, 11.999998, -3), (-8.799999, 11.399999, -3), (-8.4, 10.8, -3), (-7.999999, 10.200002, -3), (-7.599999, 4.8000016, -3), (0, 6.661338e-16, -3), (1, 6.661338e-16, -3), (2, 6.661338e-16, -3), (3, 6.661338e-16, -3), (4, 6.661338e-16, -3), (5, 6.661338e-16, -3), (-9.199999, 11.999998, -4), (-8.799999, 11.399999, -4), (-8.4, 10.8, -4), (-7.999999, 10.200002, -4), (-7.599999, 4.8000016, -4), (0, 8.881784e-16, -4), (1, 8.881784e-16, -4), (2, 8.881784e-16, -4), (3, 8.881784e-16, -4), (4, 8.881784e-16, -4), (5, 8.881784e-16, -4), (-9.199999, 11.999998, -5), (-8.799999, 11.399999, -5), (-8.4, 10.8, -5), (-7.999999, 10.200002, -5), (-7.599999, 4.8000016, -5), (0, 1.110223e-15, -5), (1, 1.110223e-15, -5), (2, 1.110223e-15, -5), (3, 1.110223e-15, -5), (4, 1.110223e-15, -5), (5, 1.110223e-15, -5)],
            2: [(-15.5, 17.999998, 5), (-16, 16.499998, 5), (-16.5, 15, 5), (-17, 13.500001, 5), (-17.5, 12.000002, 5), (0, -1.110223e-15, 5), (1, -1.110223e-15, 5), (2, -1.110223e-15, 5), (3, -1.110223e-15, 5), (4, -1.110223e-15, 5), (5, -1.110223e-15, 5), (-15.5, 17.999998, 4), (-16, 16.499998, 4), (-16.5, 15, 4), (-17, 13.500001, 4), (-17.5, 12.000002, 4), (0, -8.881784e-16, 4), (1, -8.881784e-16, 4), (2, -8.881784e-16, 4), (3, -8.881784e-16, 4), (4, -8.881784e-16, 4), (5, -8.881784e-16, 4), (-15.5, 17.999998, 3), (-16, 16.499998, 3), (-16.5, 15, 3), (-17, 13.500001, 3), (-17.5, 12.000002, 3), (0, -6.661338e-16, 3), (1, -6.661338e-16, 3), (2, -6.661338e-16, 3), (3, -6.661338e-16, 3), (4, -6.661338e-16, 3), (5, -6.661338e-16, 3), (-15.5, 17.999998, 2), (-16, 16.499998, 2), (-16.5, 15, 2), (-17, 13.500001, 2), (-17.5, 12.000002, 2), (0, -4.440892e-16, 2), (1, -4.440892e-16, 2), (2, -4.440892e-16, 2), (3, -4.440892e-16, 2), (4, -4.440892e-16, 2), (5, -4.440892e-16, 2), (-15.5, 17.999998, 0.99999994), (-16, 16.499998, 1), (-16.5, 15, 1), (-17, 13.500001, 1), (-17.5, 12.000002, 1), (0, -2.220446e-16, 1), (1, -2.220446e-16, 1), (2, -2.220446e-16, 1), (3, -2.220446e-16, 1), (4, -2.220446e-16, 1), (5, -2.220446e-16, 1), (-15.5, 17.999998, -2.4932888e-8), (-16, 16.499998, 2.5543159e-8), (-16.5, 15, 0), (-17, 13.500001, -2.5543159e-8), (-17.5, 12.000002, -4.3752152e-8), (0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (-15.5, 17.999998, -1), (-16, 16.499998, -1), (-16.5, 15, -1), (-17, 13.500001, -1), (-17.5, 12.000002, -0.99999994), (0, 2.220446e-16, -1), (1, 2.220446e-16, -1), (2, 2.220446e-16, -1), (3, 2.220446e-16, -1), (4, 2.220446e-16, -1), (5, 2.220446e-16, -1), (-15.5, 17.999998, -2), (-16, 16.499998, -2), (-16.5, 15, -2), (-17, 13.500001, -2), (-17.5, 12.000002, -2), (0, 4.440892e-16, -2), (1, 4.440892e-16, -2), (2, 4.440892e-16, -2), (3, 4.440892e-16, -2), (4, 4.440892e-16, -2), (5, 4.440892e-16, -2), (-15.5, 17.999998, -3), (-16, 16.499998, -3), (-16.5, 15, -3), (-17, 13.500001, -3), (-17.5, 12.000002, -3), (0, 6.661338e-16, -3), (1, 6.661338e-16, -3), (2, 6.661338e-16, -3), (3, 6.661338e-16, -3), (4, 6.661338e-16, -3), (5, 6.661338e-16, -3), (-15.5, 17.999998, -4), (-16, 16.499998, -4), (-16.5, 15, -4), (-17, 13.500001, -4), (-17.5, 12.000002, -4), (0, 8.881784e-16, -4), (1, 8.881784e-16, -4), (2, 8.881784e-16, -4), (3, 8.881784e-16, -4), (4, 8.881784e-16, -4), (5, 8.881784e-16, -4), (-15.5, 17.999998, -5), (-16, 16.499998, -5), (-16.5, 15, -5), (-17, 13.500001, -5), (-17.5, 12.000002, -5), (0, 1.110223e-15, -5), (1, 1.110223e-15, -5), (2, 1.110223e-15, -5), (3, 1.110223e-15, -5), (4, 1.110223e-15, -5), (5, 1.110223e-15, -5)],
            3: [(-5, 3.5999985, 5), (-4, 3.5999994, 5), (-3, 3.6000001, 5), (-2, 3.600001, 5), (-1, 3.6000025, 5), (0, 3.6000001, 5), (1, 3.6000001, 5), (2, 3.6000001, 5), (3, 3.6000001, 5), (4, 3.6000001, 5), (5, 3.6000001, 5), (-5, 3.5999985, 4), (-4, 3.599999, 4), (-3, 3.6000001, 4), (-2, 3.600001, 4), (-1, 3.6000025, 4), (0, 3.6000001, 4), (1, 3.6000001, 4), (2, 3.6000001, 4), (3, 3.6000001, 4), (4, 3.6000001, 4), (5, 3.6000001, 4), (-5, 3.5999985, 3), (-4, 3.5999994, 3), (-3, 3.6000001, 3), (-2, 3.600001, 3), (-1, 3.6000025, 3), (0, 3.6000001, 3), (1, 3.6000001, 3), (2, 3.6000001, 3), (3, 3.6000001, 3), (4, 3.6000001, 3), (5, 3.6000001, 3), (-5, 3.5999985, 2), (-4, 3.599999, 2), (-3, 3.6000001, 2), (-2, 3.600001, 2), (-1, 3.6000025, 2), (0, 3.6000001, 2), (1, 3.6000001, 2), (2, 3.6000001, 2), (3, 3.6000001, 2), (4, 3.6000001, 2), (5, 3.6000001, 2), (-5, -0.00000166893, 0.99999994), (-4, -0.0000010728836, 1), (-3, 0, 1), (-2, 9.536743e-7, 1), (-1, 0.0000023841858, 1), (0, 0, 1), (1, 0, 1), (2, 0, 1), (3, 0, 1), (4, 0, 1), (5, 0, 1), (-5, -0.00000166893, 0), (-4, -0.0000010728836, 2.9802322e-8), (-3, 0, 0), (-2, 9.536743e-7, -2.9802322e-8), (-1, 0.0000023841858, -5.9604645e-8), (0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (-5, -0.00000166893, -1), (-4, -0.0000010728836, -1), (-3, 0, -1), (-2, 9.536743e-7, -1), (-1, 0.0000023841858, -0.9999999), (0, 0, -1), (1, 0, -1), (2, 0, -1), (3, 0, -1), (4, 0, -1), (5, 0, -1), (-5, -3.6000018, -2), (-4, -3.6000013, -2), (-3, -3.6000001, -2), (-2, -3.5999992, -2), (-1, -3.5999978, -2), (0, -3.6000001, -2), (1, -3.6000001, -2), (2, -3.6000001, -2), (3, -3.6000001, -2), (4, -3.6000001, -2), (5, -3.6000001, -2), (-5, -3.6000018, -3), (-4, -3.6000013, -3), (-3, -3.6000001, -3), (-2, -3.5999994, -3), (-1, -3.5999978, -3), (0, -3.6000001, -3), (1, -3.6000001, -3), (2, -3.6000001, -3), (3, -3.6000001, -3), (4, -3.6000001, -3), (5, -3.6000001, -3), (-5, -3.6000018, -4), (-4, -3.6000013, -4), (-3, -3.6000001, -4), (-2, -3.5999992, -4), (-1, -3.5999978, -4), (0, -3.6000001, -4), (1, -3.6000001, -4), (2, -3.6000001, -4), (3, -3.6000001, -4), (4, -3.6000001, -4), (5, -3.6000001, -4), (-5, -3.6000018, -5), (-4, -3.6000013, -5), (-3, -3.6000001, -5), (-2, -3.5999992, -5), (-1, -3.5999978, -5), (0, -3.6000001, -5), (1, -3.6000001, -5), (2, -3.6000001, -5), (3, -3.6000001, -5), (4, -3.6000001, -5), (5, -3.6000001, -5)],
        }
        uniform token subdivisionScheme = "none"
    }
}

def SkelRoot "TestPlane"(
    prepend apiSchemas = ["SkelBindingAPI"]
)
{
    uniform token[] xformOpOrder = ["xformOp:rotateX"]
    double xformOp:rotateX = 180

    rel skel:skeleton = <Skel>

    float3[] extent = [(-17.5, -1.110223e-15, -5), (5, 17.999998, 5)]
    float3[] extent.timeSamples = {
        1: [(-9.199999, -1.110223e-15, -5), (5, 11.999998, 5)],
        2: [(-17.5, -1.110223e-15, -5), (5, 17.999998, 5)],
        3: [(-5, -3.6000018, -5), (5, 3.6000025, 5)],
    }

    def Mesh "Mesh" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        custom rel material:binding = </Materials/lambert1>

        float3[] extent.timeSamples = {
            1: [(-9.199999, -1.110223e-15, -5), (5, 11.999998, 5)],
            2: [(-17.5, -1.110223e-15, -5), (5, 17.999998, 5)],
            3: [(-5, -3.6000018, -5), (5, 3.6000025, 5)],
        }

        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 12, 11, 1, 2, 13, 12, 2, 3, 14, 13, 3, 4, 15, 14, 4, 5, 16, 15, 5, 6, 17, 16, 6, 7, 18, 17, 7, 8, 19, 18, 8, 9, 20, 19, 9, 10, 21, 20, 11, 12, 23, 22, 12, 13, 24, 23, 13, 14, 25, 24, 14, 15, 26, 25, 15, 16, 27, 26, 16, 17, 28, 27, 17, 18, 29, 28, 18, 19, 30, 29, 19, 20, 31, 30, 20, 21, 32, 31, 22, 23, 34, 33, 23, 24, 35, 34, 24, 25, 36, 35, 25, 26, 37, 36, 26, 27, 38, 37, 27, 28, 39, 38, 28, 29, 40, 39, 29, 30, 41, 40, 30, 31, 42, 41, 31, 32, 43, 42, 33, 34, 45, 44, 34, 35, 46, 45, 35, 36, 47, 46, 36, 37, 48, 47, 37, 38, 49, 48, 38, 39, 50, 49, 39, 40, 51, 50, 40, 41, 52, 51, 41, 42, 53, 52, 42, 43, 54, 53, 44, 45, 56, 55, 45, 46, 57, 56, 46, 47, 58, 57, 47, 48, 59, 58, 48, 49, 60, 59, 49, 50, 61, 60, 50, 51, 62, 61, 51, 52, 63, 62, 52, 53, 64, 63, 53, 54, 65, 64, 55, 56, 67, 66, 56, 57, 68, 67, 57, 58, 69, 68, 58, 59, 70, 69, 59, 60, 71, 70, 60, 61, 72, 71, 61, 62, 73, 72, 62, 63, 74, 73, 63, 64, 75, 74, 64, 65, 76, 75, 66, 67, 78, 77, 67, 68, 79, 78, 68, 69, 80, 79, 69, 70, 81, 80, 70, 71, 82, 81, 71, 72, 83, 82, 72, 73, 84, 83, 73, 74, 85, 84, 74, 75, 86, 85, 75, 76, 87, 86, 77, 78, 89, 88, 78, 79, 90, 89, 79, 80, 91, 90, 80, 81, 92, 91, 81, 82, 93, 92, 82, 83, 94, 93, 83, 84, 95, 94, 84, 85, 96, 95, 85, 86, 97, 96, 86, 87, 98, 97, 88, 89, 100, 99, 89, 90, 101, 100, 90, 91, 102, 101, 91, 92, 103, 102, 92, 93, 104, 103, 93, 94, 105, 104, 94, 95, 106, 105, 95, 96, 107, 106, 96, 97, 108, 107, 97, 98, 109, 108, 99, 100, 111, 110, 100, 101, 112, 111, 101, 102, 113, 112, 102, 103, 114, 113, 103, 104, 115, 114, 104, 105, 116, 115, 105, 106, 117, 116, 106, 107, 118, 117, 107, 108, 119, 118, 108, 109, 120, 119]
        point3f[] points = [(-5, -0.00000166893, 5), (-4, -9.536743e-7, 5), (-3, 5.9604645e-8, 5), (-2, 9.536743e-7, 5), (-1, 0.0000023841858, 5), (0, -1.110223e-15, 5), (1, -1.110223e-15, 5), (2, -1.110223e-15, 5), (3, -1.110223e-15, 5), (4, -1.110223e-15, 5), (5, -1.110223e-15, 5), (-5, -0.00000166893, 4), (-4, -0.0000010728836, 4), (-3, -8.881784e-16, 4), (-2, 9.536743e-7, 4), (-1, 0.0000023841858, 4), (0, -8.881784e-16, 4), (1, -8.881784e-16, 4), (2, -8.881784e-16, 4), (3, -8.881784e-16, 4), (4, -8.881784e-16, 4), (5, -8.881784e-16, 4), (-5, -0.00000166893, 3), (-4, -9.536743e-7, 3), (-3, -6.661338e-16, 3), (-2, 9.536743e-7, 3), (-1, 0.0000023841858, 3), (0, -6.661338e-16, 3), (1, -6.661338e-16, 3), (2, -6.661338e-16, 3), (3, -6.661338e-16, 3), (4, -6.661338e-16, 3), (5, -6.661338e-16, 3), (-5, -0.00000166893, 2), (-4, -0.0000010728836, 2), (-3, -4.440892e-16, 2), (-2, 9.536743e-7, 2), (-1, 0.0000023841858, 2), (0, -4.440892e-16, 2), (1, -4.440892e-16, 2), (2, -4.440892e-16, 2), (3, -4.440892e-16, 2), (4, -4.440892e-16, 2), (5, -4.440892e-16, 2), (-5, -0.00000166893, 0.99999994), (-4, -0.0000010728836, 1), (-3, -2.220446e-16, 1), (-2, 9.536743e-7, 1), (-1, 0.0000023841858, 1), (0, -2.220446e-16, 1), (1, -2.220446e-16, 1), (2, -2.220446e-16, 1), (3, -2.220446e-16, 1), (4, -2.220446e-16, 1), (5, -2.220446e-16, 1), (-5, -0.00000166893, 0), (-4, -0.0000010728836, 2.9802322e-8), (-3, 0, 0), (-2, 9.536743e-7, -2.9802322e-8), (-1, 0.0000023841858, -5.9604645e-8), (0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0), (4, 0, 0), (5, 0, 0), (-5, -0.00000166893, -1), (-4, -0.0000010728836, -1), (-3, 2.220446e-16, -1), (-2, 9.536743e-7, -1), (-1, 0.0000023841858, -0.9999999), (0, 2.220446e-16, -1), (1, 2.220446e-16, -1), (2, 2.220446e-16, -1), (3, 2.220446e-16, -1), (4, 2.220446e-16, -1), (5, 2.220446e-16, -1), (-5, -0.00000166893, -2), (-4, -0.0000010728836, -2), (-3, 4.440892e-16, -2), (-2, 9.536743e-7, -2), (-1, 0.0000023841858, -2), (0, 4.440892e-16, -2), (1, 4.440892e-16, -2), (2, 4.440892e-16, -2), (3, 4.440892e-16, -2), (4, 4.440892e-16, -2), (5, 4.440892e-16, -2), (-5, -0.00000166893, -3), (-4, -0.0000010728836, -3), (-3, 6.661338e-16, -3), (-2, 7.1525574e-7, -3), (-1, 0.0000023841858, -3), (0, 6.661338e-16, -3), (1, 6.661338e-16, -3), (2, 6.661338e-16, -3), (3, 6.661338e-16, -3), (4, 6.661338e-16, -3), (5, 6.661338e-16, -3), (-5, -0.00000166893, -4), (-4, -0.0000010728836, -4), (-3, 8.881784e-16, -4), (-2, 9.536743e-7, -4), (-1, 0.0000023841858, -4), (0, 8.881784e-16, -4), (1, 8.881784e-16, -4), (2, 8.881784e-16, -4), (3, 8.881784e-16, -4), (4, 8.881784e-16, -4), (5, 8.881784e-16, -4), (-5, -0.00000166893, -5), (-4, -0.0000010728836, -5), (-3, -5.9604645e-8, -5), (-2, 9.536743e-7, -5), (-1, 0.0000023841858, -5), (0, 1.110223e-15, -5), (1, 1.110223e-15, -5), (2, 1.110223e-15, -5), (3, 1.110223e-15, -5), (4, 1.110223e-15, -5), (5, 1.110223e-15, -5)]
        uniform token[] skel:blendShapes = ["targetA", "targetB", "targetC", "targetD", "targetE", "targetF"]
        rel skel:blendShapeTargets = [
            </TestPlane/Mesh/targetA>,
            </TestPlane/Mesh/targetB>,
            </TestPlane/Mesh/targetC>,
            </TestPlane/Mesh/targetD>,
            </TestPlane/Mesh/targetE>,
            </TestPlane/Mesh/targetF>,
        ]
        uniform token subdivisionScheme = "none"

        def BlendShape "targetA"
        {
            uniform vector3f[] offsets = [(0, 11.999916, 0), (0, 11.999958, 0), (0, 12, 0), (0, 12.000042, 0), (0, 12.000084, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 11.999916, 0), (0, 11.999958, 0), (0, 12, 0), (0, 12.000042, 0), (0, 12.000084, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 11.999916, 0), (0, 11.999958, 0), (0, 12, 0), (0, 12.000042, 0), (0, 12.000084, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 11.999916, 0), (0, 11.999958, 0), (0, 12, 0), (0, 12.000042, 0), (0, 12.000084, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 11.999916, 0), (0, 11.999958, 0), (0, 12, 0), (0, 12.000042, 0), (0, 12.000084, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 11.999916, 0), (0, 11.999958, 0), (0, 12, 0), (0, 12.000042, 0), (0, 12.000084, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 11.999916, 0), (0, 11.999958, 0), (0, 12, 0), (0, 12.000042, 0), (0, 12.000084, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, 12, 0), (0, -0.00007343292, 0), (0, -0.00004720688, 0), (0, 0.00004196167, 0), (0, 0.00008392334, 0), (0, -0.00007343292, 0), (0, -0.00004720688, 0), (0, 0.00004196167, 0), (0, 0.00008392334, 0), (0, -0.00007343292, 0), (0, -0.00004720688, 0), (0, 0.00004196167, 0), (0, 0.00008392334, 0), (0, -0.00007343292, 0), (0, -0.00004720688, 0), (0, 0.00004196167, 0), (0, 0.00008392334, 0)]
            uniform uint[] pointIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 88, 89, 91, 92, 99, 100, 102, 103, 110, 111, 113, 114]
        }

        def BlendShape "targetB"
        {
            uniform vector3f[] offsets = [(0, -0.00006341934, 0), (0, -0.000040769577, 0), (0, 0.000036239624, 0), (0, 0.00007247925, 0), (0, -0.00006341934, 0), (0, -0.000040769577, 0), (0, 0.000036239624, 0), (0, 0.00007247925, 0), (0, -0.00006341934, 0), (0, -0.000040769577, 0), (0, 0.000036239624, 0), (0, 0.00007247925, 0), (0, -0.00006341934, 0), (0, -0.000040769577, 0), (0, 0.000036239624, 0), (0, 0.00007247925, 0), (0, -12.0000725, 0), (0, -12.000036, 0), (0, -12, 0), (0, -11.999964, 0), (0, -11.9999275, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12.0000725, 0), (0, -12.000036, 0), (0, -12, 0), (0, -11.999964, 0), (0, -11.9999275, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12.0000725, 0), (0, -12.000036, 0), (0, -12, 0), (0, -11.999964, 0), (0, -11.9999275, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12.0000725, 0), (0, -12.000036, 0), (0, -12, 0), (0, -11.999964, 0), (0, -11.9999275, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12.0000725, 0), (0, -12.000036, 0), (0, -12, 0), (0, -11.999964, 0), (0, -11.9999275, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12.0000725, 0), (0, -12.000036, 0), (0, -12, 0), (0, -11.999964, 0), (0, -11.9999275, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12.0000725, 0), (0, -12.000036, 0), (0, -12, 0), (0, -11.999964, 0), (0, -11.9999275, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0), (0, -12, 0)]
            uniform uint[] pointIndices = [0, 1, 3, 4, 11, 12, 14, 15, 22, 23, 25, 26, 33, 34, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
        }

        def BlendShape "targetC"
        {
            uniform point3f[] inbetweens:targetC_0point5 = [(-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 0.99999994, 0), (-5, 0.50003624, 0), (-5.5, 0.000072474475, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.00007249485, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.00007244798, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.00007246932, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.000072437244, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, -8.310963e-9), (-4, 1.4999592, -1.4197212e-9), (-4.5, 1, 0), (-5, 0.50003624, 1.4197212e-9), (-5.5, 0.00007246947, 5.284164e-9), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.000072444906, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.00007243018, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.00007246714, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.00007248965, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999366, 0), (-4, 1.4999592, 0), (-4.5, 1, 0), (-5, 0.50003624, 0), (-5.5, 0.00007245025, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0)] (
                weight = 0.5
            )
            uniform point3f[] inbetweens:targetC_1point5 = [(0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 11.999939, 0), (0, 11.9999695, 0), (0, 12, 0), (0, 12.0000305, 0), (0, 0.000061035156, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)] (
                weight = 1.5
            )
            uniform vector3f[] offsets = [(-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, -1.6621925e-8), (-8, 10.999964, -2.8394425e-9), (-9, 10, 0), (-10, 9.000036, 2.8394425e-9), (-11, 8.0000725, 1.0568328e-8), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, -5.9604645e-8), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.9999275, 0), (-8, 10.999964, 0), (-9, 10, 0), (-10, 9.000036, 0), (-11, 8.0000725, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            uniform uint[] pointIndices = [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117]
        }

        def BlendShape "targetD"
        {
            uniform point3f[] inbetweens:targetD_0point5 = [(-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 0.99999994, 0), (-5, 0.5000191, 0), (-5.5, 0.0000381422, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.000038162572, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.000038115708, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.00003813704, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.00003810497, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, -8.310963e-9), (-4, 1.4999785, -1.4197212e-9), (-4.5, 1, 0), (-5, 0.5000191, 1.4197212e-9), (-5.5, 0.000038137194, 5.284164e-9), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.00003811263, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.000038097904, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.000038134865, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.000038157377, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0), (-3.5, 1.9999666, 0), (-4, 1.4999785, 0), (-4.5, 1, 0), (-5, 0.5000191, 0), (-5.5, 0.000038117978, 0), (-4, 0, 0), (-2, 0, 0), (-1, 0, 0)] (
                weight = 0.5
            )
            uniform vector3f[] offsets = [(-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, -1.6621925e-8), (-8, 10.999981, -2.8394425e-9), (-9, 10, 0), (-10, 9.000019, 2.8394425e-9), (-11, 8.000038, 1.0568328e-8), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, -5.9604645e-8), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            uniform uint[] pointIndices = [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117]
        }

        def BlendShape "targetE"
        {
            uniform point3f[] inbetweens:targetE_1point5 = [(-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0), (-23, -0.0000333786, 0), (-21.75, -0.000021457672, 0), (-20, 0, 0), (-18.5, 0.000019073486, 0), (-17, 0.000038146973, 0), (-15, 0, 0), (-13, 0, 0), (-11, 0, 0)] (
                weight = 1.5
            )
            uniform vector3f[] offsets = [(-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, -1.6621925e-8), (-8, 10.999981, -2.8394425e-9), (-9, 10, 0), (-10, 9.000019, 2.8394425e-9), (-11, 8.000038, 1.0568328e-8), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, -5.9604645e-8), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]
            uniform uint[] pointIndices = [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117]
        }

        def BlendShape "targetF"
        {
            uniform point3f[] inbetweens:targetF_negative0point499 = [(1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0), (1, -11.973988, 0), (1, -11.9739685, 0), (1, -11.973949, 0), (1, -11.97393, 0), (1, -10.042717, 0), (0, -2, 0)] (
                weight = -0.499
            )
            uniform vector3f[] offsets = [(-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (-7, 11.999962, -1.6621925e-8), (-8, 10.999981, -2.8394425e-9), (-9, 10, 0), (-10, 9.000019, 2.8394425e-9), (-11, 8.000038, 1.0568328e-8), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, -5.9604645e-8), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0), (-7, 11.999962, 0), (-8, 10.999981, 0), (-9, 10, 0), (-10, 9.000019, 0), (-11, 8.000038, 0), (0, 0, 0)]
            uniform uint[] pointIndices = [0, 1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 33, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 93, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115]
        }
    }

    def Skeleton "Skel"(
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        rel skel:animationSource = <Anim>

        def SkelAnimation "Anim"
        {
            uniform token[] blendShapes = ["targetA", "targetB", "targetC", "targetD", "targetE", "targetF"]
            float[] blendShapeWeights.timeSamples = {
                1: [0, 0, 1.2, 0, 0, 0],
                2: [0, 0, 0, 0, 0, 1.5],
                3: [0.3, 0.3, 0, 0, 0, 0],
            }
        }
    }
}


def Scope "Materials"
{
    def Material "lambert1"
    {
        token outputs:surface.connect = </Materials/lambert1/PbrPreview.outputs:surface>

        custom color3f displayColor = (0, 1, 0)
        def Shader "PbrPreview"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0, 1, 0)
            token outputs:surface
        }
    }
}
