#usda 1.0
(
    upAxis = "Z"
)
class Mesh "QuadMeshProto"
{
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 6, 5, 1, 2, 7, 6, 2, 3, 8, 7, 3, 4, 9, 8, 5, 6, 11, 10, 6, 7, 12, 11, 7, 8, 13, 12, 8, 9, 14, 13, 10, 11, 16, 15, 11, 12, 17, 16, 12, 13, 18, 17, 13, 14, 19, 18, 15, 16, 21, 20, 16, 17, 22, 21, 17, 18, 23, 22, 18, 19, 24, 23]
    point3f[] points = [(-1, 0, -1), (-0.5, 0, -1), (0, 0, -1), (0.5, 0, -1), (1, 0, -1), (-1, 0, -0.5), (-0.5, 0.2, -0.5), (0, 0.2, -0.5), (0.5, 0.2, -0.5), (1, 0, -0.5), (-1, 0, 0), (-0.5, 0.2, 0), (0, 0.3, 0), (0.5, 0.2, 0), (1, 0, 0), (-1, 0, 0.5), (-0.5, 0.2, 0.5), (0, 0.2, 0.5), (0.5, 0.2, 0.5), (1, 0, 0.5), (-1, 0, 1), (-0.5, 0, 1), (0, 0, 1), (0.5, 0, 1), (1, 0, 1)]
    texCoord2f[] primvars:st_faceVarying = [(0, 0), (0.2, 0), (0.5, 0), (0.8, 0), (1, 0), (0, 0.2), (0.2, 0.2), (0.5, 0.1), (0.8, 0.2), (1, 0.2), (0, 0.4), (0.2, 0.4), (0.5, 0.2), (0.8, 0.4), (1, 0.4), (0, 0.6), (0.25, 0.6), (0.5, 0.4), (0.75, 0.6), (1, 0.6), (0, 0.8), (0.25, 0.8), (0.5, 0.65), (0.75, 0.8), (1, 0.8), (0, 1), (0.25, 1), (0.5, 1), (0.75, 1), (1, 1), (0.4, 0), (0.6, 0), (0.4, 0.1), (0.6, 0.1), (0.4, 0.25), (0.6, 0.25), (0.4, 1), (0.6, 1)] (
        interpolation = "faceVarying"
    )
    int[] primvars:st_faceVarying:indices = [0, 1, 6, 5, 1, 30, 32, 6, 31, 3, 8, 33, 3, 4, 9, 8, 5, 6, 11, 10, 6, 32, 34, 11, 33, 8, 13, 35, 8, 9, 14, 13, 15, 16, 21, 20, 16, 17, 22, 21, 17, 18, 23, 22, 18, 19, 24, 23, 20, 21, 26, 25, 21, 22, 36, 26, 22, 23, 28, 37, 23, 24, 29, 28]
    uniform token subdivisionScheme = "catmullClark"
}

class Mesh "TriangleMeshProto"
{
    int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    int[] faceVertexIndices = [0, 1, 2, 1, 3, 4, 0, 2, 5, 1, 4, 2, 3, 6, 4, 5, 2, 7, 2, 4, 8, 4, 6, 9, 5, 7, 10, 2, 8, 7, 4, 9, 8, 10, 7, 11, 7, 8, 12, 8, 9, 13, 7, 12, 11, 8, 13, 12, 6, 14, 9, 9, 14, 15, 9, 15, 13, 11, 12, 16, 12, 13, 17, 13, 15, 18, 12, 17, 16, 13, 18, 17]
    point3f[] points = [(0, 0, 1), (-0.433, 0, 0.75), (0, 0, 0.5), (-0.866, 0, 0.5), (-0.433, 0, 0.25), (0.433, 0, 0.75), (-0.866, 0, 0), (0.433, 0, 0.25), (0, -0.5, 0), (-0.433, 0, -0.25), (0.866, 0, 0.5), (0.866, 0, 0), (0.433, 0, -0.25), (0, 0, -0.5), (-0.866, 0, -0.5), (-0.433, 0, -0.75), (0.866, 0, -0.5), (0.433, 0, -0.75), (0, 0, -1)]
    texCoord2f[] primvars:st_faceVarying = [(0.45, 0.92), (0.3, 0.85), (0.5, 0.75), (0.1, 0.75), (0.3, 0.65), (0.7, 0.85), (0.05, 0.65), (0.05, 0.45), (0.25, 0.55), (0.7, 0.65), (0.5, 0.55), (0.25, 0.35), (0.9, 0.75), (0.45, 0.45), (0.95, 0.65), (0.75, 0.55), (0.95, 0.45), (0.55, 0.45), (0.75, 0.35), (0.45, 0.25), (0.55, 0.25), (0.05, 0.25), (0.25, 0.15), (0.95, 0.25), (0.75, 0.15), (0.45, 0.05), (0.55, 0.05), (0.55, 0.92)] (
        interpolation = "faceVarying"
    )
    int[] primvars:st_faceVarying:indices = [0, 1, 2, 1, 3, 4, 27, 2, 5, 1, 4, 2, 6, 7, 8, 5, 2, 9, 2, 4, 10, 8, 7, 11, 5, 9, 12, 2, 10, 9, 8, 11, 13, 14, 15, 16, 15, 17, 18, 13, 11, 19, 15, 18, 16, 17, 20, 18, 7, 21, 11, 11, 21, 22, 11, 22, 19, 16, 18, 23, 18, 20, 24, 19, 22, 25, 18, 24, 23, 20, 26, 24]
    uniform token subdivisionScheme = "loop"
}

def Scope "Scene"
{
    def Scope "Materials"
    {
        def Material "Material"
        {
            string inputs:coords = "st_faceVarying"
            token outputs:displacement.connect = </Scene/Materials/Material/PbrPreview.outputs:displacement>
            token outputs:surface.connect = </Scene/Materials/Material/PbrPreview.outputs:surface>

            def Shader "PbrPreview"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.01
                color3f inputs:diffuseColor = (0.18, 0.18, 0.18)
                color3f inputs:diffuseColor.connect = </Scene/Materials/Material/Diffuse.outputs:rgb>
                float inputs:displacement = 0
                color3f inputs:emissiveColor = (0, 0, 0)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal = (0, 1, 0)
                float inputs:occlusion = 1
                float inputs:opacity = 1
                float inputs:roughness = 1.0
                color3f inputs:specularColor = (1, 1, 1)
                int inputs:useSpecularWorkflow = 0
                token outputs:displacement
                token outputs:surface
            }

            def Shader "Diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./texture2.png@
                float2 inputs:st.connect = </Scene/Materials/Material/Coords.outputs:result>
                float3 outputs:rgb
            }

            def Shader "Coords"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname.connect = </Scene/Materials/Material.inputs:coords>
                float2 outputs:result
            }
        }
    }

    def Scope "Geom" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Scene/Materials/Material>

        def Mesh "QuadMesh_LinearNone" (
            references = </QuadMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "none"
            double3 xformOp:translate = (-3.0, 0, 3.75)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "QuadMesh_LinearCornersOnly" (
            references = </QuadMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "cornersOnly"
            double3 xformOp:translate = (-0.5, 0, 3.75)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "QuadMesh_LinearCornersPlus1" (
            references = </QuadMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "cornersPlus1"
            double3 xformOp:translate = (2.0, 0, 3.75)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "QuadMesh_LinearCornersPlus2" (
            references = </QuadMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "cornersPlus2"
            double3 xformOp:translate = (-3.0, 0, 1.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "QuadMesh_LinearBoundaries" (
            references = </QuadMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "boundaries"
            double3 xformOp:translate = (-0.5, 0, 1.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "QuadMesh_LinearAll" (
            references = </QuadMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "all"
            double3 xformOp:translate = (2.0, 0, 1.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "TriangleMesh_LinearNone" (
            references = </TriangleMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "none"
            double3 xformOp:translate = (-3, 0, -1.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "TriangleMesh_LinearCornersOnly" (
            references = </TriangleMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "cornersOnly"
            double3 xformOp:translate = (-0.5, 0, -1.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "TriangleMesh_LinearCornersPlus1" (
            references = </TriangleMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "cornersPlus1"
            double3 xformOp:translate = (2.0, 0, -1.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "TriangleMesh_CornersPlus2" (
            references = </TriangleMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "cornersPlus2"
            double3 xformOp:translate = (-3.0, 0, -3.75)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "TriangleMesh_LinearBoundaries" (
            references = </TriangleMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "boundaries"
            double3 xformOp:translate = (-0.5, 0, -3.75)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Mesh "TriangleMesh_LinearAll" (
            references = </TriangleMeshProto>
        )
        {
            uniform token faceVaryingLinearInterpolation = "all"
            double3 xformOp:translate = (2.0, 0, -3.75)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }
}

