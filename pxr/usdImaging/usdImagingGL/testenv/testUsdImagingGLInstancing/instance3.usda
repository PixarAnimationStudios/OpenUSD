#usda 1.0
(
    """
    This test exercises the case where multiple instances with the same
    master have different shader bindings authored at each instance.
    Note that usdImaging doesn't support USD instances of gprims, since the 
    imaging code would need to de-instance those gprims.
    Constant primvars authored on instances are inherited by the prototype 
    gprims in an instance-varying way, but non-constant primvars should be 
    defined on the prototype gprims.
    """
    endFrame = 10
    startFrame = 1
    upAxis = "Z"
)

def Xform "Mesh" (
    active = false
)
{
    def Mesh "Prim"
    {
        float3[] extent = [(-2, -2, -2), (2, 2, 2)]
        token faceVaryingLinearInterpolation = "boundaries"
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        token interpolateBoundary = "edgeAndCorner"
        point3f[] points = [(-2, -2, -2), (2, -2, -2), (-2, -2, 2), (2, -2, 2)]
        uniform token subdivisionScheme = "catmullClark"

        color3f[] primvars:myColor = [(0, 0.1, 0.9), (0.9, 0.1, 0), (0.1, 0.9, 0), (0, 0.9, 0.9)] (
            interpolation = "vertex"
        )
        custom float2[] primvars:map1_uv = [(0, 1), (1, 1), (0, 0), (1, 0)] (
            interpolation = "vertex"
        )
        custom float[] primvars:ptexFaceIndex = [0] (
            interpolation = "uniform"
        )
    }
}

def Xform "Curve" (
    active = false
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def BasisCurves "Prim"
    {
        uniform token basis = "bspline"
        int[] curveVertexCounts = [10]
        float3[] extent = [(-3.77021, -1.95556, -1), (2.79944, 9.61911, 1)]
        uniform token orientation = "rightHanded"
        point3f[] points = [(-2.77021, 5.61911, 0), (-2.64559, 1.85052, 0), (-2.52098, -1.91808, 0), (2.3203, -1.95556, 0), (2.59944, 0.794341, 0), (2.0742, 2.59551, 0), (-0.058857, 2.60262, 0), (-1.44907, 0.768724, 0), (-1.55156, 2.82384, 0), (-1.65406, 4.87896, 0)]
        color3f[] primvars:displayColor = [(0, 0.5, 1), (0.5, 0, 1), (0.5, 0.5, 0), (0.5, 0, 1), (0, 0.5, 1), (0.5, 0, 1), (0.5, 0.5, 0), (0.5, 0, 1), (0, 0.5, 1), (0.5, 0, 1)] (
            interpolation = "vertex"
        )
        color3f[] primvars:myColor = [(0.1, 0.1, 0), (0, 1, 0), (1, 0, 0), (0.9, 0, 0), (0.9, 0, 0), (0.9, 0, 0), (0.9, 0, 0), (0.9, 0, 0), (0.9, 0, 0), (0.9, 0, 0)] (
            interpolation = "vertex"
        )
        uniform token type = "cubic"
        float[] widths = [0.22] (
            interpolation = "constant"
        )
        uniform token wrap = "nonperiodic"
    }
}

def Xform "Points" (
    active = false
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Points "Prim" (
        customData = {
            bool zUp = 1
        }
    )
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.52, 0.52, 0.52)]
        point3f[] points = [(-0.5, -0.5, -0.5), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, 0.5)]
        color3f[] primvars:myColor = [(1, 0, 0), (1, 1, 0), (1, 0, 1), (0, 1, 0), (0, 0, 1)] (
            interpolation = "vertex"
        )
        custom float2[] primvars:map1_uv = [(0.1, 1), (1, 1), (0.1, 0.1), (1, 0.1), (0.5, 0.5)] (
            interpolation = "vertex"
        )
        float[] widths = [0.56292385, 0.25219387, 0.86007416, 0.4467854, 0.25168622]
    }
}

def Xform "Volume" (
    active = false
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Volume "Volume" (
        customData = {
            bool zUp = 1
        }
    )
    {
        float3[] extent = [(-2, -2, -2), (2, 2, 2)]
        float3 primvars:emissionColor = (0, 0.3, 0) (
            interpolation = "constant"
        )
    }
}

def Xform "Cube" (
    active = false
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Cube "Prim"
    {
        color3f[] primvars:myColor = [(1, 0, 0), (1, 1, 0), (1, 0, 1), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
            interpolation = "vertex"
        )
    }
}

def Xform "Cone" (
    active = false
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Cone "Prim"
    {
        color3f[] primvars:myColor = [(1, 0, 0)] (
            interpolation = "constant"
        )
    }
}

def Xform "Sphere" (
    active = false
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Sphere "Prim"
    {
        color3f[] primvars:myColor = [(1, 0, 0)] (
            interpolation = "constant"
        )
    }
}

def Xform "Capsule" (
    active = false
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Capsule "Prim"
    {
        color3f[] primvars:myColor = [(1, 0, 0)] (
            interpolation = "constant"
        )
    }
}

def Xform "Meshes" (
    active = false
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def "Mesh_1" (
        active = true
        references = </Mesh>
    )
    {
        custom int primvars:ptexFaceOffset = 0 (
            interpolation = "constant"
        )
    }

    def Xform "Mesh_2" (
        active = true
        references = </Mesh>
    )
    {
        custom int primvars:ptexFaceOffset = 16 (
            interpolation = "constant"
        )
        custom double3 xformOp:translate = (0, 0, -4.25)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
}

def Xform "Parent" (
    active = true
)
{
    def Scope "Materials"
    {
        def Material "UvMat"
        {
            token outputs:surface.connect = </Parent/Materials/UvMat/Surface.outputs:surface>

            def Shader "Surface"
            {
                uniform asset info:glslfx:sourceAsset = @shaders-surface.glslfx@
                uniform token info:implementationSource = "sourceAsset"
                uniform float3 inputs:diffuseColor = (1, 0, 1)
                add uniform float3 inputs:diffuseColor.connect = </Parent/Materials/UvMat/Tex.outputs:color>
                token outputs:surface
            }

            def Shader "Tex"
            {
                uniform token info:id = "HwUvTexture_1"
                uniform asset inputs:file = @tiledGradient.png@
                add uniform float2 inputs:uv.connect = </Parent/Materials/UvMat/Primvar.outputs:result>
                float3 outputs:color
            }

            def Shader "Primvar"
            {
                uniform token info:id = "HwPrimvar_1"
                uniform token inputs:varname = "map1_uv"
                float2 outputs:result
            }
        }

        def Material "PrimvarMat"
        {
            token outputs:surface.connect = </Parent/Materials/PrimvarMat/Surface.outputs:surface>

            def Shader "Surface"
            {
                uniform asset info:glslfx:sourceAsset = @shaders-surface.glslfx@
                uniform token info:implementationSource = "sourceAsset"
                uniform float3 inputs:diffuseColor = (0.07, 0.521, 0.8)
                add uniform float3 inputs:diffuseColor.connect = </Parent/Materials/PrimvarMat/Primvar.outputs:result>
                token outputs:surface
            }

            def Shader "Primvar"
            {
                uniform token info:id = "HwPrimvar_1"
                uniform token inputs:varname = "myColor"
                float3 outputs:result
            }
        }

        def Material "FallbackMat"
        {
            token outputs:surface.connect = </Parent/Materials/FallbackMat/Surface.outputs:surface>

            def Shader "Surface"
            {
                uniform asset info:glslfx:sourceAsset = @shaders-surface.glslfx@
                uniform token info:implementationSource = "sourceAsset"
                uniform float3 inputs:diffuseColor = (1, 0, 1)
                token outputs:surface
            }
        }

        def Material "PtexMat"
        {
            token outputs:surface.connect = </Parent/Materials/PtexMat/Surface.outputs:surface>

            def Shader "Surface"
            {
                uniform asset info:glslfx:sourceAsset = @shaders-surface.glslfx@
                uniform token info:implementationSource = "sourceAsset"
                uniform float3 inputs:diffuseColor = (1, 0, 1)
                add uniform float3 inputs:diffuseColor.connect = </Parent/Materials/PtexMat/Tex.outputs:color>
                token outputs:surface
            }

            def Shader "Tex"
            {
                uniform token info:id = "HwPtexTexture_1"
                uniform asset inputs:file = @test.ptx@
                float3 outputs:color
            }
        }
        
        def Material "VolumeMat"
        {
            token outputs:volume.connect = </Parent/Materials/VolumeMat/Volume.outputs:volume>
            
            def Shader "Volume"
            {
                uniform asset info:glslfx:sourceAsset = @volumeShaderParameter.glslfx@
                uniform token info:implementationSource = "sourceAsset"
                float3 inputs:emissionColor.connect = </Parent/Materials/VolumeMat/Primvar.outputs:result>

                token outputs:volume
            }

            def Shader "Primvar"
            {
                uniform token info:id = "UsdPrimvarReader_float"
                string inputs:varname = "emissionColor"
                float outputs:result
            }
        }
    }

    def Xform "Meshes"
    {
        def "Primvars" (
            active = true
            instanceable = true
            references = </Meshes>
        )
        {
            rel material:binding = </Parent/Materials/PrimvarMat>
        }

        def "UV" (
            active = true
            instanceable = true
            references = </Meshes>
        )
        {
            rel material:binding = </Parent/Materials/UvMat>
            custom double3 xformOp:translate = (-4.25, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def "Fallback" (
            active = true
            instanceable = true
            references = </Meshes>
        )
        {
            rel material:binding = </Parent/Materials/FallbackMat>
            custom double3 xformOp:translate = (4.25, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def "PTex" (
            active = true
            instanceable = true
            references = </Meshes>
        )
        {
            rel material:binding = </Parent/Materials/PtexMat>
            custom double3 xformOp:translate = (8.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }

    def Scope "Curves"
    {
        def "Loop" (
            active = true
            instanceable = true
            references = </Curve>
        )
        {
            rel material:binding = </Parent/Materials/PrimvarMat>
            custom double xformOp:rotateX = 90
            custom double3 xformOp:scale = (0.5, 0.5, 0.5)
            custom double3 xformOp:translate = (-8, 7, 3.9)
            uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:rotateX", "xformOp:translate"]
        }
    }

    def Scope "Points"
    {
        def "Points_Primvar" (
            active = true
            instanceable = true
            references = </Points>
        )
        {
            rel material:binding = </Parent/Materials/PrimvarMat>
            custom double3 xformOp:scale = (2, 2, 2)
            custom double3 xformOp:translate = (0, -1, 2)
            uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
        }

        def "Points_Uv" (
            active = true
            instanceable = true
            references = </Points>
        )
        {
            rel material:binding = </Parent/Materials/UvMat>
            custom double3 xformOp:scale = (2, 2, 2)
            custom double3 xformOp:translate = (0, -1, 4)
            uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
        }
    }

    def Scope "Volumes"
    {
        def "Volume" (
            active = true
            instanceable = true
            references = </Volume>
        )
        {
            rel material:binding = </Parent/Materials/VolumeMat>
            custom double3 xformOp:translate = (-8.5, 0, 4.25)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }

    def Scope "Intrinsics"
    {
        def Scope "Cube"
        {
            def "Cube_Fallback" (
                active = true
                instanceable = true
                references = </Cube>
            )
            {
                rel material:binding = </Parent/Materials/FallbackMat>
                custom double3 xformOp:scale = (2, 2, 2)
                custom double3 xformOp:translate = (2.125, 0, 4.25)
                uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
            }

            def "Cube_PrimvarVertex" (
                active = true
                instanceable = true
                references = </Cube>
            )
            {
                rel material:binding = </Parent/Materials/PrimvarMat>
                custom double3 xformOp:scale = (2, 2, 2)
                custom double3 xformOp:translate = (-2.125, 0, 4.25)
                uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
            }
        }

        def Scope "Cone"
        {
            def "Cone_Fallback" (
                active = true
                instanceable = true
                references = </Cone>
            )
            {
                rel material:binding = </Parent/Materials/FallbackMat>
                custom double3 xformOp:scale = (2, 2, 2)
                custom double3 xformOp:translate = (-4.25, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
            }

            def "Cone_PrimvarUniform" (
                active = true
                instanceable = true
                references = </Cone>
            )
            {
                rel material:binding = </Parent/Materials/PrimvarMat>
                custom double3 xformOp:scale = (2, 2, 2)
                custom double3 xformOp:translate = (-4.25, 0, 4.25)
                uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
            }
        }

        def Scope "Sphere"
        {
            def "Sphere_Fallback" (
                active = true
                instanceable = true
                references = </Sphere>
            )
            {
                rel material:binding = </Parent/Materials/FallbackMat>
                custom double3 xformOp:scale = (2, 2, 2)
                custom double3 xformOp:translate = (-6.5, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
            }

            def "Sphere_PrimvarUniform" (
                active = true
                instanceable = true
                references = </Sphere>
            )
            {
                rel material:binding = </Parent/Materials/PrimvarMat>
                custom double3 xformOp:scale = (2, 2, 2)
                custom double3 xformOp:translate = (-6.5, 0, 4.25)
                uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
            }
        }

        def Scope "Capsule"
        {
            def "Capsule_Fallback" (
                active = true
                instanceable = true
                references = </Capsule>
            )
            {
                rel material:binding = </Parent/Materials/FallbackMat>
                custom double3 xformOp:scale = (2, 2, 2)
                custom double3 xformOp:translate = (-4.25, 0, -2.25)
                uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
            }

            def "Capsule_PrimvarUniform" (
                active = true
                instanceable = true
                references = </Capsule>
            )
            {
                rel material:binding = </Parent/Materials/PrimvarMat>
                custom double3 xformOp:scale = (2, 2, 2)
                custom double3 xformOp:translate = (-6.5, 0, -2.25)
                uniform token[] xformOpOrder = ["xformOp:scale", "xformOp:translate"]
            }
        }
    }
}

