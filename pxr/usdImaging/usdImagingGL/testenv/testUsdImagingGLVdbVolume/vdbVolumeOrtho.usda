#usda 1.0
(
    defaultPrim = "Volume"
    upAxis = "Y"
    startFrame = 1
    endFrame = 3
    doc = """A test scene for an animated Vdb volume. The volume has no material, so the fallback material will be used."""
)

def Scope "Background" (
    doc = "Checkerboard pattern"
)
{
    def Mesh "Checkerboard" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Background/CheckerboardMaterial>
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        point3f[] points = [(-20, -20, 0), (-20, 20, 0), (20, 20, 0), (20, -20, 0)]
        texCoord2f[] primvars:st = [(0,0), (15,0), (15,15), (0,15)] (
            interpolation = "varying"
        )
        double3 xformOp:translate = (0, 5, -5)
        token[] xformOpOrder = [ "xformOp:translate" ]
    }

    def Material "CheckerboardMaterial"
    {
        token outputs:surface.connect = </Background/CheckerboardMaterial/Surface.outputs:surface>

        def Shader "Surface" (
            doc = "Checkerboard material"
        )
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:glslfx:sourceAsset = @checkerboardShader.glslfx@
            float2 inputs:st.connect = </Background/CheckerboardMaterial/stReader.outputs:result>
            token outputs:surface
        }

        def Shader "stReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            string inputs:varname = "st"
            float2 outputs:result
        }
    }
}

def Camera "main_cam"
{
    token projection = "orthographic"

    float horizontalAperture = 225
    float verticalAperture = 225
    float2 clippingRange = (5, 25)

    double3 xformOp:translate = (0, 4, 10)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def Xform "Lights"
{
    def DistantLight "Left"
    {
        color3f inputs:color = (1.0, 0.0, 0.0)
        float inputs:exposure = 4
        float xformOp:rotateY = -90
        uniform token[] xformOpOrder = ["xformOp:rotateY"]
    }
}

def OpenVDBAsset "Density"
{
    token fieldName = "density"
    asset filePath = @smoke_000002.vdb@
}

def Volume "VdbVolumeVeryFar"(
    doc = "Volume so far from camera that it is partially cut off by background chess pattern, thus testing interaction with opaque geometry."
)
{
    rel field:density = </Density>

    token[] xformOpOrder = [ "xformOp:translate", "xformOp:rotateX" ]
    double3 xformOp:translate = (-10.5, 0, -5.8)
    double xformOp:rotateX = -90
}

def Volume "VdbVolumeFar"(
    doc = "Volume far from camera."
)
{
    rel field:density = </Density>

    token[] xformOpOrder = [ "xformOp:translate", "xformOp:rotateX" ]
    double3 xformOp:translate = (-3.5, 0, -2)
    double xformOp:rotateX = -90
}

def Volume "VdbVolumeNear"(
    doc = "Volume near from camera, should appear to have the same size because the camera is orthographic."
)
{
    rel field:density = </Density>

    token[] xformOpOrder = [ "xformOp:translate", "xformOp:rotateX" ]
    double3 xformOp:translate = (3.5, 0, 0)
    double xformOp:rotateX = -90
}

def Volume "VdbVolumeVeryNear"(
    doc = "Volume so close to the camera that the camera is inside the volume's bounding box, that the raymarching starts from the near plane when camera inside bounding box."
)
{
    rel field:density = </Density>

    token[] xformOpOrder = [ "xformOp:translate", "xformOp:rotateX" ]
    double3 xformOp:translate = (10.5, 0, 5.4)
    double xformOp:rotateX = -90
}
