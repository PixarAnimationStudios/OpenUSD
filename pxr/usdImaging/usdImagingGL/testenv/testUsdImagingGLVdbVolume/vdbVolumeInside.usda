#usda 1.0
(
    defaultPrim = "Volume"
    upAxis = "Y"
    startFrame = 1
    endFrame = 100
    doc = """A test scene for a Vdb volume. The camera is actually inside the bounding box of the volume testing that the start point of the ray marching is properly adjusted when the faces of the bounding box facing the camera are clipped away."""
)

def Scope "Background" (
    doc = "Checkerboard pattern"
)
{
    def Mesh "Checkerboard" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Background/CheckerboardMaterial>
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        point3f[] points = [(-10, -10, 0), (-10, 10, 0), (10, 10, 0), (10, -10, 0)]
        texCoord2f[] primvars:st = [(0,0), (15,0), (15,15), (0,15)] (
            interpolation = "varying"
        )
        double3 xformOp:translate = (-1, -1, -5)
        token[] xformOpOrder = [ "xformOp:translate" ]
    }

    def Material "CheckerboardMaterial"
    {
        token outputs:surface.connect = </Background/CheckerboardMaterial/Surface.outputs:surface>

        def Shader "Surface" (
            doc = "Checkerboard material"
        )
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:glslfx:sourceAsset = @checkerboardShader.glslfx@
            float2 inputs:st.connect = </Background/CheckerboardMaterial/stReader.outputs:result>
            token outputs:surface
        }

        def Shader "stReader"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            string inputs:varname = "st"
            float2 outputs:result
        }
    }
}

def Camera "main_cam"
{
    float focalLength = 10.0
    float focusDistance = 50.0
    float fStop = 100.0

    double3 xformOp:translate = (0, 0, 4.2)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def Xform "Lights"
{
    def DistantLight "Left"
    {
        color3f inputs:color = (1.0, 0.0, 0.0)
        float inputs:exposure = 3
        float xformOp:rotateY = -90
        uniform token[] xformOpOrder = ["xformOp:rotateY"]
    }
    def DistantLight "Right"
    {
        color3f inputs:color = (1.0, 0.0, 0.0)
        float inputs:exposure = 3
        float xformOp:rotateY = 90
        uniform token[] xformOpOrder = ["xformOp:rotateY"]
    }

}

def Volume "VdbVolume" (
    doc = "Volume moving so the camera is inside the volume at frame 1 and the volume is intersecting with opaque geometry at 13"
)
{
    rel field:density = </VdbVolume/Density>
    def OpenVDBAsset "Density"
    {
        token fieldName = "density"
        asset filePath = @smoke_000002.vdb@
    }

    token[] xformOpOrder = [ "xformOp:translate", "xformOp:rotateX" ]
    double3 xformOp:translate = (0, -3, 4)
    double3 xformOp:translate.timeSamples = {
        1: (0, -3, 4),
        2: (0, -3, 3.5),
        3: (0, -3, 3),
        4: (0, -3, 2.5),
        5: (0, -3, 2),
        6: (0, -3, 1.5),
        7: (0, -3, 1),
        8: (0, -3, 0.5),
        9: (0, -3, 0),
        10: (0, -3, -0.5),
        11: (0, -3, -1.0),
        12: (0, -3, -1.5),
        13: (0, -3, -2.0),
    }
    double xformOp:rotateX = 225
}
