#usda 1.0
(
    upAxis = "Z"
)
def Sphere "mxSphere" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    rel material:binding = </Materials/MaterialX/Materials/Default_White>
    color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
}

def Scope "Materials" {
    def "MaterialX" (
        references = [
            @./standard_surface_default.mtlx@</MaterialX>,
        ]
    )
    {
    }
}

def Xform "lights" 
{
    # Set the purpose for lights to "render" so that they're not included
    # in the test's frameAll calculation.
    uniform token purpose = "render"
    
    def SphereLight "RedLight"
    {
        color3f inputs:color = (1.0, 0.0, 0.0)
        float inputs:exposure = 2
        float inputs:intensity = 3.5
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2, -2, 2, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
    def SphereLight "GreenLight"
    {
        color3f inputs:color = (0.0, 1.0, 0.0)
        float inputs:exposure = 2
        float inputs:intensity = 3.5
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -2, -2, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
    def SphereLight "BlueLight"
    {
        color3f inputs:color = (0.0, 0.0, 1.0)
        float inputs:exposure = 2
        float inputs:intensity = 3.5
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2, -2, 2, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}
