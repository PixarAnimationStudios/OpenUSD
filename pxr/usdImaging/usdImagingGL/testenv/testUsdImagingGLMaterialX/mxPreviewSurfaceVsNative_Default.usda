#usda 1.0
(
    upAxis = "Z"
)
def Scope "MaterialX_Default" {
    def Sphere "MxUsdDefault" {
        rel material:binding = </Materials/MaterialX/Materials/USD_Default>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-1.5, 0, 1.5, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
    def Sphere "MxUsdDefault_Rough" {
        rel material:binding = </Materials/MaterialX/Materials/USD_Default_Rough>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-1.5, 0, -1.5, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}
def Scope "UsdNative_Default" {
    def Sphere "UsdDefault" {
        rel material:binding = </Materials/USD_Default>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.5, 0, 1.5, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
    def Sphere "UsdDefault_Rough" {
        rel material:binding = </Materials/USD_Default_Rough>
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.5, 0, -1.5, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Materials" {
    def Material "MaterialX" (
        references = [
            # USD Preview Surface MaterialX Nodes
            @./usd_preview_surface_nodes.mtlx@</MaterialX>,
        ]
    )
    {
    }
    def Material "USD_Default" {
        token outputs:surface.connect = </Materials/USD_Default/Surface.outputs:surface>

        def Shader "Surface"
        {   
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.18, 0.18, 0.18)
            color3f inputs:emissiveColor = (0.0, 0.0, 0.0)
            int inputs:useSpecularWorkflow = 0
            color3f inputs:specularColor = (0.0, 0.0, 0.0)
            float inputs:metallic = 0.0
            float inputs:roughness = 0.01
            float inputs:clearcoat = 0.0
            float inputs:clearcoatRoughness = 0.01
            float inputs:opacity = 1
            float inputs:opacityThreshold = 0
            float inputs:ior = 1.5

            token outputs:surface
        }
    }
    def Material "USD_Default_Rough" {
        token outputs:surface.connect = </Materials/USD_Default_Rough/Surface.outputs:surface>

        def Shader "Surface"
        {   
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.18, 0.18, 0.18)
            color3f inputs:emissiveColor = (0.0, 0.0, 0.0)
            int inputs:useSpecularWorkflow = 0
            color3f inputs:specularColor = (0.0, 0.0, 0.0)
            float inputs:metallic = 0.0
            float inputs:roughness = 0.95
            float inputs:clearcoat = 0.0
            float inputs:clearcoatRoughness = 0.01
            float inputs:opacity = 1
            float inputs:opacityThreshold = 0
            float inputs:ior = 1.5

            token outputs:surface
        }
    }

}

def Xform "lights" 
{
    def DomeLight "DomeLight"
    {
        asset inputs:texture:file = @./StinsonBeach.hdr@
        float xformOp:rotateX:Zup = 90
        uniform token[] xformOpOrder = ["xformOp:rotateX:Zup"]
    }
}
