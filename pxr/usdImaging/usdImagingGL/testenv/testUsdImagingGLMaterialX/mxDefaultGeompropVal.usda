#usda 1.0
(
    # upAxis = "Z"
)

def "DefaultSphere" (
    references = @texturedSphere.usda@
)
{
    rel material:binding = </Materials/MaterialX/Materials/TestMaterial0>

    matrix4d xformOp:transform = ( (1, 0, 0, 0),
                                (0, 1, 0, 0),
                                (0, 0, 1, 0),
                                (-18, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def "RedSphere" (
    references = @texturedSphere.usda@
)
{
    rel material:binding = </Materials/MaterialX/Materials/TestMaterial1>
}

def "BlueSphere" (
    references = @texturedSphere.usda@
)
{
    rel material:binding = </Materials/MaterialX/Materials/TestMaterial2>

    matrix4d xformOp:transform = ( (1, 0, 0, 0),
                                (0, 1, 0, 0),
                                (0, 0, 1, 0),
                                (18, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Scope "Materials" 
{
    def Scope "MaterialX" (
        references = [
            @./defaultGeompropVal.mtlx@</MaterialX>,
        ]
    )
    {
    }
}


def Xform "Lights" 
{
    def DomeLight "DomeLight"
    {
        asset inputs:texture:file = @./StinsonBeach.hdr@
        float xformOp:rotateX:Zup = 90
        uniform token[] xformOpOrder = ["xformOp:rotateX:Zup"]
    }
    def SphereLight "Light"
    {
        float inputs:radius = 15
        float inputs:intensity = 5
        Vec3f xformOp:translate = (0, -50, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
}

def Camera "Camera"
{
    double3 xformOp:translate = (0, 0, 175)
    float xformOp:rotateX:Zup = 90
    uniform token[] xformOpOrder = ["xformOp:rotateX:Zup","xformOp:translate"]
}