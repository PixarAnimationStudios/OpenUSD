//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.cpp files to make changes.         ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdImaging/usdPrimInfoSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdImagingUsdPrimInfoSchemaTokens,
    USDIMAGINGUSDPRIMINFO_SCHEMA_TOKENS);



HdPathDataSourceHandle
UsdImagingUsdPrimInfoSchema::GetNiPrototypePath()
{
    return _GetTypedDataSource<HdPathDataSource>(
        UsdImagingUsdPrimInfoSchemaTokens->niPrototypePath);
}

HdBoolDataSourceHandle
UsdImagingUsdPrimInfoSchema::GetIsNiPrototype()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdImagingUsdPrimInfoSchemaTokens->isNiPrototype);
}

HdTokenDataSourceHandle
UsdImagingUsdPrimInfoSchema::GetSpecifier()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdImagingUsdPrimInfoSchemaTokens->specifier);
}

HdContainerDataSourceHandle
UsdImagingUsdPrimInfoSchema::GetPiPropagatedPrototypes()
{
    return _GetTypedDataSource<HdContainerDataSource>(
        UsdImagingUsdPrimInfoSchemaTokens->piPropagatedPrototypes);
}

HdBoolDataSourceHandle
UsdImagingUsdPrimInfoSchema::GetIsLoaded()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdImagingUsdPrimInfoSchemaTokens->isLoaded);
}

/*static*/
HdContainerDataSourceHandle
UsdImagingUsdPrimInfoSchema::BuildRetained(
        const HdPathDataSourceHandle &niPrototypePath,
        const HdBoolDataSourceHandle &isNiPrototype,
        const HdTokenDataSourceHandle &specifier,
        const HdContainerDataSourceHandle &piPropagatedPrototypes,
        const HdBoolDataSourceHandle &isLoaded
)
{
    TfToken names[5];
    HdDataSourceBaseHandle values[5];

    size_t count = 0;
    if (niPrototypePath) {
        names[count] = UsdImagingUsdPrimInfoSchemaTokens->niPrototypePath;
        values[count++] = niPrototypePath;
    }

    if (isNiPrototype) {
        names[count] = UsdImagingUsdPrimInfoSchemaTokens->isNiPrototype;
        values[count++] = isNiPrototype;
    }

    if (specifier) {
        names[count] = UsdImagingUsdPrimInfoSchemaTokens->specifier;
        values[count++] = specifier;
    }

    if (piPropagatedPrototypes) {
        names[count] = UsdImagingUsdPrimInfoSchemaTokens->piPropagatedPrototypes;
        values[count++] = piPropagatedPrototypes;
    }

    if (isLoaded) {
        names[count] = UsdImagingUsdPrimInfoSchemaTokens->isLoaded;
        values[count++] = isLoaded;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}

/*static*/
UsdImagingUsdPrimInfoSchema
UsdImagingUsdPrimInfoSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdImagingUsdPrimInfoSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdImagingUsdPrimInfoSchemaTokens->__usdPrimInfo))
        : nullptr);
}

/*static*/
const TfToken &
UsdImagingUsdPrimInfoSchema::GetSchemaToken()
{
    return UsdImagingUsdPrimInfoSchemaTokens->__usdPrimInfo;
} 
/*static*/
const HdDataSourceLocator &
UsdImagingUsdPrimInfoSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        UsdImagingUsdPrimInfoSchemaTokens->__usdPrimInfo
    );
    return locator;
} 
/*static*/
const HdDataSourceLocator &
UsdImagingUsdPrimInfoSchema::GetNiPrototypePathLocator()
{
    static const HdDataSourceLocator locator(
        UsdImagingUsdPrimInfoSchemaTokens->__usdPrimInfo,
        UsdImagingUsdPrimInfoSchemaTokens->niPrototypePath
    );
    return locator;
}


UsdImagingUsdPrimInfoSchema::Builder &
UsdImagingUsdPrimInfoSchema::Builder::SetNiPrototypePath(
    const HdPathDataSourceHandle &niPrototypePath)
{
    _niPrototypePath = niPrototypePath;
    return *this;
}

UsdImagingUsdPrimInfoSchema::Builder &
UsdImagingUsdPrimInfoSchema::Builder::SetIsNiPrototype(
    const HdBoolDataSourceHandle &isNiPrototype)
{
    _isNiPrototype = isNiPrototype;
    return *this;
}

UsdImagingUsdPrimInfoSchema::Builder &
UsdImagingUsdPrimInfoSchema::Builder::SetSpecifier(
    const HdTokenDataSourceHandle &specifier)
{
    _specifier = specifier;
    return *this;
}

UsdImagingUsdPrimInfoSchema::Builder &
UsdImagingUsdPrimInfoSchema::Builder::SetPiPropagatedPrototypes(
    const HdContainerDataSourceHandle &piPropagatedPrototypes)
{
    _piPropagatedPrototypes = piPropagatedPrototypes;
    return *this;
}

UsdImagingUsdPrimInfoSchema::Builder &
UsdImagingUsdPrimInfoSchema::Builder::SetIsLoaded(
    const HdBoolDataSourceHandle &isLoaded)
{
    _isLoaded = isLoaded;
    return *this;
}

HdContainerDataSourceHandle
UsdImagingUsdPrimInfoSchema::Builder::Build()
{
    return UsdImagingUsdPrimInfoSchema::BuildRetained(
        _niPrototypePath,
        _isNiPrototype,
        _specifier,
        _piPropagatedPrototypes,
        _isLoaded
    );
}


PXR_NAMESPACE_CLOSE_SCOPE