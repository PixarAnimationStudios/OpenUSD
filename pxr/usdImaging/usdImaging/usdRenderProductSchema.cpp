//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* **                                                                      ** */
/* ** This file is generated by a script.                                  ** */
/* **                                                                      ** */
/* ** Do not edit it directly (unless it is within a CUSTOM CODE section)! ** */
/* ** Edit hdGen/schema.py instead to make changes.                        ** */
/* **                                                                      ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdImaging/usdRenderProductSchema.h"

#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"

// --(BEGIN CUSTOM CODE: Includes)--
// --(END CUSTOM CODE: Includes)--

PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdImagingUsdRenderProductSchemaTokens,
    USD_IMAGING_USD_RENDER_PRODUCT_SCHEMA_TOKENS);

// --(BEGIN CUSTOM CODE: Schema Methods)--
// --(END CUSTOM CODE: Schema Methods)--

HdVec2iDataSourceHandle
UsdImagingUsdRenderProductSchema::GetResolution()
{
    return _GetTypedDataSource<HdVec2iDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->resolution);
}

HdFloatDataSourceHandle
UsdImagingUsdRenderProductSchema::GetPixelAspectRatio()
{
    return _GetTypedDataSource<HdFloatDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->pixelAspectRatio);
}

HdTokenDataSourceHandle
UsdImagingUsdRenderProductSchema::GetAspectRatioConformPolicy()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->aspectRatioConformPolicy);
}

HdVec4fDataSourceHandle
UsdImagingUsdRenderProductSchema::GetDataWindowNDC()
{
    return _GetTypedDataSource<HdVec4fDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->dataWindowNDC);
}

HdBoolDataSourceHandle
UsdImagingUsdRenderProductSchema::GetDisableMotionBlur()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->disableMotionBlur);
}

HdBoolDataSourceHandle
UsdImagingUsdRenderProductSchema::GetDisableDepthOfField()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->disableDepthOfField);
}

HdPathDataSourceHandle
UsdImagingUsdRenderProductSchema::GetCamera()
{
    return _GetTypedDataSource<HdPathDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->camera);
}

HdTokenDataSourceHandle
UsdImagingUsdRenderProductSchema::GetProductType()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->productType);
}

HdTokenDataSourceHandle
UsdImagingUsdRenderProductSchema::GetProductName()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->productName);
}

HdPathArrayDataSourceHandle
UsdImagingUsdRenderProductSchema::GetOrderedVars()
{
    return _GetTypedDataSource<HdPathArrayDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->orderedVars);
}

HdContainerDataSourceHandle
UsdImagingUsdRenderProductSchema::GetNamespacedSettings()
{
    return _GetTypedDataSource<HdContainerDataSource>(
        UsdImagingUsdRenderProductSchemaTokens->namespacedSettings);
}

/*static*/
HdContainerDataSourceHandle
UsdImagingUsdRenderProductSchema::BuildRetained(
        const HdVec2iDataSourceHandle &resolution,
        const HdFloatDataSourceHandle &pixelAspectRatio,
        const HdTokenDataSourceHandle &aspectRatioConformPolicy,
        const HdVec4fDataSourceHandle &dataWindowNDC,
        const HdBoolDataSourceHandle &disableMotionBlur,
        const HdBoolDataSourceHandle &disableDepthOfField,
        const HdPathDataSourceHandle &camera,
        const HdTokenDataSourceHandle &productType,
        const HdTokenDataSourceHandle &productName,
        const HdPathArrayDataSourceHandle &orderedVars,
        const HdContainerDataSourceHandle &namespacedSettings
)
{
    TfToken _names[11];
    HdDataSourceBaseHandle _values[11];

    size_t _count = 0;

    if (resolution) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->resolution;
        _values[_count++] = resolution;
    }

    if (pixelAspectRatio) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->pixelAspectRatio;
        _values[_count++] = pixelAspectRatio;
    }

    if (aspectRatioConformPolicy) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->aspectRatioConformPolicy;
        _values[_count++] = aspectRatioConformPolicy;
    }

    if (dataWindowNDC) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->dataWindowNDC;
        _values[_count++] = dataWindowNDC;
    }

    if (disableMotionBlur) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->disableMotionBlur;
        _values[_count++] = disableMotionBlur;
    }

    if (disableDepthOfField) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->disableDepthOfField;
        _values[_count++] = disableDepthOfField;
    }

    if (camera) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->camera;
        _values[_count++] = camera;
    }

    if (productType) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->productType;
        _values[_count++] = productType;
    }

    if (productName) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->productName;
        _values[_count++] = productName;
    }

    if (orderedVars) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->orderedVars;
        _values[_count++] = orderedVars;
    }

    if (namespacedSettings) {
        _names[_count] = UsdImagingUsdRenderProductSchemaTokens->namespacedSettings;
        _values[_count++] = namespacedSettings;
    }
    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetResolution(
    const HdVec2iDataSourceHandle &resolution)
{
    _resolution = resolution;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetPixelAspectRatio(
    const HdFloatDataSourceHandle &pixelAspectRatio)
{
    _pixelAspectRatio = pixelAspectRatio;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetAspectRatioConformPolicy(
    const HdTokenDataSourceHandle &aspectRatioConformPolicy)
{
    _aspectRatioConformPolicy = aspectRatioConformPolicy;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetDataWindowNDC(
    const HdVec4fDataSourceHandle &dataWindowNDC)
{
    _dataWindowNDC = dataWindowNDC;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetDisableMotionBlur(
    const HdBoolDataSourceHandle &disableMotionBlur)
{
    _disableMotionBlur = disableMotionBlur;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetDisableDepthOfField(
    const HdBoolDataSourceHandle &disableDepthOfField)
{
    _disableDepthOfField = disableDepthOfField;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetCamera(
    const HdPathDataSourceHandle &camera)
{
    _camera = camera;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetProductType(
    const HdTokenDataSourceHandle &productType)
{
    _productType = productType;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetProductName(
    const HdTokenDataSourceHandle &productName)
{
    _productName = productName;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetOrderedVars(
    const HdPathArrayDataSourceHandle &orderedVars)
{
    _orderedVars = orderedVars;
    return *this;
}

UsdImagingUsdRenderProductSchema::Builder &
UsdImagingUsdRenderProductSchema::Builder::SetNamespacedSettings(
    const HdContainerDataSourceHandle &namespacedSettings)
{
    _namespacedSettings = namespacedSettings;
    return *this;
}

HdContainerDataSourceHandle
UsdImagingUsdRenderProductSchema::Builder::Build()
{
    return UsdImagingUsdRenderProductSchema::BuildRetained(
        _resolution,
        _pixelAspectRatio,
        _aspectRatioConformPolicy,
        _dataWindowNDC,
        _disableMotionBlur,
        _disableDepthOfField,
        _camera,
        _productType,
        _productName,
        _orderedVars,
        _namespacedSettings
    );
}

/*static*/
UsdImagingUsdRenderProductSchema
UsdImagingUsdRenderProductSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdImagingUsdRenderProductSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdImagingUsdRenderProductSchemaTokens->__usdRenderProduct))
        : nullptr);
}

/*static*/
const TfToken &
UsdImagingUsdRenderProductSchema::GetSchemaToken()
{
    return UsdImagingUsdRenderProductSchemaTokens->__usdRenderProduct;
}

/*static*/
const HdDataSourceLocator &
UsdImagingUsdRenderProductSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(GetSchemaToken());
    return locator;
}

/* static */
const HdDataSourceLocator &
UsdImagingUsdRenderProductSchema::GetNamespacedSettingsLocator()
{
    static const HdDataSourceLocator locator =
        GetDefaultLocator().Append(
            UsdImagingUsdRenderProductSchemaTokens->namespacedSettings);
    return locator;
} 

PXR_NAMESPACE_CLOSE_SCOPE