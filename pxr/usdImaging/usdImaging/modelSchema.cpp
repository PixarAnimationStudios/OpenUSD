//
// Copyright 2022 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// schema.template.cpp file to make changes.

#include "pxr/usdImaging/usdImaging/modelSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdImagingModelSchemaTokens,
    USDIMAGINGMODEL_SCHEMA_TOKENS);



HdTokenDataSourceHandle
UsdImagingModelSchema::GetDrawMode()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdImagingModelSchemaTokens->drawMode);
}

HdBoolDataSourceHandle
UsdImagingModelSchema::GetApplyDrawMode()
{
    return _GetTypedDataSource<HdBoolDataSource>(
        UsdImagingModelSchemaTokens->applyDrawMode);
}

HdVec3fDataSourceHandle
UsdImagingModelSchema::GetDrawModeColor()
{
    return _GetTypedDataSource<HdVec3fDataSource>(
        UsdImagingModelSchemaTokens->drawModeColor);
}

HdTokenDataSourceHandle
UsdImagingModelSchema::GetCardGeometry()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdImagingModelSchemaTokens->cardGeometry);
}

HdAssetPathDataSourceHandle
UsdImagingModelSchema::GetCardTextureXPos()
{
    return _GetTypedDataSource<HdAssetPathDataSource>(
        UsdImagingModelSchemaTokens->cardTextureXPos);
}

HdAssetPathDataSourceHandle
UsdImagingModelSchema::GetCardTextureYPos()
{
    return _GetTypedDataSource<HdAssetPathDataSource>(
        UsdImagingModelSchemaTokens->cardTextureYPos);
}

HdAssetPathDataSourceHandle
UsdImagingModelSchema::GetCardTextureZPos()
{
    return _GetTypedDataSource<HdAssetPathDataSource>(
        UsdImagingModelSchemaTokens->cardTextureZPos);
}

HdAssetPathDataSourceHandle
UsdImagingModelSchema::GetCardTextureXNeg()
{
    return _GetTypedDataSource<HdAssetPathDataSource>(
        UsdImagingModelSchemaTokens->cardTextureXNeg);
}

HdAssetPathDataSourceHandle
UsdImagingModelSchema::GetCardTextureYNeg()
{
    return _GetTypedDataSource<HdAssetPathDataSource>(
        UsdImagingModelSchemaTokens->cardTextureYNeg);
}

HdAssetPathDataSourceHandle
UsdImagingModelSchema::GetCardTextureZNeg()
{
    return _GetTypedDataSource<HdAssetPathDataSource>(
        UsdImagingModelSchemaTokens->cardTextureZNeg);
}

/*static*/
HdContainerDataSourceHandle
UsdImagingModelSchema::BuildRetained(
        const HdTokenDataSourceHandle &drawMode,
        const HdBoolDataSourceHandle &applyDrawMode,
        const HdVec3fDataSourceHandle &drawModeColor,
        const HdTokenDataSourceHandle &cardGeometry,
        const HdAssetPathDataSourceHandle &cardTextureXPos,
        const HdAssetPathDataSourceHandle &cardTextureYPos,
        const HdAssetPathDataSourceHandle &cardTextureZPos,
        const HdAssetPathDataSourceHandle &cardTextureXNeg,
        const HdAssetPathDataSourceHandle &cardTextureYNeg,
        const HdAssetPathDataSourceHandle &cardTextureZNeg
)
{
    TfToken names[10];
    HdDataSourceBaseHandle values[10];

    size_t count = 0;
    if (drawMode) {
        names[count] = UsdImagingModelSchemaTokens->drawMode;
        values[count++] = drawMode;
    }

    if (applyDrawMode) {
        names[count] = UsdImagingModelSchemaTokens->applyDrawMode;
        values[count++] = applyDrawMode;
    }

    if (drawModeColor) {
        names[count] = UsdImagingModelSchemaTokens->drawModeColor;
        values[count++] = drawModeColor;
    }

    if (cardGeometry) {
        names[count] = UsdImagingModelSchemaTokens->cardGeometry;
        values[count++] = cardGeometry;
    }

    if (cardTextureXPos) {
        names[count] = UsdImagingModelSchemaTokens->cardTextureXPos;
        values[count++] = cardTextureXPos;
    }

    if (cardTextureYPos) {
        names[count] = UsdImagingModelSchemaTokens->cardTextureYPos;
        values[count++] = cardTextureYPos;
    }

    if (cardTextureZPos) {
        names[count] = UsdImagingModelSchemaTokens->cardTextureZPos;
        values[count++] = cardTextureZPos;
    }

    if (cardTextureXNeg) {
        names[count] = UsdImagingModelSchemaTokens->cardTextureXNeg;
        values[count++] = cardTextureXNeg;
    }

    if (cardTextureYNeg) {
        names[count] = UsdImagingModelSchemaTokens->cardTextureYNeg;
        values[count++] = cardTextureYNeg;
    }

    if (cardTextureZNeg) {
        names[count] = UsdImagingModelSchemaTokens->cardTextureZNeg;
        values[count++] = cardTextureZNeg;
    }

    return HdRetainedContainerDataSource::New(count, names, values);
}

/*static*/
UsdImagingModelSchema
UsdImagingModelSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdImagingModelSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdImagingModelSchemaTokens->model))
        : nullptr);
}

/*static*/
const HdDataSourceLocator &
UsdImagingModelSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        UsdImagingModelSchemaTokens->model
    );
    return locator;
} 
UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetDrawMode(
    const HdTokenDataSourceHandle &drawMode)
{
    _drawMode = drawMode;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetApplyDrawMode(
    const HdBoolDataSourceHandle &applyDrawMode)
{
    _applyDrawMode = applyDrawMode;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetDrawModeColor(
    const HdVec3fDataSourceHandle &drawModeColor)
{
    _drawModeColor = drawModeColor;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetCardGeometry(
    const HdTokenDataSourceHandle &cardGeometry)
{
    _cardGeometry = cardGeometry;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetCardTextureXPos(
    const HdAssetPathDataSourceHandle &cardTextureXPos)
{
    _cardTextureXPos = cardTextureXPos;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetCardTextureYPos(
    const HdAssetPathDataSourceHandle &cardTextureYPos)
{
    _cardTextureYPos = cardTextureYPos;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetCardTextureZPos(
    const HdAssetPathDataSourceHandle &cardTextureZPos)
{
    _cardTextureZPos = cardTextureZPos;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetCardTextureXNeg(
    const HdAssetPathDataSourceHandle &cardTextureXNeg)
{
    _cardTextureXNeg = cardTextureXNeg;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetCardTextureYNeg(
    const HdAssetPathDataSourceHandle &cardTextureYNeg)
{
    _cardTextureYNeg = cardTextureYNeg;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetCardTextureZNeg(
    const HdAssetPathDataSourceHandle &cardTextureZNeg)
{
    _cardTextureZNeg = cardTextureZNeg;
    return *this;
}

HdContainerDataSourceHandle
UsdImagingModelSchema::Builder::Build()
{
    return UsdImagingModelSchema::BuildRetained(
        _drawMode,
        _applyDrawMode,
        _drawModeColor,
        _cardGeometry,
        _cardTextureXPos,
        _cardTextureYPos,
        _cardTextureZPos,
        _cardTextureXNeg,
        _cardTextureYNeg,
        _cardTextureZNeg
    );
}


PXR_NAMESPACE_CLOSE_SCOPE
