//
// Copyright 2023 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////

/* ************************************************************************** */
/* ** This file is generated by a script.  Do not edit directly.  Edit     ** */
/* ** defs.py or the (*)Schema.template.cpp files to make changes.         ** */
/* ************************************************************************** */

#include "pxr/usdImaging/usdImaging/modelSchema.h"
#include "pxr/imaging/hd/retainedDataSource.h"

#include "pxr/base/trace/trace.h"


PXR_NAMESPACE_OPEN_SCOPE

TF_DEFINE_PUBLIC_TOKENS(UsdImagingModelSchemaTokens,
    USDIMAGINGMODEL_SCHEMA_TOKENS);



HdPathDataSourceHandle
UsdImagingModelSchema::GetModelPath()
{
    return _GetTypedDataSource<HdPathDataSource>(
        UsdImagingModelSchemaTokens->modelPath);
}

HdTokenDataSourceHandle
UsdImagingModelSchema::GetKind()
{
    return _GetTypedDataSource<HdTokenDataSource>(
        UsdImagingModelSchemaTokens->kind);
}

HdAssetPathDataSourceHandle
UsdImagingModelSchema::GetAssetIdentifier()
{
    return _GetTypedDataSource<HdAssetPathDataSource>(
        UsdImagingModelSchemaTokens->assetIdentifier);
}

HdStringDataSourceHandle
UsdImagingModelSchema::GetAssetName()
{
    return _GetTypedDataSource<HdStringDataSource>(
        UsdImagingModelSchemaTokens->assetName);
}

HdStringDataSourceHandle
UsdImagingModelSchema::GetAssetVersion()
{
    return _GetTypedDataSource<HdStringDataSource>(
        UsdImagingModelSchemaTokens->assetVersion);
}

/*static*/
HdContainerDataSourceHandle
UsdImagingModelSchema::BuildRetained(
        const HdPathDataSourceHandle &modelPath,
        const HdTokenDataSourceHandle &kind,
        const HdAssetPathDataSourceHandle &assetIdentifier,
        const HdStringDataSourceHandle &assetName,
        const HdStringDataSourceHandle &assetVersion
)
{
    TfToken _names[5];
    HdDataSourceBaseHandle _values[5];

    size_t _count = 0;
    if (modelPath) {
        _names[_count] = UsdImagingModelSchemaTokens->modelPath;
        _values[_count++] = modelPath;
    }

    if (kind) {
        _names[_count] = UsdImagingModelSchemaTokens->kind;
        _values[_count++] = kind;
    }

    if (assetIdentifier) {
        _names[_count] = UsdImagingModelSchemaTokens->assetIdentifier;
        _values[_count++] = assetIdentifier;
    }

    if (assetName) {
        _names[_count] = UsdImagingModelSchemaTokens->assetName;
        _values[_count++] = assetName;
    }

    if (assetVersion) {
        _names[_count] = UsdImagingModelSchemaTokens->assetVersion;
        _values[_count++] = assetVersion;
    }

    return HdRetainedContainerDataSource::New(_count, _names, _values);
}

/*static*/
UsdImagingModelSchema
UsdImagingModelSchema::GetFromParent(
        const HdContainerDataSourceHandle &fromParentContainer)
{
    return UsdImagingModelSchema(
        fromParentContainer
        ? HdContainerDataSource::Cast(fromParentContainer->Get(
                UsdImagingModelSchemaTokens->model))
        : nullptr);
}

/*static*/
const TfToken &
UsdImagingModelSchema::GetSchemaToken()
{
    return UsdImagingModelSchemaTokens->model;
}

/*static*/
const HdDataSourceLocator &
UsdImagingModelSchema::GetDefaultLocator()
{
    static const HdDataSourceLocator locator(
        UsdImagingModelSchemaTokens->model
    );
    return locator;
} 
UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetModelPath(
    const HdPathDataSourceHandle &modelPath)
{
    _modelPath = modelPath;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetKind(
    const HdTokenDataSourceHandle &kind)
{
    _kind = kind;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetAssetIdentifier(
    const HdAssetPathDataSourceHandle &assetIdentifier)
{
    _assetIdentifier = assetIdentifier;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetAssetName(
    const HdStringDataSourceHandle &assetName)
{
    _assetName = assetName;
    return *this;
}

UsdImagingModelSchema::Builder &
UsdImagingModelSchema::Builder::SetAssetVersion(
    const HdStringDataSourceHandle &assetVersion)
{
    _assetVersion = assetVersion;
    return *this;
}

HdContainerDataSourceHandle
UsdImagingModelSchema::Builder::Build()
{
    return UsdImagingModelSchema::BuildRetained(
        _modelPath,
        _kind,
        _assetIdentifier,
        _assetName,
        _assetVersion
    );
}


PXR_NAMESPACE_CLOSE_SCOPE