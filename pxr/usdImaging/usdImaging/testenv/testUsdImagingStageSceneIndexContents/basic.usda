#usda 1.0

def Scope "Materials"
{
    def Material "MyMaterial"
    {
        uniform token outputs:surface.connect = </Materials/MyMaterial/MySurface.outputs:surface>

        def Shader "MySurface"
        {
            uniform asset info:glslfx:sourceAsset = @shader1.glslfx@
            uniform token info:implementationSource = "sourceAsset"
            # Declare diffuse color parameter with fallback default value
            uniform float4 inputs:diffuseColor = (1, 0, 0, 1)
            add uniform float4 inputs:diffuseColor.connect = </Materials/MyMaterial/MyTexture.outputs:color>
            token outputs:surface
        }

        # UV Texture
        def Shader "MyTexture"
        {
            uniform token info:id = "HwUvTexture_1"
            uniform asset inputs:file = @texture1.jpg@
            add uniform float2 inputs:uv.connect = </Materials/MyMaterial/MyPrimvar.outputs:result>
            float4 outputs:color
        }

        # UV Primvar
        def Shader "MyPrimvar"
        {
            uniform token info:id = "HwPrimvar_1"
            uniform token inputs:varname = "map1_uv"
            float2 outputs:result
        }
    }
}

def Xform "Geom"
{
    def Mesh "Subdiv" (
        prepend apiSchemas = ["MaterialBindingAPI", "CoordSysAPI:worldSpace", "CoordSysAPI:modelSpace"]
    )
    {
        rel coordSys:worldSpace:binding = </CoordSys/worldSpace>
        rel coordSys:modelSpace:binding = </CoordSys/modelSpace>
        float3[] extent = [(-2, -2, -2), (2, 2, 2)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding:preview = </Materials/MyMaterial>
        point3f[] points = [(-2, -2, -2), (2, -2, -2), (-2, -2, 2), (2, -2, 2)]
        color3f[] primvars:displayColor = [(0.1, 0.5, 0.8)]
        float2[] primvars:map1_uv = [(0, 1), (0.4, 1), (0, 0), (0.4, 0)] (
            interpolation = "vertex"
        )
    }
}

def Xform "CoordSys"
{
    def Xform "worldSpace"
    {
        double3 xformOp:translate = (4, 5, 6)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Xform "modelSpace"
    {
    }
}

