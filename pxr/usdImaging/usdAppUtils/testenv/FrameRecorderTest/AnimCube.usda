#usda 1.0
(
    defaultPrim = "AnimCube"
    endTimeCode = 10
    startTimeCode = 1
    upAxis = "Z"
)

def Xform "AnimCube" (
    kind = "component"
)
{
    def Xform "Geom"
    {
        def Mesh "Cube"
        {
            float3[] extent.timeSamples = {
                1: [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)],
                2: [(-0.5, -0.5188171, -0.5058566), (0.50735235, 0.507785, 0.51046515)],
                3: [(-0.5, -0.56924707, -0.5215521), (0.52705675, 0.5286489, 0.53851175)],
                4: [(-0.5, -0.6422576, -0.5442755), (0.55558395, 0.5588549, 0.57911646)],
                5: [(-0.5, -0.72881645, -0.5712156), (0.5894049, 0.594666, 0.62725616)],
                6: [(-0.5, -0.81989145, -0.59956133), (0.6249904, 0.6323456, 0.67790747)],
                7: [(-0.5, -0.9064503, -0.6265015), (0.65881133, 0.66815674, 0.7260471)],
                8: [(-0.5, -0.97946084, -0.6492249), (0.68733853, 0.6983627, 0.76665187)],
                9: [(-0.5, -1.0298908, -0.66492045), (0.7070429, 0.7192266, 0.7946985)],
                10: [(-0.5, -1.048708, -0.670777), (0.7143953, 0.7270116, 0.8051636)],
            }
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
            rel material:binding = </AnimCube/Materials/CubeMaterial>
            normal3f[] normals (
                interpolation = "faceVarying"
            )
            normal3f[] normals.timeSamples = {
                1: [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0)],
                2: [(-0.0006986833, 0.009869935, 0.99995106), (-0.00069868326, 0.009869935, 0.999951), (-0.00069868343, 0.009869937, 0.99995106), (-0.0006986833, 0.009869935, 0.999951), (-0.0132635785, 0.99990183, 0.0045246547), (-0.013263577, 0.9999018, 0.0045246542), (-0.013263577, 0.9999017, 0.0045246542), (-0.0132635785, 0.9999018, 0.0045246542), (-0.011133509, -0.0013978985, -0.99993694), (-0.011133511, -0.0013978988, -0.999937), (-0.011133511, -0.0013978987, -0.999937), (-0.01113351, -0.0013978987, -0.999937), (0.009399904, -0.99991184, -0.009365311), (0.009399904, -0.99991184, -0.009365312), (0.009399904, -0.9999119, -0.009365312), (0.009399903, -0.99991184, -0.009365311), (0.99998677, -0.0036250567, 0.0036395735), (0.9999867, -0.0036250558, 0.003639573), (0.99998677, -0.0036250565, 0.003639573), (0.99998677, -0.0036250567, 0.0036395737), (-0.99997824, 0.0065631936, 0.0005404618), (-0.99997824, 0.0065631936, 0.0005404618), (-0.99997824, 0.006563193, 0.0005404618), (-0.99997824, 0.0065631936, 0.00054046174)],
                3: [(-0.003995517, 0.03592108, 0.9993466), (-0.0039955163, 0.035921074, 0.9993466), (-0.0039955163, 0.035921074, 0.9993466), (-0.0039955163, 0.035921074, 0.9993466), (-0.04870072, 0.998679, 0.01638276), (-0.048700713, 0.998679, 0.01638276), (-0.048700713, 0.998679, 0.01638276), (-0.04870072, 0.998679, 0.01638276), (-0.04077856, -0.004411942, -0.9991584), (-0.040778566, -0.0044119423, -0.9991585), (-0.040778562, -0.004411942, -0.9991584), (-0.040778566, -0.0044119423, -0.99915844), (0.03447824, -0.9988264, -0.03401545), (0.034478236, -0.99882627, -0.034015443), (0.03447824, -0.9988264, -0.03401545), (0.03447824, -0.99882627, -0.034015447), (0.99983215, -0.0128544, 0.01304592), (0.9998323, -0.012854401, 0.013045921), (0.9998323, -0.012854404, 0.013045923), (0.9998323, -0.012854401, 0.013045921), (-0.9997046, 0.024153544, 0.002683725), (-0.9997046, 0.02415354, 0.002683725), (-0.9997046, 0.024153542, 0.0026837247), (-0.9997046, 0.02415354, 0.0026837245)],
                4: [(-0.0124290185, 0.072644755, 0.9972803), (-0.0124290185, 0.07264476, 0.99728036), (-0.012429019, 0.07264477, 0.9972804), (-0.0124290185, 0.07264476, 0.99728036), (-0.09952866, 0.9944951, 0.032764275), (-0.09952867, 0.9944951, 0.032764275), (-0.09952866, 0.9944951, 0.03276427), (-0.099528655, 0.9944951, 0.032764275), (-0.08319353, -0.0068875104, -0.99650955), (-0.083193526, -0.0068875104, -0.99650955), (-0.083193526, -0.0068875104, -0.99650955), (-0.083193526, -0.00688751, -0.99650955), (0.07035274, -0.99517155, -0.06843996), (0.07035274, -0.99517155, -0.06843996), (0.07035273, -0.99517155, -0.06843997), (0.070352726, -0.9951715, -0.06843995), (0.9993522, -0.02505352, 0.025832416), (0.99935216, -0.025053516, 0.025832413), (0.99935216, -0.025053518, 0.02583241), (0.9993522, -0.025053516, 0.02583241), (-0.99873924, 0.049612287, 0.007655463), (-0.9987392, 0.04961228, 0.0076554623), (-0.9987392, 0.04961228, 0.007655462), (-0.9987392, 0.049612284, 0.0076554627)],
                5: [(-0.028015677, 0.114749216, 0.9929993), (-0.02801568, 0.11474922, 0.9929993), (-0.028015679, 0.11474922, 0.9929993), (-0.028015682, 0.11474922, 0.9929993), (-0.15865824, 0.98602664, 0.050783273), (-0.15865822, 0.98602664, 0.050783277), (-0.15865824, 0.98602664, 0.05078328), (-0.15865825, 0.98602664, 0.05078328), (-0.13270023, -0.006935741, -0.9911319), (-0.13270023, -0.0069357413, -0.9911319), (-0.13270022, -0.006935741, -0.9911319), (-0.13270023, -0.006935741, -0.99113196), (0.11193758, -0.98792446, -0.10712209), (0.11193758, -0.98792446, -0.107122086), (0.111937605, -0.98792446, -0.107122086), (0.11193758, -0.9879244, -0.10712208), (0.9984858, -0.03791882, 0.039851617), (0.9984858, -0.037918814, 0.03985161), (0.9984858, -0.037918817, 0.039851613), (0.9984858, -0.037918817, 0.039851613), (-0.99667615, 0.07975744, 0.016593697), (-0.99667615, 0.07975744, 0.016593697), (-0.99667615, 0.07975744, 0.016593697), (-0.99667615, 0.07975743, 0.016593695)],
                6: [(-0.050949182, 0.15746158, 0.9862099), (-0.050949186, 0.15746158, 0.98621), (-0.050949182, 0.1574616, 0.98620987), (-0.05094918, 0.15746158, 0.9862099), (-0.21907859, 0.97334474, 0.06785745), (-0.2190786, 0.97334474, 0.06785747), (-0.21907857, 0.9733447, 0.06785745), (-0.21907857, 0.9733447, 0.06785745), (-0.1838828, -0.0036161647, -0.9829415), (-0.18388279, -0.003616164, -0.9829414), (-0.1838828, -0.0036161644, -0.98294157), (-0.18388279, -0.0036161644, -0.9829415), (0.15425423, -0.9773135, -0.14513314), (0.15425424, -0.9773135, -0.14513314), (0.15425426, -0.97731364, -0.14513317), (0.15425424, -0.9773135, -0.14513314), (0.9973285, -0.049808204, 0.053430986), (0.9973285, -0.049808204, 0.053430986), (0.9973285, -0.0498082, 0.053430986), (0.9973285, -0.049808204, 0.053430986), (-0.993329, 0.11138977, 0.029831257), (-0.9933288, 0.11138973, 0.02983125), (-0.9933289, 0.111389756, 0.029831257), (-0.993329, 0.11138976, 0.029831259)],
                7: [(-0.07894512, 0.19657926, 0.9773045), (-0.078945115, 0.19657926, 0.97730446), (-0.07894512, 0.19657926, 0.97730446), (-0.07894512, 0.19657928, 0.9773045), (-0.27443796, 0.95809454, 0.082088776), (-0.27443796, 0.95809454, 0.08208878), (-0.27443796, 0.95809454, 0.08208878), (-0.27443796, 0.95809454, 0.08208878), (-0.23167443, 0.0027312823, -0.9727896), (-0.23167437, 0.0027312823, -0.9727895), (-0.23167439, 0.0027312818, -0.9727894), (-0.23167443, 0.0027312823, -0.9727896), (0.19285397, -0.96483773, -0.17859298), (0.19285399, -0.9648378, -0.17859297), (0.19285399, -0.9648378, -0.17859297), (0.19285394, -0.96483773, -0.17859294), (0.9960719, -0.059733696, 0.065364875), (0.9960719, -0.059733693, 0.065364875), (0.9960719, -0.059733696, 0.065364875), (0.9960718, -0.05973369, 0.065364875), (-0.98887897, 0.14131816, 0.046340626), (-0.98887897, 0.14131814, 0.04634063), (-0.98887897, 0.14131816, 0.04634063), (-0.98887897, 0.14131816, 0.046340633)],
                8: [(-0.10722933, 0.22842206, 0.96763897), (-0.10722932, 0.22842206, 0.96763897), (-0.10722933, 0.22842206, 0.9676389), (-0.10722933, 0.22842206, 0.96763897), (-0.3193927, 0.94310117, 0.092457294), (-0.31939268, 0.94310117, 0.09245729), (-0.31939265, 0.94310117, 0.092457294), (-0.31939265, 0.9431011, 0.09245728), (-0.27134076, 0.010497093, -0.96242595), (-0.27134082, 0.010497094, -0.96242607), (-0.2713408, 0.010497094, -0.96242595), (-0.27134082, 0.010497095, -0.96242607), (0.22405776, -0.9528208, -0.20476936), (0.22405776, -0.95282084, -0.20476939), (0.22405775, -0.9528208, -0.20476934), (0.22405778, -0.95282084, -0.20476937), (0.99493426, -0.06718184, 0.07478148), (0.99493426, -0.06718184, 0.07478148), (0.99493426, -0.06718184, 0.07478148), (0.99493426, -0.067181826, 0.07478147), (-0.98401326, 0.16640578, 0.06345693), (-0.9840134, 0.16640581, 0.063456945), (-0.9840133, 0.1664058, 0.06345694), (-0.9840133, 0.1664058, 0.06345694)],
                9: [(-0.12922962, 0.24975772, 0.9596461), (-0.12922962, 0.24975774, 0.9596461), (-0.12922964, 0.24975774, 0.9596461), (-0.12922962, 0.24975772, 0.9596461), (-0.34946808, 0.9317353, 0.09869796), (-0.3494681, 0.9317352, 0.09869797), (-0.34946814, 0.93173534, 0.09869798), (-0.3494681, 0.9317353, 0.09869797), (-0.2983904, 0.017146237, -0.9542898), (-0.29839042, 0.01714624, -0.9542898), (-0.29839042, 0.01714624, -0.95428985), (-0.29839042, 0.017146237, -0.9542898), (0.24484979, -0.9438588, -0.22176345), (0.24484977, -0.9438588, -0.22176343), (0.24484974, -0.94385874, -0.2217634), (0.24484977, -0.9438588, -0.22176343), (0.994121, -0.07187855, 0.08097286), (0.9941211, -0.07187856, 0.08097286), (0.9941211, -0.071878545, 0.08097285), (0.9941211, -0.07187855, 0.08097286), (-0.97997075, 0.18361796, 0.07708222), (-0.97997075, 0.18361798, 0.07708221), (-0.97997075, 0.18361796, 0.07708222), (-0.97997075, 0.18361796, 0.07708222)],
                10: [(-0.13794665, 0.2575713, 0.95636165), (-0.13794667, 0.25757128, 0.9563616), (-0.13794667, 0.2575713, 0.95636165), (-0.13794667, 0.25757134, 0.95636165), (-0.36048287, 0.9273003, 0.10082759), (-0.3604829, 0.92730033, 0.100827605), (-0.36048287, 0.9273003, 0.10082759), (-0.36048287, 0.92730033, 0.100827605), (-0.3084092, 0.0198957, -0.95104563), (-0.3084092, 0.019895703, -0.95104563), (-0.30840924, 0.0198957, -0.95104563), (-0.30840924, 0.019895699, -0.95104563), (0.25244522, -0.9403946, -0.22787973), (0.25244522, -0.9403947, -0.22787973), (0.25244525, -0.94039476, -0.22787973), (0.2524452, -0.9403946, -0.2278797), (0.9938136, -0.07354309, 0.083222), (0.9938136, -0.073543094, 0.083222), (0.9938136, -0.07354309, 0.08322199), (0.9938136, -0.073543094, 0.083221994), (-0.97830474, 0.19001016, 0.08255731), (-0.97830474, 0.19001016, 0.08255731), (-0.97830486, 0.19001018, 0.08255733), (-0.9783048, 0.19001016, 0.08255731)],
            }
            point3f[] points.timeSamples = {
                1: [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)],
                2: [(-0.5, -0.5188171, 0.5), (0.5, -0.5, 0.51046515), (-0.49296573, 0.48996434, 0.5), (0.5, 0.5, 0.49064255), (-0.49390855, 0.49127916, -0.49568856), (0.50735235, 0.507785, -0.5058566), (-0.5, -0.5, -0.4932317), (0.5, -0.5, -0.50536907)],
                3: [(-0.5, -0.56924707, 0.5), (0.5, -0.5, 0.53851175), (-0.4741139, 0.4630687, 0.5), (0.5, 0.5, 0.46556455), (-0.47758353, 0.46790728, -0.4841339), (0.52705675, 0.5286489, -0.5215521), (-0.5, -0.5, -0.47509268), (0.5, -0.5, -0.51975805)],
                4: [(-0.5, -0.6422576, 0.5), (0.5, -0.5, 0.57911646), (-0.44682097, 0.42413026, 0.5), (0.5, 0.5, 0.42925763), (-0.45394877, 0.43407038, -0.4674055), (0.55558395, 0.5588549, -0.5442755), (-0.5, -0.5, -0.4488317), (0.5, -0.5, -0.5405899)],
                5: [(-0.5, -0.72881645, 0.5), (0.5, -0.5, 0.62725616), (-0.41446334, 0.37796617, 0.5), (0.5, 0.5, 0.38621336), (-0.42592818, 0.3939545, -0.4475729), (0.5894049, 0.594666, -0.5712156), (-0.5, -0.5, -0.41769758), (0.5, -0.5, -0.5652875)],
                6: [(-0.5, -0.81989145, 0.5), (0.5, -0.5, 0.67790747), (-0.3804175, 0.32939348, 0.5), (0.5, 0.5, 0.34092325), (-0.39644563, 0.35174558, -0.42670548), (0.6249904, 0.6323456, -0.59956133), (-0.5, -0.5, -0.38493904), (0.5, -0.5, -0.59127367)],
                7: [(-0.5, -0.9064503, 0.5), (0.5, -0.5, 0.7260471), (-0.3480599, 0.28322935, 0.5), (0.5, 0.5, 0.29787898), (-0.368425, 0.31162965, -0.40687287), (0.65881133, 0.66815674, -0.6265015), (-0.5, -0.5, -0.3538049), (0.5, -0.5, -0.6159712)],
                8: [(-0.5, -0.97946084, 0.5), (0.5, -0.5, 0.76665187), (-0.32076693, 0.24429095, 0.5), (0.5, 0.5, 0.26157206), (-0.34479025, 0.27779278, -0.39014447), (0.68733853, 0.6983627, -0.6492249), (-0.5, -0.5, -0.3275439), (0.5, -0.5, -0.6368031)],
                9: [(-0.5, -1.0298908, 0.5), (0.5, -0.5, 0.7946985), (-0.3019151, 0.2173953, 0.5), (0.5, 0.5, 0.23649406), (-0.32846522, 0.2544209, -0.3785898), (0.7070429, 0.7192266, -0.66492045), (-0.5, -0.5, -0.3094049), (0.5, -0.5, -0.65119207)],
                10: [(-0.5, -1.048708, 0.5), (0.5, -0.5, 0.8051636), (-0.29488084, 0.20735964, 0.5), (0.5, 0.5, 0.22713661), (-0.32237378, 0.24570006, -0.37427837), (0.7143953, 0.7270116, -0.670777), (-0.5, -0.5, -0.30263662), (0.5, -0.5, -0.65656114)],
            }
            color3f[] primvars:displayColor = [(0.18, 0.18, 0.18)]
            uniform token subdivisionScheme = "none"
            double3 xformOp:translate = (0, 0, 0.5)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }

    def Scope "Materials"
    {
        def Material "CubeMaterial"
        {
            token outputs:surface.connect = </AnimCube/Materials/CubeMaterial/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </AnimCube/Materials/CubeMaterial/PrimvarDisplayColor.outputs:result>
                token outputs:surface
            }

            def Shader "PrimvarDisplayColor"
            {
                uniform token info:id = "UsdPrimvarReader_float3"
                token inputs:varname = "displayColor"
                float3 outputs:result
            }
        }
    }
}

def Xform "Cameras" (
    kind = "assembly"
)
{
    def Camera "main_cam"
    {
        float2 clippingRange = (0.1, 10000)
        float focalLength = 35
        float focusDistance = 5
        float fStop = 5.6
        float horizontalAperture = 35.999928
        float verticalAperture = 23.999952
        float3 xformOp:rotateXYZ = (62.482925, -3.1805547e-15, 43.994915)
        double3 xformOp:translate = (3.8079010269722375, -3.943897492221248, 3.3559257702291783)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
    }
}
