//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by the makeScriptModuleLoader script.  Do not
// edit directly.

#include "pxr/base/tf/registryManager.h"
#include "pxr/base/tf/scriptModuleLoader.h"
#include "pxr/base/tf/token.h"

#include <vector>

TF_REGISTRY_FUNCTION(TfScriptModuleLoader) {
    std::vector<TfToken> reqs;
    reqs.reserve(23);
    reqs.push_back(TfToken("ar"));
    reqs.push_back(TfToken("arch"));
    reqs.push_back(TfToken("cameraUtil"));
    reqs.push_back(TfToken("garch"));
    reqs.push_back(TfToken("gf"));
    reqs.push_back(TfToken("glf"));
    reqs.push_back(TfToken("hd"));
    reqs.push_back(TfToken("hdx"));
    reqs.push_back(TfToken("js"));
    reqs.push_back(TfToken("kind"));
    reqs.push_back(TfToken("pcp"));
    reqs.push_back(TfToken("plug"));
    reqs.push_back(TfToken("pxOsd"));
    reqs.push_back(TfToken("sdf"));
    reqs.push_back(TfToken("tf"));
    reqs.push_back(TfToken("tracelite"));
    reqs.push_back(TfToken("usd"));
    reqs.push_back(TfToken("usdGeom"));
    reqs.push_back(TfToken("usdHydra"));
    reqs.push_back(TfToken("usdImaging"));
    reqs.push_back(TfToken("usdShade"));
    reqs.push_back(TfToken("vt"));
    reqs.push_back(TfToken("work"));
    TfScriptModuleLoader::GetInstance().
        RegisterLibrary(TfToken("usdImagingGL"), TfToken("pxr.UsdImagingGL"), reqs);
}

