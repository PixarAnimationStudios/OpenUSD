//
// Copyright 2019 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
shader UsdUVTexture
[[ 
    string category="generator",
    string primvars="s,t"
]]
(
    // Details : Image source
    string file = "",

    // Details : Texture coordinates
    float st[2] = {0.0, 0.0},

    // Details : [options] useMetadata, black, clamp, repeat, mirror.
    string wrapS = "useMetadata",
    string wrapT = "useMetadata",

    // Details : Fallback value used when no texture is connected.
    color fallback = color(0.0, 0.0, 0.0),

    // Details : Scale to be applied to all components of the texture. 
    //            value * scale + bias
    color scale = color(1.0, 1.0, 1.0),
 
    // Details : Bias to be applied to all components of the texture. 
    //            value * scale + bias
    color bias = color(0.0, 0.0, 0.0),

    // Details : [options] r, g, b, a, rgb, rgba
    output color rgb = color(0.0,0.0,0.0)
        [[ string widget = "null" ]],
    output float r = 0.0
        [[ string widget = "null" ]],
    output float g = 0.0
        [[ string widget = "null" ]],
    output float b = 0.0
        [[ string widget = "null" ]],
    output float a = 0.0
        [[ string widget = "null" ]],
) 
{
    color result = fallback;
    string swrap = wrapS;
    string twrap = wrapT;
    float alpha = 1.0;

    // Wrap mode conversion
    if (swrap == "repeat") {
        swrap = "periodic";
    }

    if (twrap == "repeat") {
        twrap = "periodic";
    }

    if (swrap == "useMetadata") {
        swrap = "default";
    }

    if (twrap == "useMetadata") {
        twrap = "default";
    }

    // Read the texture
    result = texture(file, st[0], st[1], 
        "swrap", swrap, "twrap", twrap,
        "missingcolor", fallback, "alpha", alpha); 

    // Output the colors
    rgb = result * scale + bias;
    r = rgb[0];
    g = rgb[1];
    b = rgb[2];
    a = alpha;
}
