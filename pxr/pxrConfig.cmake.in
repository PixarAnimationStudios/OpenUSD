# - Configuration file for the pxr project
# Defines the following variables:
# PXR_MAJOR_VERSION - Major version number.
# PXR_MINOR_VERSION - Minor version number.
# PXR_PATCH_VERSION - Patch version number.
# PXR_VERSION       - Complete pxr version string.
# PXR_INCLUDE_DIRS  - Root include directory for the installed project.
# PXR_LIBRARIES     - List of all libraries, by target name.
# PXR_foo_LIBRARY   - Absolute path to individual libraries.
# The preprocessor definition PXR_STATIC will be defined if appropriate

get_filename_component(PXR_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

set(PXR_MAJOR_VERSION "@PXR_MAJOR_VERSION@")
set(PXR_MINOR_VERSION "@PXR_MINOR_VERSION@")
set(PXR_PATCH_VERSION "@PXR_PATCH_VERSION@")
set(PXR_VERSION "@PXR_VERSION@")

# If Python support was enabled for this USD build, find the import
# targets by invoking the appropriate FindPython module. Use the same
# LIBRARY and INCLUDE_DIR settings from the original build if they
# were set. This can be overridden by specifying different values when
# running cmake.
if(@PXR_ENABLE_PYTHON_SUPPORT@)
    if (NOT DEFINED Python3_EXECUTABLE)
        if (NOT [[@Python3_EXECUTABLE@]] STREQUAL "")
            set(Python3_EXECUTABLE [[@Python3_EXECUTABLE@]])
        endif()
    endif()

    if (NOT DEFINED Python3_LIBRARY)
        if (NOT [[@Python3_LIBRARY@]] STREQUAL "")
            set(Python3_LIBRARY [[@Python3_LIBRARY@]])
        endif()
    endif()

    if (NOT DEFINED Python3_INCLUDE_DIR)
        if (NOT [[@Python3_INCLUDE_DIR@]] STREQUAL "")
            set(Python3_INCLUDE_DIR [[@Python3_INCLUDE_DIR@]])
        endif()
    endif()

    if (NOT DEFINED Python3_VERSION)
        find_package(Python3 "@Python3_VERSION@" EXACT COMPONENTS Development REQUIRED)
    else()
        find_package(Python3 COMPONENTS Development REQUIRED)
    endif()
endif()

# If MaterialX support was enabled for this USD build, try to find the
# associated import targets by invoking the same FindMaterialX.cmake
# module that was used for that build. This can be overridden by
# specifying a different MaterialX_DIR when running cmake.
if(@PXR_ENABLE_MATERIALX_SUPPORT@)
    if (NOT DEFINED MaterialX_DIR)
        if (NOT [[@MaterialX_DIR@]] STREQUAL "")
            set(MaterialX_DIR [[@MaterialX_DIR@]])
        endif()
    endif()
    find_package(MaterialX REQUIRED)
endif()

# Similar to MaterialX above, we are using Imath's cmake package config, so set
# the Imath_DIR accordingly to find the associated import targets which were
# used for this USD build. 
# Note that we only need to do this, when it is determined by Imath is being
# used instead of OpenExr (refer Packages.cmake)
if(@Imath_FOUND@)
    if (NOT DEFINED Imath_DIR)
        if (NOT [[@Imath_DIR@]] STREQUAL "")
            set(Imath_DIR [[@Imath_DIR@]])
        endif()
    endif()
    find_package(Imath REQUIRED)
endif()

include("${PXR_CMAKE_DIR}/cmake/pxrTargets.cmake")
if (TARGET usd_ms)
    set(libs "usd_ms")
else()
    set(libs "@PXR_ALL_LIBS@")
endif()
set(PXR_LIBRARIES "")
set(PXR_INCLUDE_DIRS "${PXR_CMAKE_DIR}/include")
string(REPLACE " " ";" libs "${libs}")
foreach(lib ${libs})
    get_target_property(location ${lib} LOCATION)
    set(PXR_${lib}_LIBRARY ${location})
    list(APPEND PXR_LIBRARIES ${lib})
endforeach()
if(NOT @BUILD_SHARED_LIBS@)
    if(WIN32)
        list(APPEND PXR_LIBRARIES Shlwapi.lib)
        list(APPEND PXR_LIBRARIES Dbghelp.lib)
    endif()
    add_definitions(-DPXR_STATIC)
endif()
