//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//
////////////////////////////////////////////////////////////////////////
// This file is generated by a script.  Do not edit directly.  Edit the
// wrapQuat.template.cpp file to make changes.

#include "pxr/pxr.h"
#include "pxr/base/gf/quatd.h"
#include "pxr/base/gf/quatf.h"
#include "pxr/base/gf/quath.h"

#include "pxr/base/tf/pyUtils.h"
#include "pxr/base/tf/wrapTypeHelpers.h"
#include "pxr/base/tf/pyContainerConversions.h"

#include <boost/python/class.hpp>
#include <boost/python/copy_const_reference.hpp>
#include <boost/python/def.hpp>
#include <boost/python/implicit.hpp>
#include <boost/python/make_constructor.hpp>
#include <boost/python/operators.hpp>
#include <boost/python/overloads.hpp>
#include <boost/python/return_arg.hpp>

#include <string>



PXR_NAMESPACE_USING_DIRECTIVE

namespace {

static std::string __repr__(GfQuatd const &self) {
    return TF_PY_REPR_PREFIX + "Quatd(" +
        TfPyRepr(self.GetReal()) + ", " +
        TfPyRepr(self.GetImaginary()) + ")";
}

#if PY_MAJOR_VERSION == 2
static GfQuatd __truediv__(const GfQuatd &self, double value)
{
    return self / value;
}

static GfQuatd __itruediv__(GfQuatd &self, double value)
{
    return self /= value;
}
#endif

// Zero-initialized default ctor for python.
static GfQuatd *__init__() { return new GfQuatd(0); }

} // anonymous namespace 

void wrapQuatd()
{    
    boost::python::object getImaginary =
        boost::python::make_function(&GfQuatd::GetImaginary,
                      boost::python::return_value_policy<boost::python::return_by_value>());

    boost::python::object setImaginaryVec =
        boost::python::make_function((void (GfQuatd::*)(const GfVec3d &))
                      &GfQuatd::SetImaginary);

    boost::python::object setImaginaryScl =
        boost::python::make_function((void (GfQuatd::*)(double, double, double))
                      &GfQuatd::SetImaginary,
                      boost::python::default_call_policies(),
                      (boost::python::arg("i"), boost::python::arg("j"), boost::python::arg("k")));

    boost::python::def("Slerp",
        (GfQuatd (*)(double, const GfQuatd&, const GfQuatd&))
        GfSlerp);

    boost::python::def("Dot",
        (double (*)(const GfQuatd&, const GfQuatd&))
        GfDot);
    
    boost::python::class_<GfQuatd>("Quatd", boost::python::no_init)
        .def("__init__", boost::python::make_constructor(__init__))
                          
        .def(TfTypePythonClass())

        .def(boost::python::init<GfQuatd>())
        .def(boost::python::init<double>(boost::python::arg("real")))
        .def(boost::python::init<double, const GfVec3d &>(
                 (boost::python::arg("real"), boost::python::arg("imaginary"))))
        .def(boost::python::init<double, double, double, double>(
                 (boost::python::arg("real"), boost::python::arg("i"), boost::python::arg("j"), boost::python::arg("k"))))

        .def("GetIdentity", &GfQuatd::GetIdentity)
        .staticmethod("GetIdentity")

        .def("GetReal", &GfQuatd::GetReal)
        .def("SetReal", &GfQuatd::SetReal)
        .add_property("real", &GfQuatd::GetReal, &GfQuatd::SetReal)

        .def("GetImaginary", getImaginary)
        .def("SetImaginary", setImaginaryVec)
        .def("SetImaginary", setImaginaryScl)
        .add_property("imaginary", getImaginary, setImaginaryVec)

        .def("GetLength", &GfQuatd::GetLength)

        .def("GetNormalized", &GfQuatd::GetNormalized,
             (boost::python::arg("eps")=GF_MIN_VECTOR_LENGTH))
        .def("Normalize", &GfQuatd::Normalize,
             (boost::python::arg("eps")=GF_MIN_VECTOR_LENGTH), boost::python::return_self<>())

        .def("GetConjugate", &GfQuatd::GetConjugate)
        .def("GetInverse", &GfQuatd::GetInverse)

        .def("Transform", &GfQuatd::Transform)

        .def(boost::python::self_ns::str(boost::python::self))
        .def(-boost::python::self)
        .def(boost::python::self == boost::python::self)
        .def(boost::python::self != boost::python::self)
        .def(boost::python::self *= boost::python::self)
        .def(boost::python::self *= double())
        .def(boost::python::self /= double())
        .def(boost::python::self += boost::python::self)
        .def(boost::python::self -= boost::python::self)
        .def(boost::python::self + boost::python::self)
        .def(boost::python::self - boost::python::self)
        .def(boost::python::self * boost::python::self)
        .def(boost::python::self * double())
        .def(double() * boost::python::self)
        .def(boost::python::self / double())

#if PY_MAJOR_VERSION == 2
        // Needed only to support "from __future__ import division" in
        // python 2. In python 3 builds boost::python adds this for us.
        .def("__truediv__", __truediv__ )
        .def("__itruediv__", __itruediv__ )
#endif

        .def("__repr__", __repr__)

        ;

    boost::python::implicitly_convertible<GfQuatf, GfQuatd>();
    boost::python::implicitly_convertible<GfQuath, GfQuatd>();

    boost::python::to_python_converter<std::vector<GfQuatd>,
        TfPySequenceToPython<std::vector<GfQuatd> > >();
    
}
