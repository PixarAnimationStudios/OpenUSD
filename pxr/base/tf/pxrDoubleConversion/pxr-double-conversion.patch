diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/bignum.cc ./bignum.cc
--- double-conversion/bignum.cc	2016-11-23 10:14:38.000000000 -0800
+++ ./bignum.cc	2017-02-16 11:14:39.830355506 -0800
@@ -28,7 +28,11 @@
 #include "bignum.h"
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 Bignum::Bignum()
     : bigits_(bigits_buffer_, kBigitCapacity), used_digits_(0), exponent_(0) {
@@ -763,4 +767,6 @@
 }
 
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/bignum-dtoa.cc ./bignum-dtoa.cc
--- double-conversion/bignum-dtoa.cc	2016-11-23 10:14:38.000000000 -0800
+++ ./bignum-dtoa.cc	2017-02-16 11:14:39.824775980 -0800
@@ -32,7 +32,11 @@
 #include "bignum.h"
 #include "ieee.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 static int NormalizedExponent(uint64_t significand, int exponent) {
   ASSERT(significand != 0);
@@ -638,4 +642,6 @@
   }
 }
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/bignum-dtoa.h ./bignum-dtoa.h
--- double-conversion/bignum-dtoa.h	2016-11-23 10:14:38.000000000 -0800
+++ ./bignum-dtoa.h	2017-02-10 14:19:01.628549138 -0800
@@ -30,7 +30,11 @@
 
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 enum BignumDtoaMode {
   // Return the shortest correct representation.
@@ -79,6 +83,8 @@
 void BignumDtoa(double v, BignumDtoaMode mode, int requested_digits,
                 Vector<char> buffer, int* length, int* point);
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_BIGNUM_DTOA_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/bignum.h ./bignum.h
--- double-conversion/bignum.h	2016-11-23 10:14:38.000000000 -0800
+++ ./bignum.h	2017-02-10 14:19:01.641189449 -0800
@@ -30,7 +30,11 @@
 
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 class Bignum {
  public:
@@ -139,6 +143,8 @@
   DISALLOW_COPY_AND_ASSIGN(Bignum);
 };
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_BIGNUM_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/cached-powers.cc ./cached-powers.cc
--- double-conversion/cached-powers.cc	2016-11-23 10:14:38.000000000 -0800
+++ ./cached-powers.cc	2017-02-16 11:14:39.835145055 -0800
@@ -33,7 +33,11 @@
 
 #include "cached-powers.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 struct CachedPower {
   uint64_t significand;
@@ -172,4 +176,6 @@
   ASSERT(requested_exponent < *found_exponent + kDecimalExponentDistance);
 }
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/cached-powers.h ./cached-powers.h
--- double-conversion/cached-powers.h	2016-11-23 10:14:38.000000000 -0800
+++ ./cached-powers.h	2017-02-10 14:19:01.652884409 -0800
@@ -30,7 +30,11 @@
 
 #include "diy-fp.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 class PowersOfTenCache {
  public:
@@ -59,6 +63,8 @@
                                                int* found_exponent);
 };
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_CACHED_POWERS_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/diy-fp.cc ./diy-fp.cc
--- double-conversion/diy-fp.cc	2016-11-23 10:14:38.000000000 -0800
+++ ./diy-fp.cc	2017-02-16 11:14:39.840160076 -0800
@@ -29,7 +29,11 @@
 #include "diy-fp.h"
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 void DiyFp::Multiply(const DiyFp& other) {
   // Simply "emulates" a 128 bit multiplication.
@@ -54,4 +58,6 @@
   f_ = result_f;
 }
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/diy-fp.h ./diy-fp.h
--- double-conversion/diy-fp.h	2016-11-23 10:14:38.000000000 -0800
+++ ./diy-fp.h	2017-02-10 14:19:01.675025105 -0800
@@ -30,7 +30,11 @@
 
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 // This "Do It Yourself Floating Point" class implements a floating-point number
 // with a uint64 significand and an int exponent. Normalized DiyFp numbers will
@@ -113,6 +117,8 @@
   int e_;
 };
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_DIY_FP_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/double-conversion.cc ./double-conversion.cc
--- double-conversion/double-conversion.cc	2016-11-23 10:14:38.000000000 -0800
+++ ./double-conversion.cc	2017-02-16 11:14:39.845288550 -0800
@@ -37,7 +37,11 @@
 #include "strtod.h"
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 const DoubleToStringConverter& DoubleToStringConverter::EcmaScriptConverter() {
   int flags = UNIQUE_ZERO | EMIT_POSITIVE_EXPONENT_SIGN;
@@ -979,4 +983,6 @@
                                          processed_characters_count));
 }
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/double-conversion.h ./double-conversion.h
--- double-conversion/double-conversion.h	2016-11-23 10:14:38.000000000 -0800
+++ ./double-conversion.h	2017-02-10 14:19:01.687422876 -0800
@@ -30,7 +30,11 @@
 
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 class DoubleToStringConverter {
  public:
@@ -538,6 +542,8 @@
   DISALLOW_IMPLICIT_CONSTRUCTORS(StringToDoubleConverter);
 };
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_DOUBLE_CONVERSION_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/fast-dtoa.cc ./fast-dtoa.cc
--- double-conversion/fast-dtoa.cc	2016-11-23 10:14:38.000000000 -0800
+++ ./fast-dtoa.cc	2017-02-16 11:14:39.851282441 -0800
@@ -31,7 +31,11 @@
 #include "diy-fp.h"
 #include "ieee.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 // The minimal and maximal target exponent define the range of w's binary
 // exponent, where 'w' is the result of multiplying the input by a cached power
@@ -662,4 +666,6 @@
   return result;
 }
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/fast-dtoa.h ./fast-dtoa.h
--- double-conversion/fast-dtoa.h	2016-11-23 10:14:38.000000000 -0800
+++ ./fast-dtoa.h	2017-02-10 14:19:01.699186694 -0800
@@ -30,7 +30,11 @@
 
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 enum FastDtoaMode {
   // Computes the shortest representation of the given input. The returned
@@ -83,6 +87,8 @@
               int* length,
               int* decimal_point);
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_FAST_DTOA_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/fixed-dtoa.cc ./fixed-dtoa.cc
--- double-conversion/fixed-dtoa.cc	2016-11-23 10:14:38.000000000 -0800
+++ ./fixed-dtoa.cc	2017-02-16 11:14:39.856232233 -0800
@@ -30,7 +30,11 @@
 #include "fixed-dtoa.h"
 #include "ieee.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 // Represents a 128bit type. This class should be replaced by a native type on
 // platforms that support 128bit integers.
@@ -401,4 +405,6 @@
   return true;
 }
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/fixed-dtoa.h ./fixed-dtoa.h
--- double-conversion/fixed-dtoa.h	2016-11-23 10:14:38.000000000 -0800
+++ ./fixed-dtoa.h	2017-02-10 14:19:01.730614602 -0800
@@ -30,7 +30,11 @@
 
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 // Produces digits necessary to print a given number with
 // 'fractional_count' digits after the decimal point.
@@ -51,6 +55,8 @@
 bool FastFixedDtoa(double v, int fractional_count,
                    Vector<char> buffer, int* length, int* decimal_point);
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_FIXED_DTOA_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/ieee.h ./ieee.h
--- double-conversion/ieee.h	2016-11-23 10:14:38.000000000 -0800
+++ ./ieee.h	2017-02-10 14:19:01.738713399 -0800
@@ -30,7 +30,11 @@
 
 #include "diy-fp.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 // We assume that doubles and uint64_t have the same endianness.
 static uint64_t double_to_uint64(double d) { return BitCast<uint64_t>(d); }
@@ -397,6 +401,8 @@
   DISALLOW_COPY_AND_ASSIGN(Single);
 };
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_DOUBLE_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/strtod.cc ./strtod.cc
--- double-conversion/strtod.cc	2016-11-23 10:14:38.000000000 -0800
+++ ./strtod.cc	2017-02-16 11:14:39.872657672 -0800
@@ -33,7 +33,11 @@
 #include "cached-powers.h"
 #include "ieee.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 // 2^53 = 9007199254740992.
 // Any integer with at most 15 decimal digits will hence fit into a double
@@ -552,4 +556,6 @@
   }
 }
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/strtod.h ./strtod.h
--- double-conversion/strtod.h	2016-11-23 10:14:38.000000000 -0800
+++ ./strtod.h	2017-02-10 14:19:01.759651951 -0800
@@ -30,7 +30,11 @@
 
 #include "utils.h"
 
-namespace double_conversion {
+#include "pxr/pxr.h"
+
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 // The buffer must only contain digits in the range [0-9]. It must not
 // contain a dot or a sign. It must not start with '0', and must not be empty.
@@ -40,6 +44,8 @@
 // contain a dot or a sign. It must not start with '0', and must not be empty.
 float Strtof(Vector<const char> buffer, int exponent);
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_STRTOD_H_
diff -ruaN -x pxr-double-conversion.patch -x CMakeLists.txt -x SConscript -x README double-conversion/utils.h ./utils.h
--- double-conversion/utils.h	2016-11-23 10:14:38.000000000 -0800
+++ ./utils.h	2017-02-10 14:19:01.765691891 -0800
@@ -56,6 +56,8 @@
 #endif
 #endif
 
+#include "pxr/pxr.h"
+
 
 // Double operations detection based on target architecture.
 // Linux uses a 80bit wide floating point stack on x86. This induces double
@@ -154,7 +156,9 @@
   DISALLOW_COPY_AND_ASSIGN(TypeName)
 #endif
 
-namespace double_conversion {
+PXR_NAMESPACE_OPEN_SCOPE
+
+namespace pxr_double_conversion {
 
 static const int kCharSize = sizeof(char);
 
@@ -337,6 +341,8 @@
   return BitCast<Dest>(reinterpret_cast<uintptr_t>(source));
 }
 
-}  // namespace double_conversion
+}  // namespace pxr_double_conversion
+
+PXR_NAMESPACE_CLOSE_SCOPE
 
 #endif  // DOUBLE_CONVERSION_UTILS_H_
