name: pypi

on:
  push:
    branches:
      - enable_pypi

jobs:
  Linux:
    strategy:
      matrix:
        PYTHON:
          # - TAG: cp311
          #   INTERPRETER: python3.11
          # - TAG: cp311
          #   INTERPRETER: python3.11
          # - TAG: cp311
          #   INTERPRETER: python3.11
          # - TAG: cp311
          #   INTERPRETER: python3.11
          # - TAG: cp311
          #   INTERPRETER: python3.11
          - TAG: cp311
            INTERPRETER: /opt/python/cp311-cp311/bin/python
            VERSION_SPEC: 3.11
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYTHON.VERSION_SPEC }}
      - name: Restore cached artifacts
        id: cache-usd-build-dependency
        uses: actions/cache/restore@v3
        with:
          path: |
            USDgen/build
            USDinst
            !USDgen/build/USD
          key: ${{ runner.os }}-build-${{ hashFiles('build_scripts/**') }}
      - name: Setting up docker
        run: |
          docker build -t manylinuxwithcmake build_scripts/pypi/docker
          docker run --name usdmanylinux --rm -id -v ./:/opt/USD -v /home/vsts/dist:/opt/USD-dist manylinuxwithcmake
      - name: Building USD
        run: |
          # Terrible, terrible hack. The manylinux Docker image used to build the
          # Python wheel does not include the corresponding Python shared library
          # to link against. https://peps.python.org/pep-0513/#libpythonx-y-so-1
          # describes why this is so. However, the FindPython CMake module used
          # by USD's build system requires that the library exists and will error
          # out otherwise, even though we explicitly avoid linking against Python
          # via the PXR_PY_UNDEFINED_DYNAMIC_LOOKUP flag.
          # 
          # To work around this, we create a dummy file for the library using
          # the same logic as build_usd.py to determine where the library should
          # exist (see GetPythonInfo). FindPython will see that the library exists
          # and allow the build to continue. The file is 100% bogus, but the
          # PXR_PY_UNDEFINED_DYNAMIC_LOOKUP flag will ensure that we never try to
          # link against this library anyway, so it doesn't matter.
          docker exec usdmanylinux ${{ matrix.PYTHON.INTERPRETER }} -c "import pathlib,sysconfig; pathlib.Path(sysconfig.get_config_var('LIBDIR'), sysconfig.get_config_var('LDLIBRARY')).touch()"
          docker exec usdmanylinux ${{ matrix.PYTHON.INTERPRETER }}  build_scripts/build_usd.py --build-args USD,"-DPXR_PY_UNDEFINED_DYNAMIC_LOOKUP=ON -DPXR_BUILD_USD_TOOLS=OFF -DPXR_INSTALL_LOCATION=../pxr/pluginfo" --no-materialx --no-imaging --no-examples --no-tutorials --build /opt/USD/gen/build --src /opt/USD/gen/src /opt/USD/inst -v
      - displayName: "Creating packaging directory"
      run: |
          docker exec usdmanylinux mkdir ./packaging
          docker exec usdmanylinux cp -R /opt/USD/inst ./packaging
          docker exec usdmanylinux sh -c 'cp build_scripts/pypi/package_files/* ./packaging'
          docker exec usdmanylinux sh -c 'cp LICENSE.txt ./packaging'
#       - name: Save build artifacts to cache
#         if: steps.cache-usd-build-dependency.outputs.cache-hit != 'true'
#         uses: actions/cache/save@v3
#         with:
#           path: |
#             USDgen/build
#             USDinst
#             !USDgen/build/USD
#           key: ${{ runner.os }}-build-${{ hashFiles('build_scripts/**') }}

  # macOS:
#     strategy:
#       matrix:
#         PYTHON:
# #           - VERSION_SPEC: 3.6
# #             TAG: cp36
# #             INTERPRETER: python3.6
# #           - VERSION_SPEC: 3.7
# #             TAG: cp37
# #             INTERPRETER: python3.7
# #           - VERSION_SPEC: 3.8
# #             TAG: cp38
# #             INTERPRETER: python3.8
# #           - VERSION_SPEC: 3.9
# #             TAG: cp39
# #             INTERPRETER: python3.9
# #           - VERSION_SPEC: 3.10
# #             TAG: cp310
# #             INTERPRETER: python3.10
#           - VERSION_SPEC: 3.11
#             TAG: cp311
# #             INTERPRETER: python3.11
#     runs-on: macos-14
#     timeout-minutes: 120
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#       - uses: actions/setup-python@v5
#         with:
#           python-version: ${{ matrix.PYTHON.VERSION_SPEC }}
#       - name: Restore cached artifacts
#         id: cache-usd-build-dependency
#         uses: actions/cache/restore@v3
#         with:
#           path: |
#             USDgen/build
#             USDinst
#             !USDgen/build/USD
#           key: ${{ runner.os }}-build-${{ hashFiles('build_scripts/**') }}
#       - name: Build USD
#         run: |
#           sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
#           python build_scripts/build_usd.py --build-args USD,"-DPXR_PY_UNDEFINED_DYNAMIC_LOOKUP=ON -DPXR_BUILD_USD_TOOLS=OFF" --no-materialx --no-imaging --no-examples --no-tutorials --generator Xcode --build-target universal --build USDgen/build --src USDgen/src USDinst -v
#       - name: Packaging USD
#         run: |
#           pwd
#           ls -la
#           mkdir packaging
#           mkdir packaging/inst
#           cp -R USDinst/* packaging/inst/
#           cp build_scripts/pypi/package_files/* packaging/
#           cp LICENSE.txt ./packaging/
#           ls -la ./packaging
#           ls -la ./packaging/inst
#       - name: Installing Python
#         run: |
#           python -m pip install delocate wheel
#       - name: Running setup.py
#         run: |
#           cd packaging
#           python setup.py bdist_wheel --python-tag ${{ matrix.PYTHON.TAG }} --plat-name macosx_10_9_universal2
#       - name: Running delocate
#         run: |
#           delocate-wheel -v -w dist-delocated packaging/dist/*
#       - name: Save build artifacts to cache
#         if: steps.cache-usd-build-dependency.outputs.cache-hit != 'true'
#         uses: actions/cache/save@v3
#         with:
#           path: |
#             USDgen/build
#             USDinst
#             !USDgen/build/USD
#           key: ${{ runner.os }}-build-${{ hashFiles('build_scripts/**') }}
#   Windows:
#     strategy:
#       matrix:
#         PYTHON:
# #           - VERSION_SPEC: 3.6
# #             TAG: cp36
# #           - VERSION_SPEC: 3.7
# #             TAG: cp37
# #           - VERSION_SPEC: 3.8
# #             TAG: cp38
# #           - VERSION_SPEC: 3.9
# #             TAG: cp39
# #           - VERSION_SPEC: 3.10
# #             TAG: cp310
#           - VERSION_SPEC: 3.11
#             TAG: cp311
#     runs-on: windows-2019
#     timeout-minutes: 120
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#       - uses: actions/setup-python@v5
#         with:
#           python-version: ${{ matrix.PYTHON.VERSION_SPEC }}
#       - name: Restore cached artifacts
#         id: cache-usd-build-dependency
#         uses: actions/cache/restore@v3
#         with:
#           path: |
#             USDgen/build
#             USDinst
#             !USDgen/build/USD
#           key: ${{ runner.os }}-build-${{ hashFiles('build_scripts/**') }}
#       - name: Build USD
#         run: |
#           call C:\"Program Files (x86)"\"Microsoft Visual Studio"\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
#           set BOOST_ROOT=
#           python --version
#           python build_scripts/build_usd.py --build-args USD,"-DPXR_ENABLE_PRECOMPILED_HEADERS=OFF -DPXR_PY_UNDEFINED_DYNAMIC_LOOKUP=ON -DPXR_BUILD_USD_TOOLS=OFF" --no-materialx --no-imaging --no-examples --no-tutorials --build USDgen/build --src USDgen/src USDinst -v
#         shell: cmd
#       - name: Packaging USD
#         run: |
#           dir
#           mkdir D:\packaging
#           xcopy /E /I USDinst D:\packaging\inst
#           copy build_scripts\pypi\package_files\* D:\packaging
#           copy LICENSE.txt D:\packaging
#           dir D:\packaging
#           dir D:\packaging\inst
#         shell: cmd
#       - name: Installing Python
#         run: |
#           python -m pip install wheel
#         shell: cmd
#       - name: Running setup.py
#         run: |
#           D:
#           cd D:\packaging
#           python setup.py bdist_wheel --python-tag ${{ matrix.PYTHON.TAG }} --plat-name win_amd64
#         shell: cmd
#       - name: Save build artifacts to cache
#         if: steps.cache-usd-build-dependency.outputs.cache-hit != 'true'
#         uses: actions/cache/save@v3
#         with:
#           path: |
#             USDgen/build
#             USDinst
#             !USDgen/build/USD
#           key: ${{ runner.os }}-build-${{ hashFiles('build_scripts/**') }}
